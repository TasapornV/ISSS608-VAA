)
p1 <- p +  facet_wrap (~ town, nrow = 6, ncol = 6) +
xlab("floor area") +
scale_y_continuous(breaks = c(0,3000,6000,9000,12000), name = "Resale price(kSGD)")
ggplotly(p1)
ggplot(data = Resale, mapping = aes(y=town, fill=flat_type)) +
theme_minimal() +
geom_bar(position = "fill") +
scale_fill_viridis_d(option = "C") +
labs(title = "Flat type proportion by town", fill = "Flat type",
x = "Count", y = "")
Resale %>%
group_by(flat_type) %>%
# Extract quarter and price per sqm
mutate(price_per_sqm = resale_price_kSGD/floor_area_sqm) %>%
ggplot(mapping = aes(x = flat_type, y = price_per_sqm)) +
# Make grouped boxplot
geom_boxplot(aes(fill = as.factor(quarter)), color = "black") +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_viridis_d(option = "C") +
# Adjust lables and add title
labs(title = "HDB resale prices in 2022 by flat type", y="Price per square metre (SGD)", fill = "Month")
Resale %>%
group_by(flat_type) %>%
# Extract quarter and price per sqm
mutate(price_per_sqm = resale_price_kSGD/floor_area_sqm) %>%
ggplot(mapping = aes(x = flat_type, y = price_per_sqm)) +
# Make grouped boxplot
geom_boxplot(aes(fill = as.factor(quarter)), color = "black") +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_viridis_d(option = "C") +
# Adjust lables and add title
labs(title = "HDB resale prices in 2022 by flat type", y="Price per square metre (SGD)", fill = "Quarter")
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
bind_cols(volume = average_area) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = volume, color = volume), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous(labels = comma, limits = c(330000, 730000)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C") +
labs(title = "HDB Resale flat features by neighborhood", x = "Housing age", y = "Resale price (SGD)",
color = "Resale volume", size = "Resale volume")
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous(labels = comma, limits = c(330000, 730000)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C") +
labs(title = "HDB Resale flat features by neighborhood", x = "Housing age", y = "Resale price (SGD)",
color = "Resale volume", size = "Resale volume")
library(ggrepel)
library(ggrepel)
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous(labels = comma, limits = c(330000, 730000)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C") +
labs(title = "HDB Resale flat features by neighborhood", x = "Housing age", y = "Resale price (SGD)",
color = "Resale volume", size = "Resale volume")
library(ggrepel)
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous(labels = comma, limits = c(330000, 730000)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C") +
labs(title = "HDB Resale flat features by neighborhood", x = "Housing age", y = "Resale price (SGD)",
color = "Resale volume", size = "Resale volume")
library(ggrepel)
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous(labels = comma, limits = c(330000, 730000)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
library(ggrepel)
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous(labels = comma, limits = c(330000, 730000)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm))
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6)
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7)
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous(labels = comma, limits = c(330000, 730000))
library(ggrepel)
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
# scale_y_continuous(labels = comma, limits = c(330000, 730000)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
library(ggrepel)
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous(labels = comma, limits = c(330, 730)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
library(ggrepel)
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous( limits = c(330, 730)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
library(ggrepel)
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous( limits = c(330, 800)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
library(ggrepel)
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous( limits = c(400, 800)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel')
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'ggplotly')
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly')
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.2) +
# Change size of count points
scale_size_area(max_size = 18) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous( limits = c(400, 800)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 10) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous( limits = c(400, 800)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(size = average_area, color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 15) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous( limits = c(400, 800)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 15) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous( limits = c(400, 800)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 10) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous( limits = c(400, 800)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
Resale_raw <- read_csv("Data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv")
glimpse(Resale_raw)
View(Resale_raw)
ggbetweenstats(
data = Resale,
x = 'flat_type',
y = 'resale_price_kSGD',
type = "np",
messages = FALSE) +
ggtitle("What is the difference in resale price between different types of flats?")
ggbetweenstats(
data = Resale,
x = 'flat_type',
y = 'resale_price_kSGD',
type = "np",
messages = FALSE) +
ggtitle("What is the difference in resale price between different types of flats?")
p<-ggplot(Resale, aes(x=flat_type, y=resale_price_kSGD, fill=flat_type)) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point", color="red") +
theme(legend.position="none") +
ggtitle("Boxplot of resale price by flat type")
# Remove legend
#| fig-height: 12
#| fig-width: 12
p
gghistostats(
data = Resale,
x = 'resale_price_kSGD',
type = "bayes",
test.value = 60,
xlab = "resale_price (kSGD)" ) +
ggtitle("What is the overall Resale price distribution?")
gghistostats(
data = Resale,
x = 'resale_price_kSGD',
type = "bayes",
test.value = 60,
xlab = "resale_price (kSGD)" ) +
ggtitle("What is the overall Resale price distribution?")
?gghistostats
gghistostats(
data = Resale,
x = 'resale_price_kSGD',
# type = "bayes",
test.value = 60,
xlab = "resale_price (kSGD)" ) +
ggtitle("What is the overall Resale price distribution?")
gghistostats(
data = Resale,
x = 'resale_price_kSGD',
test.value = 60,
xlab = "resale_price (kSGD)" ) +
ggtitle("What is the overall Resale price distribution?")
gghistostats(
data = Resale,
x = 'resale_price_kSGD',
# test.value = 60,
xlab = "resale_price (kSGD)" ) +
ggtitle("What is the overall Resale price distribution?")
gghistostats(
data = Resale,
x = 'resale_price_kSGD',
test.value = 60,
xlab = "resale_price (kSGD)" ) +
ggtitle("What is the overall Resale price distribution?")
gghistostats(
data = Resale,
x = 'resale_price_kSGD',
type = "bayes",
test.value = 60,
xlab = "resale_price (kSGD)" ) +
ggtitle("What is the overall Resale price distribution?")
Resale %>%
group_by(town) %>%
# Calculate housing age
mutate(housing_age = 2023 - lease_commence_date) %>%
summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%
ggplot(mapping = aes(x=average_housing_age, y=average_price)) +
geom_count(aes(color = average_area), alpha = 0.6) +
# Change size of count points
scale_size_area(max_size = 10) +
# Add lables next to count points
geom_text_repel(aes(label = town),size = 2.7) +
scale_y_continuous( limits = c(400, 800)) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_viridis_c(option = "C")
ggplot(data = Resale, mapping = aes(y=town, fill=flat_type)) +
theme_minimal() +
geom_bar(position = "fill") +
scale_fill_viridis_d(option = "C") +
labs(title = "Flat type proportion by town", fill = "Flat type",
x = "Count", y = "")
ggscatterstats(
data = Resale,
x = floor_area_sqm,
y = resale_price_kSGD,
marginal = FALSE
)
Resale %>%
group_by(flat_type) %>%
# Extract quarter and price per sqm
mutate(price_per_sqm = resale_price_kSGD/floor_area_sqm) %>%
ggplot(mapping = aes(x = town, y = price_per_sqm)) +
# Make grouped boxplot
geom_boxplot(aes(fill = as.factor(flat_type)), color = "grey") +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_viridis_d(option = "C") +
# Adjust lables and add title
labs(title = "HDB resale prices in 2022 by town", y="Price per square metre (SGD)", fill = "flat_type")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
Resale %>%
mutate(class = fct_reorder(town, resale_price_kSGD, .fun='mean')) %>%
ggplot( aes(x=reorder(town, resale_price_kSGD), y=resale_price_kSGD)) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point", color="red") +
theme(legend.position="none") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("Boxplot of resale price by town")
Resale %>%
group_by(flat_type) %>%
# Extract quarter and price per sqm
mutate(price_per_sqm = resale_price_kSGD/floor_area_sqm) %>%
ggplot(mapping = aes(x = town, y = price_per_sqm)) +
# Make grouped boxplot
geom_boxplot(aes(fill = as.factor(flat_type)), color = "grey") +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_viridis_d(option = "C") +
# Adjust lables and add title
labs(title = "HDB resale prices in 2022 by town", y="Price per square metre (SGD)", fill = "flat_type")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p <- ggscatterstats(
data = Resale,
x = floor_area_sqm,
y = resale_price_kSGD,
marginal = FALSE,
point.args = list(size = 0.5, alpha = 0.1, stroke = 0, color = "red"),
smooth.line.args = list(linewidth = 0.5, color = "blue", method = "lm", formula = y ~
x)
)
p1 <- p +  facet_wrap (~ town, nrow = 6, ncol = 6) +
xlab("floor area") +
scale_y_continuous(breaks = c(0,3000,6000,9000,12000), name = "Resale price(kSGD)")
ggplotly(p1)
Resale %>%
group_by(flat_type) %>%
# Extract quarter and price per sqm
mutate(price_per_sqm = resale_price_kSGD/floor_area_sqm) %>%
ggplot(mapping = aes(x = flat_type, y = price_per_sqm)) +
# Make grouped boxplot
geom_boxplot(aes(fill = as.factor(quarter)), color = "black") +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_viridis_d(option = "C") +
# Adjust lables and add title
labs(title = "HDB resale prices in 2022 by flat type", y="Price per square metre (SGD)", fill = "Quarter")
library(shiny); runApp('C:/Users/TASAPORN/OneDrive - Singapore Management University/ASAR Workshops Term 1 2022-2023/Shiny/R-codes/06. BMI.R')
runApp('C:/Users/TASAPORN/OneDrive - Singapore Management University/ASAR Workshops Term 1 2022-2023/Shiny/R-codes/05. UI input exercise.R')
runApp('MyApp')
