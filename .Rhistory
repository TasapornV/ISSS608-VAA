yend = 70000000,
colour = "red") +
annotate("text",
label = "Covid outbreak",
x = as.Date("2020-12-01"),
y=25000000,
color = "red") +
annotate("text",
x = as.Date("2018-01-01"),
y = 60000000, size = 4,
label = "Export > Import",
hjust = 0,
color = hues[1])
p1 <- p+
geom_braid(aes(`MonthYear`,
ymin = `ImportValue`,
ymax = `ExportValue`,
fill = `ImportValue`>`ExportValue`),
show.legend = FALSE,
data = singapore,
alpha = 0.6,
method = 'line')
p1
ggplotly(p)
#| layout-nrow: 2
p <- ggplot() +
geom_line(aes(`MonthYear`, `Value`, linetype = `Type`),
data = singaporeribbon,
show.legend = FALSE)  +
labs(title = "Singapore Bi-lateral Trade Trend",
subtitle = "2016-2022",
x = 'Month Year',
y = 'Trade Value'
) +
annotate("segment",
x = as.Date("2020-01-01"),
xend = as.Date("2020-01-01"),
y = 0,
yend = 70000000,
colour = "red") +
annotate("text",
label = "Covid outbreak",
x = as.Date("2020-12-01"),
y=25000000,
color = "red") +
annotate("text",
x = as.Date("2018-06-01"),
y = 60000000, size = 4,
label = "Export > Import",
hjust = 0,
color = hues[1])
p1 <- p+
geom_braid(aes(`MonthYear`,
ymin = `ImportValue`,
ymax = `ExportValue`,
fill = `ImportValue`>`ExportValue`),
show.legend = FALSE,
data = singapore,
alpha = 0.6,
method = 'line')
p1
ggplotly(p)
#| layout-nrow: 2
p <- ggplot() +
geom_line(aes(`MonthYear`, `Value`, linetype = `Type`),
data = singaporeribbon,
show.legend = FALSE)  +
labs(title = "Singapore Bi-lateral Trade Trend",
subtitle = "2016-2022",
x = 'Month Year',
y = 'Trade Value'
) +
annotate("segment",
x = as.Date("2020-01-01"),
xend = as.Date("2020-01-01"),
y = 0,
yend = 70000000,
colour = "red") +
annotate("text",
label = "Covid outbreak",
x = as.Date("2020-12-01"),
y=25000000,
color = "red") +
annotate("text",
x = as.Date("2018-06-01"),
y = 60000000, size = 4,
label = "Export > Import",
hjust = 0,
color = hues[1])
p1 <- p+
geom_braid(aes(`MonthYear`,
ymin = `ImportValue`,
ymax = `ExportValue`,
fill = `ImportValue`>`ExportValue`),
show.legend = FALSE,
data = singapore,
alpha = 0.6,
method = 'line')
p1
ggplotly(p)
#| code-fold: true
# Import data
geofacet <- data_2022
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly')
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
#| code-fold: true
# Read data
data_raw <- read_csv("data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv")
# show data summary
summary(data_raw)
#| code-fold: true
#| column: page
knitr::kable(
head(data_raw,5)
)
# Create field "quarter", "month", and "year
data <- data_raw %>%
mutate(quarter = quarter(ym(month))) %>%
mutate(Month = month(ym(month))) %>%
mutate(Year = year(ym(month))) %>%
mutate(month = as.Date(paste(month, "-01", sep=""), format="%Y -%m -%d")) %>%
rename("YM" = "month")
# Change format of price to represent in kSGD
data <- data %>%
mutate("resale_price_kSGD" = resale_price/1000)
# Filter flat types 3-Room, 4-Room, 5-Room and filter only Year of 2022
data_2022 <- data %>%
filter(flat_type %in% c("3 ROOM","4 ROOM", "5 ROOM")) %>%
filter(Year == "2022")
summary(data_2022)
#| column: page
knitr::kable(
head(data_2022 ,5)
)
#| code-fold: true
#| column: page
knitr:: kable(
data_2022 %>%
select(floor_area_sqm, remaining_lease, resale_price) %>%
na.omit() %>%
describe()
)
#| code-fold: true
library(ggstatsplot)
library(ggplot2)
library(ggridges)
dist <- data_2022 %>%
group_by(flat_type) %>%
mutate(price_per_sqm = resale_price/floor_area_sqm)
ggplot(dist, aes(x=price_per_sqm, y=flat_type)) +
geom_density_ridges(fill = "steelblue", alpha = 0.5)+
labs(title = "Distribution of Price per sqm",
x = "Price per sqm",
y = "Flat Type")+
theme_minimal()
shapiro.test(sample(dist$price_per_sqm,5000))
ggbetweenstats(dist,
x = "flat_type",
y = "price_per_sqm",
type = 'np'
) +
ggtitle("Comparison of resale price per sqm among different types of flats")
#| fig-height: 10
#| column: screen
#| fig-width: 12
#| code-fold: true
g <- ggscatterstats(
data = data_2022,
x = floor_area_sqm,
y = resale_price,
marginal = FALSE,
point.args = list(size = 0.5, stroke = 0, color = "steelblue"),
smooth.line.args = list(linewidth = 0.5, color = "grey", method = "lm", formula = y ~ x)) +  facet_wrap (~ town, nrow = 6, ncol = 6) +
xlab("floor area") +
scale_y_continuous(breaks = c(0,3000,6000,9000,12000), name = "Resale price") +
labs(title = "Correlation between resale price and floor area")
ggplotly(g)
#| layout-nrow: 1
library(ggpubr)
ggqqplot(data_2022$floor_area_sqm)
ggqqplot(data_2022$resale_price_kSGD)
#| layout-nrow: 1
shapiro.test(sample(data_2022$floor_area_sqm,5000))
shapiro.test(sample(data_2022$resale_price_kSGD,5000))
#| column: screen-inset-shaded
#| layout-nrow: 1
#| code-fold: true
ggscatterstats(data = data_2022 |> filter(town == "CENTRAL AREA"),
x = floor_area_sqm, y = resale_price_kSGD,
type = "robust") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "CENTRAL AREA",
x = "floor area (sqm)", y = "resale price(kSGD)") +
scale_x_continuous(limits = c(50, 150)) +
scale_y_continuous(limits = c(0, 1500))
ggscatterstats(data = data_2022 |> filter(town == "CHOA CHU KANG"),
x = floor_area_sqm, y = resale_price_kSGD,
type = "robust") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "CHOA CHU KANG",
x = "floor area (sqm)", y = "resale price(kSGD)")+
scale_x_continuous(limits = c(50, 150)) +
scale_y_continuous(limits = c(0, 1500))
#| code-fold: true
data_2022 %>%
group_by(flat_type) %>%
ggplot(mapping = aes(x = flat_type, y = resale_price_kSGD)) +
# Make grouped boxplot
geom_boxplot(aes(fill = as.factor(quarter)), color = "grey") +
stat_summary(fun=mean, geom="point", color="red") +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_viridis_d(option = "C") +
# Adjust lables and add title
labs(title = "Resale prices in 2022 by quarter", y="Resale price (kSGD)", x="", fill = "Quarter")
#| column: screen-inset-shaded
#| layout-nrow: 1
#| code-fold: true
# 3 ROOM
three <- data_2022 %>%
filter(quarter %in% c("1", "4")) %>%
filter(flat_type == "3 ROOM")
ggbetweenstats(three,
x = "quarter",
y = "resale_price_kSGD",
type = 'np'
) +
ggtitle("3 ROOM")
# 4 ROOM
four <- data_2022 %>%
filter(quarter %in% c("1", "4")) %>%
filter(flat_type == "4 ROOM")
ggbetweenstats(four,
x = "quarter",
y = "resale_price_kSGD",
type = 'np'
) +
ggtitle("4 ROOM")
# 5 ROOM
five <- data_2022 %>%
filter(quarter %in% c("1", "4")) %>%
filter(flat_type == "5 ROOM")
ggbetweenstats(five,
x = "quarter",
y = "resale_price_kSGD",
type = 'np'
) +
ggtitle("5 ROOM")
#| column: screen-inset-shaded
#| layout-nrow: 1
# Proportional stacked bar chart
ggplot(data_2022, aes(y=town, fill=flat_type)) +
geom_bar(position = "fill") +
scale_fill_viridis_d(option = "E") +
labs(title = "Flat type transaction proportion", fill = "Flat type",
x = "", y = "")
# Stacked bar chart
ggplot(data_2022, aes(y=town, fill = flat_type))+
geom_bar()+
scale_fill_viridis_d(option = "E") +
labs(title = "Flat type transaction", fill = "Flat type",
x = "", y = "")
#| column: screen
#| fig-width: 17
#| fig-height: 8
ggbarstats(
data             = data_2022,
x                = flat_type,
y                = town,
title            = "Flat type transaction proportion",
xlab             = "",
ggplot.component = list(ggplot2::scale_x_discrete(guide = ggplot2::guide_axis(n.dodge = 2))),
palette          = "Set3",
coord.flip   = TRUE
)  + theme(axis.text.x = element_text(size = 10, angle = 90))
#| code-fold: true
# Import data
geofacet <- data_2022
# Recode town name to match with area grid
geofacet <- geofacet %>%
mutate(town = fct_collapse(town, "KALLANG" = "KALLANG/WHAMPOA"))
# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
# Recode name to match with geofacet data
area_grid$name <- toupper(area_grid$name)
area_grid <- area_grid %>%
mutate(name = fct_collapse(name, "CENTRAL AREA" = "DOWNTOWN CORE"))
geofacet <- geofacet %>%
group_by(YM, town, flat_type) %>%
summarise(avgprice = mean(resale_price, na.rm = TRUE),
medprice = median(resale_price, na.rm = TRUE))%>%
ungroup()
# merge table with town name
geofacet_price <- inner_join(geofacet, area_grid,
by = c("town" = "name"))
common_grid <- area_grid[area_grid$name %in% unique(geofacet$town),]
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly')
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
#| code-fold: true
# Read data
data_raw <- read_csv("data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv")
# show data summary
summary(data_raw)
#| code-fold: true
#| column: page
knitr::kable(
head(data_raw,5)
)
# Create field "quarter", "month", and "year
data <- data_raw %>%
mutate(quarter = quarter(ym(month))) %>%
mutate(Month = month(ym(month))) %>%
mutate(Year = year(ym(month))) %>%
mutate(month = as.Date(paste(month, "-01", sep=""), format="%Y -%m -%d")) %>%
rename("YM" = "month")
# Change format of price to represent in kSGD
data <- data %>%
mutate("resale_price_kSGD" = resale_price/1000)
# Filter flat types 3-Room, 4-Room, 5-Room and filter only Year of 2022
data_2022 <- data %>%
filter(flat_type %in% c("3 ROOM","4 ROOM", "5 ROOM")) %>%
filter(Year == "2022")
summary(data_2022)
#| column: page
knitr::kable(
head(data_2022 ,5)
)
#| code-fold: true
#| column: page
knitr:: kable(
data_2022 %>%
select(floor_area_sqm, remaining_lease, resale_price) %>%
na.omit() %>%
describe()
)
#| code-fold: true
library(ggstatsplot)
library(ggplot2)
library(ggridges)
dist <- data_2022 %>%
group_by(flat_type) %>%
mutate(price_per_sqm = resale_price/floor_area_sqm)
ggplot(dist, aes(x=price_per_sqm, y=flat_type)) +
geom_density_ridges(fill = "steelblue", alpha = 0.5)+
labs(title = "Distribution of Price per sqm",
x = "Price per sqm",
y = "Flat Type")+
theme_minimal()
shapiro.test(sample(dist$price_per_sqm,5000))
ggbetweenstats(dist,
x = "flat_type",
y = "price_per_sqm",
type = 'np'
) +
ggtitle("Comparison of resale price per sqm among different types of flats")
#| fig-height: 10
#| column: screen
#| fig-width: 12
#| code-fold: true
g <- ggscatterstats(
data = data_2022,
x = floor_area_sqm,
y = resale_price,
marginal = FALSE,
point.args = list(size = 0.5, stroke = 0, color = "steelblue"),
smooth.line.args = list(linewidth = 0.5, color = "grey", method = "lm", formula = y ~ x)) +  facet_wrap (~ town, nrow = 6, ncol = 6) +
xlab("floor area") +
scale_y_continuous(breaks = c(0,3000,6000,9000,12000), name = "Resale price") +
labs(title = "Correlation between resale price and floor area")
ggplotly(g)
#| layout-nrow: 1
library(ggpubr)
ggqqplot(data_2022$floor_area_sqm)
ggqqplot(data_2022$resale_price_kSGD)
#| layout-nrow: 1
shapiro.test(sample(data_2022$floor_area_sqm,5000))
shapiro.test(sample(data_2022$resale_price_kSGD,5000))
#| column: screen-inset-shaded
#| layout-nrow: 1
#| code-fold: true
ggscatterstats(data = data_2022 |> filter(town == "CENTRAL AREA"),
x = floor_area_sqm, y = resale_price_kSGD,
type = "robust") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "CENTRAL AREA",
x = "floor area (sqm)", y = "resale price(kSGD)") +
scale_x_continuous(limits = c(50, 150)) +
scale_y_continuous(limits = c(0, 1500))
ggscatterstats(data = data_2022 |> filter(town == "CHOA CHU KANG"),
x = floor_area_sqm, y = resale_price_kSGD,
type = "robust") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "CHOA CHU KANG",
x = "floor area (sqm)", y = "resale price(kSGD)")+
scale_x_continuous(limits = c(50, 150)) +
scale_y_continuous(limits = c(0, 1500))
#| code-fold: true
data_2022 %>%
group_by(flat_type) %>%
ggplot(mapping = aes(x = flat_type, y = resale_price_kSGD)) +
# Make grouped boxplot
geom_boxplot(aes(fill = as.factor(quarter)), color = "grey") +
stat_summary(fun=mean, geom="point", color="red") +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_viridis_d(option = "C") +
# Adjust lables and add title
labs(title = "Resale prices in 2022 by quarter", y="Resale price (kSGD)", x="", fill = "Quarter")
#| column: screen-inset-shaded
#| layout-nrow: 1
#| code-fold: true
# 3 ROOM
three <- data_2022 %>%
filter(quarter %in% c("1", "4")) %>%
filter(flat_type == "3 ROOM")
ggbetweenstats(three,
x = "quarter",
y = "resale_price_kSGD",
type = 'np'
) +
ggtitle("3 ROOM")
# 4 ROOM
four <- data_2022 %>%
filter(quarter %in% c("1", "4")) %>%
filter(flat_type == "4 ROOM")
ggbetweenstats(four,
x = "quarter",
y = "resale_price_kSGD",
type = 'np'
) +
ggtitle("4 ROOM")
# 5 ROOM
five <- data_2022 %>%
filter(quarter %in% c("1", "4")) %>%
filter(flat_type == "5 ROOM")
ggbetweenstats(five,
x = "quarter",
y = "resale_price_kSGD",
type = 'np'
) +
ggtitle("5 ROOM")
#| column: screen-inset-shaded
#| layout-nrow: 1
# Proportional stacked bar chart
ggplot(data_2022, aes(y=town, fill=flat_type)) +
geom_bar(position = "fill") +
scale_fill_viridis_d(option = "E") +
labs(title = "Flat type transaction proportion", fill = "Flat type",
x = "", y = "")
# Stacked bar chart
ggplot(data_2022, aes(y=town, fill = flat_type))+
geom_bar()+
scale_fill_viridis_d(option = "E") +
labs(title = "Flat type transaction", fill = "Flat type",
x = "", y = "")
#| column: screen
#| fig-width: 17
#| fig-height: 8
ggbarstats(
data             = data_2022,
x                = flat_type,
y                = town,
title            = "Flat type transaction proportion",
xlab             = "",
ggplot.component = list(ggplot2::scale_x_discrete(guide = ggplot2::guide_axis(n.dodge = 2))),
palette          = "Set3",
coord.flip   = TRUE
)  + theme(axis.text.x = element_text(size = 10, angle = 90))
#| code-fold: true
# Import data
geofacet <- data_2022
# Recode town name to match with area grid
geofacet <- geofacet %>%
mutate(town = fct_collapse(town, "KALLANG" = "KALLANG/WHAMPOA"))
# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
# Recode name to match with geofacet data
area_grid$name <- toupper(area_grid$name)
area_grid <- area_grid %>%
mutate(name = fct_collapse(name, "CENTRAL AREA" = "DOWNTOWN CORE"))
geofacet <- geofacet %>%
group_by(year, town, flat_type) %>%
summarise(avgprice = mean(resale_price, na.rm = TRUE),
medprice = median(resale_price, na.rm = TRUE))%>%
ungroup()
#| code-fold: true
# Import data
geofacet <- data_2022
# Recode town name to match with area grid
geofacet <- geofacet %>%
mutate(town = fct_collapse(town, "KALLANG" = "KALLANG/WHAMPOA"))
# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
# Recode name to match with geofacet data
area_grid$name <- toupper(area_grid$name)
area_grid <- area_grid %>%
mutate(name = fct_collapse(name, "CENTRAL AREA" = "DOWNTOWN CORE"))
geofacet <- geofacet %>%
group_by(year, town, flat_type) %>%
summarise(avgprice = mean(resale_price, na.rm = TRUE),
medprice = median(resale_price, na.rm = TRUE))%>%
ungroup()
