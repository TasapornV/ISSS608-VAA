---
title: "In-class Exercise 5"
author: "Tasaporn Visawameteekul"
date: 11 February 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
toc: true
editor: visual
---


Getting Started

# Install and launching R packages

Two packages will be installed and loaded. They are: tidyverse, ggiraph


```{r}
pacman::p_load(corrplot, tidyverse, ggstatsplot, GGally)
```


Read data


```{r, warning=FALSE, message = FALSE}
wine <- read_csv("data/wine_quality.csv")
glimpse(wine)
```

```{r}
pairs(wine[,1:11])
```

```{r}
pairs(wine[,2:12])
```


Drawing the lower corner


```{r}
pairs(wine[,2:12], upper.panel = NULL)
```


display on upper


```{r}
pairs(wine[,2:12], lower.panel = NULL)
```


## [ggcorrmat](https://www.rdocumentation.org/packages/ggstatsplot/versions/0.2.0/topics/ggcorrmat)

Visualization of a correlation matrix. The message below x = ... explain the significant level.
We also have an option to resize the cross according to the significant level.


```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11)
```

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05"
)
```


Include correlation coefficient

## Correlation plot

Corrplot is not a ggplot extension but based on Rgraphic

ggcorrplot will require the object .corr which can be generated with the command cor.


```{r}
wine.cor <- cor(wine[, 1:11])
corrplot(wine.cor)
```


Correlogram

The slimmer one represents highly correlate relationship.


```{r}
corrplot(wine.cor, 
         method = "ellipse") 
```

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower")
```


corrplot.mixed allows us to combine the corrplot and the corrmat.


```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "blue")
```


From the plot below, we can see the highly correlate group.


```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```


### Generalised Pairs plot


```{r, warning = FALSE, message=FALSE}
ggpairs(wine, columns = 1:12)
```


### Ternary diagram with R

package use


```{r}
pacman::p_load(ggtern, plotly, tidyverse, tidyr)
```


read data


```{r, warning=FALSE, message=FALSE}
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```


prepare data


```{r}
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```


see how the data look like


```{r}
agpop_mutated
```


using same feature with ggplot2. ggtern add in the z.


```{r}
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()
```

