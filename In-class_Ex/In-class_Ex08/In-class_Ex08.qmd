---
title: "In-class Exercise 10"
author: "Tasaporn Visawameteekul"
date: 25 March 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
toc: true
editor: visual
---

# Lesson8: Network Data

## Recap

-   Prof recap the geospatial application on Rshiny with the Choropleth map where the user can change the variable and color.
-   Share good practice of drafting the application on Quarto first before putting it on the Shiny app.
-   The interactive application -\> we can group it with the data table that we are using for each output.

## Lesson

-   Centrality analysis

-   Node-Edge : The most important one is the node. You must start with having nodes then there are ways to create the link either physical or not.

-   Types of network : Directed and Undirected graph

    ![](images/image-1250263543.png){width="356"}

-   An ego-centric : example secretary is the key to CEO

-   Bipartite graph

-   Tidygraph is the latest package for graph that based on the tidyverse structure. The tidygraph store within tibbler dataframe.

## Hands-on

```{r warning=FALSE}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts)
```

```{r message=FALSE}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

```{r, message=FALSE}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

```{r}
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
```

```{r}
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

```{r}
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

```{r message=FALSE}
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()
```

```{r message=FALSE}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

```{r warning=FALSE}
g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

Restructure the data here is very important. For network plot, the data structure is critical.

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

```{r}
visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)
```
