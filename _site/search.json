[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Hi there!\nThanks for stopping by my little corner of the internet! My name is Tasaporn Visawameteekul, and I’m excited to know that you have seen my work. I’m just an engineer who fall in love with an art of data visualization. Even though I’m just a beginner, but I hope my blog here would be any help to you.\nEducation\nMS in Master of IT in Business, Analytics track (2023) | Singapore Management University, Singapore\nBS in Electrical engineering (2012) | Chulalongkorn University, Thailand\nExperience"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Getting Started\n\nInstall and launching R packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\nImporting the data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nPlotting a simple bar chart\n\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Install and launching\n\npacman::p_load(ggiraph, tidyverse)\n\n\n\nImporting the data\n\nexam_data <- read.csv(\"data/Exam_data.csv\")\nhead(exam_data,10)\n\n           ID CLASS GENDER    RACE ENGLISH MATHS SCIENCE\n1  Student321    3I   Male   Malay      21     9      15\n2  Student305    3I Female   Malay      24    22      16\n3  Student289    3H   Male Chinese      26    16      16\n4  Student227    3F   Male Chinese      27    77      31\n5  Student318    3I   Male   Malay      27    11      25\n6  Student306    3I Female   Malay      31    16      16\n7  Student313    3I   Male Chinese      31    21      25\n8  Student316    3I   Male   Malay      31    18      27\n9  Student312    3I   Male   Malay      33    19      15\n10 Student297    3H   Male  Indian      34    49      37\n\n\nPlotting a simple bar chart\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5, \n               dotsize = 0.5) +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              #<<\n    aes(tooltip = ID),                   #<<\n    stackgroups = TRUE,                  #<<\n    binwidth = 1,                        #<<\n    method = \"histodot\") +               #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  #<<\n  ggobj = p,                             #<<\n  width_svg = 6,                         #<<\n  height_svg = 6*0.618                   #<<   \n)                                        #<<\n\n\n\n\n\n\nDisplaying multiple information on tooltip\n\n# string to put in the tooltips\nexam_data$tooltip <- c(paste0(     #<<\n  \"Name = \", exam_data$ID,         #<<\n  \"\\n Class = \", exam_data$CLASS)) #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #<<\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nWarning: Use of `exam_data$tooltip` is discouraged.\nℹ Use `tooltip` instead.\n\n\n\n\n\n\n\n\nCustomising Tooltip style\n\n# If you want to change background color\ntooltip_css <- \"background-color:green; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n\n\n\n\n\n\n\nDisplaying statistics on tooltip\n\ntooltip <- function(y, ymax, accuracy = .01) {   #<<\n  mean <- scales::number(y, accuracy = accuracy) #<<\n  sem <- scales::number(ymax - y, accuracy = accuracy) #<<\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem) #<<\n} #<<\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  #<<\n                     tooltip(y, ymax))),  #<<\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  #<<\n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "pacman::p_load(ggstatsplot, tidyverse)\nlibrary(ggstatsplot)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Exercise 4",
    "section": "One-sample test: gghistostats() method",
    "text": "One-sample test: gghistostats() method\neasystats: https://easystats.github.io/easystats/\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4",
    "section": "Two-sample mean test: ggbetweenstats()",
    "text": "Two-sample mean test: ggbetweenstats()\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on Exercise 4",
    "section": "Oneway ANOVA Test: ggbetweenstats() method",
    "text": "Oneway ANOVA Test: ggbetweenstats() method\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4",
    "section": "Significant Test of Correlation: ggscatterstats()",
    "text": "Significant Test of Correlation: ggscatterstats()\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on Exercise 4",
    "section": "Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "Significant Test of Association (Depedence) : ggbarstats() methods\n\nexam1 <- exam %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-excel-file-readxl-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-excel-file-readxl-methods",
    "title": "Hands-on Exercise 4",
    "section": "Importing Excel file: readxl methods",
    "text": "Importing Excel file: readxl methods\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#multiple-regression-model-using-lm",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#multiple-regression-model-using-lm",
    "title": "Hands-on Exercise 4",
    "section": "Multiple Regression Model using lm()",
    "text": "Multiple Regression Model using lm()\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-checking-for-multicolinearity",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-checking-for-multicolinearity",
    "title": "Hands-on Exercise 4",
    "section": "Model Diagnostic: checking for multicolinearity:",
    "text": "Model Diagnostic: checking for multicolinearity:\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\n\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\nModel Diagnostic: checking normality assumption\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n <- check_normality(model1)\n\n\nplot(check_n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "Hands-on Exercise 4",
    "section": "Model Diagnostic: Check model for homogeneity of variances",
    "text": "Model Diagnostic: Check model for homogeneity of variances\n\ncheck_h <- check_heteroscedasticity(model1)\n\n\nplot(check_h)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-complete-check",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-complete-check",
    "title": "Hands-on Exercise 4",
    "section": "Model Diagnostic: Complete check",
    "text": "Model Diagnostic: Complete check\n\ncheck_model(model1)\n\nVariable `Component` is not in your data frame :/"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regression-parameters-see-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regression-parameters-see-methods",
    "title": "Hands-on Exercise 4",
    "section": "Visualising Regression Parameters: see methods",
    "text": "Visualising Regression Parameters: see methods\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regression-parameters-ggcoefstats-methods",
    "title": "Hands-on Exercise 4",
    "section": "Visualising Regression Parameters: ggcoefstats() methods",
    "text": "Visualising Regression Parameters: ggcoefstats() methods\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4",
    "section": "Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "Visualizing the uncertainty of point estimates: ggplot2 methods\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggplot2 methods\nPlot the 95% confidence interval of mean maths score by race. The error bars should be sorted by the average maths scores.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=sort(RACE),\n        ymin=mean-se,\n        ymax=mean+se),\n    width=0.2,\n    colour=\"black\",\n    alpha=0.95,\n    size=0.5) +\n  geom_point(aes\n           (x=RACE,\n            y=mean),\n           stat=\"identity\",\n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#getting-started",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Getting Started",
    "text": "Getting Started\n::: callout-info ## Do It Yourself Write a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\nShow the code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmetically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\nThe Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\nImporting the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks <- read_csv(\"data/eventlog.csv\")\n\n\n\nExamining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\n\ntz field stores time zone of the source IP address.\n\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\nData Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nNote: ymd_hms() and hour() are from lubridate package and weekdays() is a base R function.\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nNote: Beside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\nBuilding the Calendar Heatmaps\n\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn from the code chunk: - a tibble data table called grouped is derived by aggregating the attack by wkday and hour fields. - a new field called n is derived by using group_by() and count() functions. - na.omit() is used to exclude missing value. - geom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles. - theme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot. - coord_equal() is used to ensure the plot will have an aspect ratio of 1:1. - scale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\nBuilding Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Cycle Plot",
    "text": "Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nData Preparation\n\nStep 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nStep 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n\nStep 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n\n\nStep 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nPlotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/Hands-on_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Getting Started\n\nInstall and launching R packages\nTwo packages will be installed and loaded. They are: tidyverse, ggiraph\n\npacman::p_load(ggiraph, tidyverse)\n\nImporting data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\nexam_data\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# … with 312 more rows"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "Getting Started"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#one-sample-test-gghistostats-method",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#one-sample-test-gghistostats-method",
    "title": "In-class Exercise 4",
    "section": "One-sample test: gghistostats() method",
    "text": "One-sample test: gghistostats() method\neasystats: https://easystats.github.io/easystats/\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "title": "In-class Exercise 4",
    "section": "Two-sample mean test: ggbetweenstats()",
    "text": "Two-sample mean test: ggbetweenstats()\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#oneway-anova-test-ggbetweenstats-method",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#oneway-anova-test-ggbetweenstats-method",
    "title": "In-class Exercise 4",
    "section": "Oneway ANOVA Test: ggbetweenstats() method",
    "text": "Oneway ANOVA Test: ggbetweenstats() method\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#significant-test-of-correlation-ggscatterstats",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#significant-test-of-correlation-ggscatterstats",
    "title": "In-class Exercise 4",
    "section": "Significant Test of Correlation: ggscatterstats()",
    "text": "Significant Test of Correlation: ggscatterstats()\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "In-class Exercise 4",
    "section": "Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "Significant Test of Association (Depedence) : ggbarstats() methods\n\nexam1 <- exam %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#importing-excel-file-readxl-methods",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#importing-excel-file-readxl-methods",
    "title": "In-class Exercise 4",
    "section": "Importing Excel file: readxl methods",
    "text": "Importing Excel file: readxl methods\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#multiple-regression-model-using-lm",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#multiple-regression-model-using-lm",
    "title": "In-class Exercise 4",
    "section": "Multiple Regression Model using lm()",
    "text": "Multiple Regression Model using lm()\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#model-diagnostic-checking-for-multicolinearity",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#model-diagnostic-checking-for-multicolinearity",
    "title": "In-class Exercise 4",
    "section": "Model Diagnostic: checking for multicolinearity:",
    "text": "Model Diagnostic: checking for multicolinearity:\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\n\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\nModel Diagnostic: checking normality assumption\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n <- check_normality(model1)\n\n\nplot(check_n)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "In-class Exercise 4",
    "section": "Model Diagnostic: Check model for homogeneity of variances",
    "text": "Model Diagnostic: Check model for homogeneity of variances\n\ncheck_h <- check_heteroscedasticity(model1)\n\n\nplot(check_h)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#model-diagnostic-complete-check",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#model-diagnostic-complete-check",
    "title": "In-class Exercise 4",
    "section": "Model Diagnostic: Complete check",
    "text": "Model Diagnostic: Complete check\n\ncheck_model(model1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#visualising-regression-parameters-see-methods",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#visualising-regression-parameters-see-methods",
    "title": "In-class Exercise 4",
    "section": "Visualising Regression Parameters: see methods",
    "text": "Visualising Regression Parameters: see methods\n\nplot(parameters(model1))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#visualising-regression-parameters-ggcoefstats-methods",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#visualising-regression-parameters-ggcoefstats-methods",
    "title": "In-class Exercise 4",
    "section": "Visualising Regression Parameters: ggcoefstats() methods",
    "text": "Visualising Regression Parameters: ggcoefstats() methods\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "In-class Exercise 4",
    "section": "Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "Visualizing the uncertainty of point estimates: ggplot2 methods\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggplot2 methods\nPlot the 95% confidence interval of mean maths score by race. The error bars should be sorted by the average maths scores.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=sort(RACE),\n        ymin=mean-se,\n        ymax=mean+se),\n    width=0.2,\n    colour=\"black\",\n    alpha=0.95,\n    size=0.5) +\n  geom_point(aes\n           (x=RACE,\n            y=mean),\n           stat=\"identity\",\n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "Getting Started\nInstall and launching R packages\nRead data\nDrawing the lower corner\ndisplay on upper"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#correlation-plot",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#correlation-plot",
    "title": "In-class Exercise 5",
    "section": "Correlation plot",
    "text": "Correlation plot\nCorrplot is not a ggplot extension but based on Rgraphic\nggcorrplot will require the object .corr which can be generated with the command cor.\n\nwine.cor <- cor(wine[, 1:11])\ncorrplot(wine.cor)\n\n\n\n\nCorrelogram\nThe slimmer one represents highly correlate relationship.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\ncorrplot.mixed allows us to combine the corrplot and the corrmat.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"blue\")\n\n\n\n\nFrom the plot below, we can see the highly correlate group.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n\n\n\n\n\nGeneralised Pairs plot\n\nggpairs(wine, columns = 1:12)\n\n\n\n\n\n\nTernary diagram with R\npackage use\n\npacman::p_load(ggtern, plotly, tidyverse, tidyr)\n\nread data\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\nprepare data\n\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  spread(AG, Population) %>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)\n\nsee how the data look like\n\nagpop_mutated\n\n# A tibble: 234 × 25\n   PA        SZ    Year  AGE0-…¹ AGE05…² AGE10…³ AGE15…⁴ AGE20…⁵ AGE25…⁶ AGE30…⁷\n   <chr>     <chr> <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Ang Mo K… Ang … 2018      180     270     320     300     260     300     270\n 2 Ang Mo K… Chen… 2018     1060    1080    1080    1260    1400    1880    1940\n 3 Ang Mo K… Chon… 2018      900     900    1030    1220    1380    1760    1830\n 4 Ang Mo K… Kebu… 2018      720     850    1010    1120    1230    1460    1330\n 5 Ang Mo K… Semb… 2018      220     310     380     500     550     500     300\n 6 Ang Mo K… Shan… 2018      550     630     670     780     950    1080     990\n 7 Ang Mo K… Tago… 2018      260     340     430     500     640     690     440\n 8 Ang Mo K… Town… 2018      830     930     930     860    1020    1400    1350\n 9 Ang Mo K… Yio … 2018      160     160     220     260     350     340     230\n10 Ang Mo K… Yio … 2018      810    1070    1300    1450    1500    1590    1390\n# … with 224 more rows, 15 more variables: `AGE35-39` <dbl>, `AGE40-44` <dbl>,\n#   `AGE45-49` <dbl>, `AGE50-54` <dbl>, `AGE55-59` <dbl>, `AGE60-64` <dbl>,\n#   `AGE65-69` <dbl>, `AGE70-74` <dbl>, `AGE75-79` <dbl>, `AGE80-84` <dbl>,\n#   AGE85over <dbl>, YOUNG <dbl>, ACTIVE <dbl>, OLD <dbl>, TOTAL <dbl>, and\n#   abbreviated variable names ¹​`AGE0-4`, ²​`AGE05-9`, ³​`AGE10-14`, ⁴​`AGE15-19`,\n#   ⁵​`AGE20-24`, ⁶​`AGE25-29`, ⁷​`AGE30-34`\n\n\nusing same feature with ggplot2. ggtern add in the z.\n\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#heatmap",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#heatmap",
    "title": "In-class Exercise 5",
    "section": "Heatmap",
    "text": "Heatmap\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\nwh <- read_csv(\"data/WHData-2018.csv\")\nwh\n\n# A tibble: 156 × 12\n   Country        Region Happi…¹ Whisk…² Whisk…³ Dysto…⁴ GDP p…⁵ Socia…⁶ Healt…⁷\n   <chr>          <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Albania        Centr…    4.59    4.70    4.48    1.46   0.916   0.817   0.79 \n 2 Bosnia and He… Centr…    5.13    5.22    5.04    1.88   0.915   1.08    0.758\n 3 Bulgaria       Centr…    4.93    5.02    4.84    1.22   1.05    1.52    0.712\n 4 Croatia        Centr…    5.32    5.40    5.24    1.77   1.12    1.16    0.737\n 5 Czech Republic Centr…    6.71    6.78    6.64    2.49   1.23    1.49    0.854\n 6 Estonia        Centr…    5.74    5.82    5.66    1.46   1.2     1.53    0.737\n 7 Hungary        Centr…    5.62    5.70    5.54    1.97   1.17    1.40    0.732\n 8 Kosovo         Centr…    5.66    5.76    5.57    2.26   0.855   1.23    0.578\n 9 Latvia         Centr…    5.93    6.00    5.86    2.14   1.15    1.45    0.671\n10 Lithuania      Centr…    5.95    6.04    5.87    2.13   1.20    1.53    0.716\n# … with 146 more rows, 3 more variables: `Freedom to make life choices` <dbl>,\n#   Generosity <dbl>, `Perceptions of corruption` <dbl>, and abbreviated\n#   variable names ¹​`Happiness score`, ²​`Whisker-high`, ³​`Whisker-low`,\n#   ⁴​Dystopia, ⁵​`GDP per capita`, ⁶​`Social support`, ⁷​`Healthy life expectancy`\n\n\n\nprepare data\nMove the country column to replace the row name so the heatmap is able to label the x-axis.\n\nrow.names(wh) <- wh$Country\n\nspecify the function used. Taking column 3 and drop country, region, whisker-high, whisker-low, Dystopia.\nNote that wh1 is not dataframe but a data matrix.\n\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)\n\n\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\nwh_heatmap <- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\nheatmaply(mtcars)\n\n\n\n\n\nexcluding\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. This blog is developed by Tasaporn Visawameteekul. It is still a work in progress, where data visualizations will be uploaded weekly.\nThis blog contains my journey of creating data visualization beyond default, using R and Tableau. This is part of the ISSS608 course by SMU MITB program, by Prof Kam Tin Seong from Jan - Apr 2023.\nIf you have any feedback or need any clarification, you may contact me at tasapornv.2021@mitb.smu.edu.sg.\nI hope you enjoy it!\n\n\n\n\n\nIn-class exercise\n\n\n\n \n\n\n\n\nHands-on exercise\n\n\n\n \n\n\n\n\nTake-home exercise"
  },
  {
    "objectID": "indexInclass.html#in-class-exercise-03-28-jan-2023",
    "href": "indexInclass.html#in-class-exercise-03-28-jan-2023",
    "title": "In-class Exercise",
    "section": "In-class Exercise 03 (28 Jan 2023)",
    "text": "In-class Exercise 03 (28 Jan 2023)"
  },
  {
    "objectID": "indexInclass.html#in-class-exercise-04-04-feb-2023",
    "href": "indexInclass.html#in-class-exercise-04-04-feb-2023",
    "title": "In-class Exercise",
    "section": "In-class Exercise 04 (04 Feb 2023)",
    "text": "In-class Exercise 04 (04 Feb 2023)"
  },
  {
    "objectID": "indexInclass.html#in-class-exercise-05-11-feb-2023",
    "href": "indexInclass.html#in-class-exercise-05-11-feb-2023",
    "title": "In-class Exercise",
    "section": "In-class Exercise 05 (11 Feb 2023)",
    "text": "In-class Exercise 05 (11 Feb 2023)"
  },
  {
    "objectID": "indexTakehome.html#take-home-exercise-02-r",
    "href": "indexTakehome.html#take-home-exercise-02-r",
    "title": "Take-home Exercise",
    "section": "Take-home Exercise 02 (R)",
    "text": "Take-home Exercise 02 (R)"
  },
  {
    "objectID": "indexTakehome.html#take-home-exercise-03-r",
    "href": "indexTakehome.html#take-home-exercise-03-r",
    "title": "Take-home Exercise",
    "section": "Take-home Exercise 03 (R)",
    "text": "Take-home Exercise 03 (R)"
  },
  {
    "objectID": "indexTakehome.html#take-home-exercise-04-r",
    "href": "indexTakehome.html#take-home-exercise-04-r",
    "title": "Take-home Exercise",
    "section": "Take-home Exercise 04 (R)",
    "text": "Take-home Exercise 04 (R)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "1. The task\nAge-sex pyramid is an analytical visualization commonly used by demographers to reveal the structure of population by gender and age group. In this take-home exercise, you are required to reveal the demographic structure of Singapore at planning area level by using age-sex pyramid method. Instead of plotting a single age-sex pyramid, however, you are required to display nine selected planning areas on a single view by using trellis display (also know as small-multiple plot).\n\n\n2. Data\n“Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022” is used to prepare the analytical visualization. It is available at Department of Statistics, Singapore(SingStat).\n\nMetadata\nPA = Planning Area\nSZ = Subzone\nAG = Age Group\nSex = Sex\nTOD = Type of Dwelling\nPop = Resident Count\nTime = Time / Period\nNote:\n\nFor June 2022, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority’s Master Plan 2019.\nData from 2003 onwards exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.\nThe figures have been rounded to the nearest 10. 4) The data may not add up due to rounding.\n\nDate generated: 29/02/2022 Source: Singapore Department of Statistics\n\n\n\n3. Analysis\n\nWhat is the distribution of Singapore residence by Planning Area?\n\nThe above bar chart depicts the number of residents in each Planning Area. In this scenario, we choose the 9 most populous areas, which account for 52.3% of the overall population.\nNow, let’s examine the demographic specifics of these nine regions. What is the age and gender distribution of the population in each area? We will utilize the pyramid chart, which is separated into equal-height horizontal divisions. The width of each part varies. Population pyramids are produced using a horizontal column chart with positive and negative values. These graphs permit comparisons of distinct categories (in this case, age) across two series (male and female).\nIn addition, for comparative purposes, we introduce Trellis plot techniques, which consist of a grid of smaller plots. Each small plot represents a unique state or item, and all small plots have identical scales.\n\n\nWhat is the demographic breakdown of Singaporeans in the top 9 most populous Planning Areas?\n\n\n\nDesign 1 : 3x3 Trellis plot\n\n\nAt first glance, the shapes of all 9 selected areas are symmetrical. This reflects the proportional distribution of males and females. However, there are a variety of shapes. Bedok, Jurong West, and Hougang have a similar shape, with a symmetrical small apex that gradually widens and tapers to a smaller base. These 3 regions contain a substantial proportion of residents between the ages of 40-69. While Sengkang and Punggol have a form that widens in the 30-59-year age range, the population in the 20-29-year age group is much smaller.\nThis graph also reveals that the senior female population tends to be slightly more than the senior male population.\n\n\n\nDesign 2 : 1x9 Trellis plot\n\n\n\n\n\n4. Visualization Design Discussion\nFrom the Trellis plot above\n\nBedok, which is the most populous area has a big percentage of Senior generation (60 and above) compare to the other area\n\n\n\n5. Step-by-Step Description\n\n1. Prepare the data\nIn this project, we prepare the data using Tableau Prep Builder version 2022.4.0, which makes data preparation simple and intuitive.\n\n\n\n\n\n\n\nNo.\nStep\n\n\n\n\n1.1\n\n\nOpen Tableau Prep Builder\nClick the blue button “Connect to Data”\nWe are using csv file, therefore pick “Text file”\nConnect our main data file “respopagesextod2022.csv”\nThe data field summary will be displayed as indicated in the image. We can see from this that our original data had 7 fields.\n\n\n\n1.2\n\n\nAdd a clean step by clicking the “+ symbol” and then selecting “Clean Step”\nTo eliminate Planning areas with no population, remove the zero value from the “Pop” parameter\nRename the step as “Filter Pop”\n\n\n\n1.3\n\n\nAdd a clean step “Group age range”\nTo make analysis easier, group the age range into 10 years\n\n\n\n1.4\n\n\nAdd a clean step “Create parameter”\nCreate the fields “Female Population” and “Male Population” using the following formula\n\nIF [Sex]=‘Females’ THEN [Pop] ELSE 0 END\nIF [SEX] = ‘Males’ THEN [Pop] ELSE 0 END\n\nRemove any unneeded fields, including Sex, SZ, TOD, and Time\nAt this point, you should get data with 5 fields 31K rows\n\n\n\n1.5\n\n\nExport the cleansed data to Tableau Desktop with a right-click and the “Preview in Tableau Desktop” option\n\n\n\n\n\n\n2. Prepare the visualization Design 1\nNow that we have import the cleansed data into Tableau Desktop\n\n\n\n\n\n\n\nNo.\nStep\n\n\n\n\n2.1\n\n\nWe begin by creating the “Total columns” parameter. In our scenario, we wish to generate 3x3 tables with a value of 3 for each column.\n\n\n\n2.2\n\n\nCreate the Calculated Field “Index”, “Column”, and “Row” with the following formula\nIndex = INT((INDEX())%[Total columns]^2+1\nColumn = INT(([Index]-1)%[Total columns])+1\nRow = INT(([Index]-[Column])/[Total columns])+1\n\n\n\n2.3\n\n\nDrag the “Column” Calculated Field into the Columns section. Drag the “Row” calculated field into the Rows section\nMake sure that the Column and Row are set as Discrete type\n\n\n\n2.4\n\n\nCreate the Trellis plot of 3x3 age-sex pyramid according to the Planning Area by setting the fields as depicted in the image.\n\n\n\n2.5\n\n\n\n2.6\n\n\n\n2.7\n\n\n\n2.8\n\n\n\n2.9\n\n\n\n2.10\n\n\n\n2.11\n\n\n\n2.12\n\n\n\n2.13\n\n\n\n\n\n\n\n6. Reference\nEgervari. (n.d.). The Data School - Displaying multiple Charts in one Worksheet – The Trellis Chart. The Data School - Displaying Multiple Charts in One Worksheet – the Trellis Chart. Retrieved January 21, 2023, from https://www.thedataschool.co.uk/frederik-egervari/displaying-multiple-charts-in-one-worksheet-the-trellis-chart/\nBetzendahl, L. (2019, April 25). Trellis Charts and Color Highlighting. Viz Zen Data. Retrieved January 21, 2023, from https://vizzendata.com/2019/04/25/trellis-charts-and-color-highlighting/\n(2017, February 17). Workout Wednesday Week 7 - Dynamic Trellis Chart. Visual Vantage. Retrieved January 21, 2023, from http://www.tarannum.io//2017/02/17/workout-wednesday-week7.html\nSleeper. (2017, August 22). How to Make Trellis / Tile / Small Multiple Maps in Tableau | Playfair Data. Playfair Data. Retrieved January 21, 2023, from https://playfairdata.com/how-to-make-trellis-tile-small-multiple-maps-in-tableau/\n(2020, June 22). A Detailed Guide on How to Create a Tableau Pareto Chart | DataCrunchCorp. A Detailed Guide on How to Create a Tableau Pareto Chart | DataCrunchCorp. Retrieved January 21, 2023, from https://datacrunchcorp.com/tableau-pareto-chart/"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "1. The task\nAge-sex pyramid is an analytical visualization commonly used by demographers to reveal the structure of population by gender and age group. In this take-home exercise, you are required to reveal the demographic structure of Singapore at planning area level by using age-sex pyramid method. Instead of plotting a single age-sex pyramid, however, you are required to display nine selected planning areas on a single view by using trellis display (also know as small-multiple plot).\n\n\n2. Data\n“Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022” is used to prepare the analytical visualization. It is available at Department of Statistics, Singapore(SingStat).\n\nMetadata\nPA = Planning Area\nSZ = Subzone\nAG = Age Group\nSex = Sex\nTOD = Type of Dwelling\nPop = Resident Count\nTime = Time / Period\nNote:\n\nFor June 2022, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority’s Master Plan 2019.\nData from 2003 onwards exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.\nThe figures have been rounded to the nearest 10. 4) The data may not add up due to rounding.\n\nDate generated: 29/02/2022 Source: Singapore Department of Statistics\n\n\n\n3. Analysis\n\nWhat is the distribution of Singapore residence by Planning Area?\n\nThe above bar chart depicts the number of residents in each Planning Area. In this scenario, we choose the 9 most populous areas, which account for 52.3% of the overall population.\nNow, let’s examine the demographic specifics of these nine regions. What is the age and gender distribution of the population in each area? We will utilize the pyramid chart, which is separated into equal-height horizontal divisions. The width of each part varies. Population pyramids are produced using a horizontal column chart with positive and negative values. These graphs permit comparisons of distinct categories (in this case, age) across two series (male and female).\nIn addition, for comparative purposes, we introduce Trellis plot techniques, which consist of a grid of smaller plots. Each small plot represents a unique state or item, and all small plots have identical scales.\n\n\nWhat is the demographic breakdown of Singaporeans in the top 9 most populous Planning Areas?\n\n\n\nDesign 1 : 3x3 Trellis plot\n\n\nAt first look, each of the 9 selected areas appears to have a symmetrical shape. This indicates the ratio of males to females in the population. However, a closer examination reveals that the senior female population is typically slightly larger than the senior male population.\nWe may categorize them into 4 groups based on their similarities.\n\nThe first group comprises two areas, namely Bedok and Jurong West. They have a similar shape, with symmetrical small apex that gradually widens and tapers to a smaller base. These 2 regions contain a substantial proportion of residents between the ages of 40-69.\nWhile the next group Sengkang and Punggol have a form that widens in the 30-39 and 40-49 year age-range, the population in the 20-29-year age group is much smaller.\nThe following group includes 4 areas: Tampines, Woodlands, Hougang, and Choa Chu Kang. This group depicts a little head that rapidly enlarges between the ages of 60 - 69, narrows between the ages of 40-49, and then enlarges again before narrowing at the bottom.\nThe final one is Yishun, which has a unique shape compared to the others. In Yishun, the proportions of the people in the age groups 40-49, 50-59, and 60-69 are very similar, while the 30-39 age group is the greatest.\n\n\n\n\n4. Step-by-Step Description\n\n1. Prepare the data\nIn this project, we prepare the data using Tableau Prep Builder version 2022.4.0, which makes data preparation simple and intuitive.\n\n\n\n\n\n\n\nNo.\nStep\n\n\n\n\n1.1\n\n\nOpen Tableau Prep Builder\nClick the blue button “Connect to Data”\nWe are using csv file, therefore pick “Text file”\nConnect our main data file “respopagesextod2022.csv”\nThe data field summary will be displayed as indicated in the image. We can see from this that our original data had 7 fields.\n\n\n\n1.2\n\n\nAdd a clean step by clicking the “+ symbol” and then selecting “Clean Step”\nTo eliminate Planning areas with no population, remove the zero value from the “Pop” parameter\nRename the step as “Filter Pop”\n\n\n\n1.3\n\n\nAdd a clean step “Group age range”\nTo make analysis easier, group the age range into 10 years\n\n\n\n1.4\n\n\nAdd a clean step “Create parameter”\nCreate the fields “Female Population” and “Male Population” using the following formula\n\nIF [Sex]=‘Females’ THEN [Pop] ELSE 0 END\nIF [SEX] = ‘Males’ THEN [Pop] ELSE 0 END\n\nRemove any unneeded fields, including Sex, SZ, TOD, and Time\nAt this point, you should get data with 5 fields 31K rows\n\n\n\n1.5\n\n\nExport the cleansed data to Tableau Desktop with a right-click and the “Preview in Tableau Desktop” option\n\n\n\n\n\n\n2. Prepare the visualization\nNow that we have import the cleansed data into Tableau Desktop\n\n\n\n\n\n\n\nNo.\nStep\n\n\n\n\n2.1\n\n\nWe begin by creating the “Total columns” parameter. In our scenario, we wish to generate 3x3 tables with a value of 3 for each column.\n\n\n\n2.2\n\n\nCreate the Calculated Field “Index”, “Column”, and “Row” with the following formula\nIndex = INT((INDEX())%[Total columns]^2+1\nColumn = INT(([Index]-1)%[Total columns])+1\nRow = INT(([Index]-[Column])/[Total columns])+1\n\n\n\n2.3\n\n\nDrag the “Column” Calculated Field into the Columns section. Drag the Row calculated field into the Rows section\nMake sure that the Column and Row are set as Discrete type\n\n\n\n2.4\n\n\nCreate the Trellis plot of 3x3 age-sex pyramid according to the Planning Area by setting the fields as depicted in the image\nStart by dragging the PA field into Filters and then selecting the focus area (top 9 populous)\nThe drag Index followed by PA into the marks\nDrag the fields Male Pop and Female Pop into the Columns pane, while AG is dragged into the Rows window\n\n\n\n2.5\n\n\nConfigure the Column pill to be computed using PA and repeat for Row\n\n\n\n2.6\n\n\nSet the Male Pop axis to be reversed\n\n\n\n2.7\n\n\nSet the color for Male Pop and Female Pop to be different so the spectator may easily distinguish gender\n\n\n\n2.8\n\n\nSort the age range so that 0-9 is at the bottom and 90 and above is at the top\n\n\n\n2.9\n\n\nHide header of Column and Row\n\n\n\n2.10\n\n\nEdit the SUM([Male Pop]) and SUM([Female Pop]) formulas as follows to display the percentage of each gender in each age group for each Planning Area\nSUM([Male Pop]) = SUM([Male Pop]) / (TOTAL(SUM([Male Pop])) + TOTAL(SUM([Female Pop])))\nSUM([Female Pop]) = SUM([Female Pop]) / (TOTAL(SUM([Male Pop])) + TOTAL(SUM([Female Pop])))\n\n\n\n\n\n\n\n5. Reference\nBetzendahl, L. (2019, April 25). Trellis Charts and Color Highlighting. Viz Zen Data. Retrieved January 21, 2023, from https://vizzendata.com/2019/04/25/trellis-charts-and-color-highlighting/\nDataCrunch(2020, June 22). A Detailed Guide on How to Create a Tableau Pareto Chart | DataCrunchCorp. A Detailed Guide on How to Create a Tableau Pareto Chart | DataCrunchCorp. Retrieved January 21, 2023, from https://datacrunchcorp.com/tableau-pareto-chart/\nEgervari. (n.d.). The Data School - Displaying multiple Charts in one Worksheet – The Trellis Chart. The Data School - Displaying Multiple Charts in One Worksheet – the Trellis Chart. Retrieved January 21, 2023, from https://www.thedataschool.co.uk/frederik-egervari/displaying-multiple-charts-in-one-worksheet-the-trellis-chart/\nSleeper. (2017, August 22). How to Make Trellis / Tile / Small Multiple Maps in Tableau | Playfair Data. Playfair Data. Retrieved January 21, 2023, from https://playfairdata.com/how-to-make-trellis-tile-small-multiple-maps-in-tableau/\nTarannum. (2017, February 17). Workout Wednesday Week 7 - Dynamic Trellis Chart. Visual Vantage. Retrieved January 21, 2023, from http://www.tarannum.io//2017/02/17/workout-wednesday-week7.html"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "1. The task\nIn this take-home exercise, we are required to:\n\nselect one of the Take-home Exercise 1 prepared by our classmate,\ncritic the submission in terms of clarity and aesthetics,\nprepare a sketch for the alternative design by using the data visualisation design principles and best practices we had learned in Lesson 1 and 2, and\nremake the original design by using ggplot2, ggplot2 extensions and tidyverse packages.\n\nThe purpose of DataVis Makeover is to improve on the original visualisation. Focus on what works, what doesn’t work, why those things don’t work, and how you made it better. You should try stick to the fields in the data set provided and improve upon the original visualisation.\n\n\n2. Data\n“Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022” is used to prepare the analytical visualization. It is available at Department of Statistics, Singapore(SingStat).\n\nMetadata\nPA = Planning Area\nSZ = Subzone\nAG = Age Group\nSex = Sex\nTOD = Type of Dwelling\nPop = Resident Count\nTime = Time / Period\nNote:\n\nFor June 2022, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority’s Master Plan 2019.\nData from 2003 onwards exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.\nThe figures have been rounded to the nearest 10. 4) The data may not add up due to rounding.\n\nDate generated: 29/02/2022 Source: Singapore Department of Statistics\n\n\n\n3. Critique on Original Design\nAge-sex pyramid is an analytical visualization commonly used by demographers to reveal the structure of population by gender and age group. In addition, the Trellis plot style is employed to facilitate comparisons between planning areas.\nBelow is the original design of the plot that will be redesigned.\n\n\n\n\n\n\nClarity\nWhen developing a plot, we should have a particular message or insights to communicate to the audience. In our scenario, possible inferences from the trellis age-sex pyramid are as follows:\n\nThe pyramidal structure that represents the distribution of each gender within each age group in each planning area\nThe varied distribution across each region\n\nIn this section, we will evaluate the original plot based on how effectively it conveyed the above inferences to the audience.\n\n(a) Data Selection\nInstead of presenting the entire data set to the viewer, we might pick sample subsets of data that are appropriate for the intended message. By mapping all planning regions, it is extremely difficult for the viewer to compare areas of interest.\n\n\n(b) Graph Title\nInstead of the conventional title, an interesting insight from the graph could be used as as the main title for the chart, as it encourages curiosity among readers to dig deeper into it. The original title lacks both clarity and appeal.\n\n\n(c) Plot arrangement\nThe primary benefit of Trellis plot is that it facilitates comparison. The initial layout placed each plot on the diagonal, making comparison very difficult for the observer. It also restricts the number of plots that may be seen at once.\n\n\n(d) Y-Axis labeling\nThe initial axis represented age range by a single integer. This makes it unclear to the observer whether the displayed value represents the age or the upper or lower bound. Additionally, the Null group is not a representative designation.\n\n\n(e) x-Axis not able to see\nDue to the size of the plot, the x-Axis label cannot be seen unless the viewer scrolls all the way down. Not only is the bar size unclear, but the gender is also difficult to determine.\n\n\n(f) Color representation\nColor is very crucial in visualizing. However, the original plot does not make advantage of it, making it more difficult for viewers to identify gender.\n\n\n(f) Data Label\nThe planning area label is plotted on the axis rather than within the plot, making it difficult for the observer to identify the planning area to which the plot belongs.\n\n\n(g) Resolution settings\nThe resolution is not adjustable. In a smaller screen, the axis is not visible.\n\n\n\n\n4. Proposed Sketch\n\n\n\n5. Step to create plot in R\n\n1. Installing and loading the required libraries\nThe code chunk below is used to install and load the required packages onto RStudio.\n\ntidyverse : A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nplotly: Used for creating interactive web-based graphs.\nggplot2: A system for ‘declaratively’ creating graphics, based on “The Grammar of Graphics”.\n\n\npackages = c('tidyverse', 'plotly', 'ggplot2')\nfor(p in packages){\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\n\n\n2. Importing the dataset\nThe source file is in csv format, hence read_csv of readr package is used to import the dataset.\n\nPopdata2022 <- read_csv(\"Data/respopagesextod2022.csv\")\nsummary(Popdata2022)\n\n      PA                 SZ                 AG                Sex           \n Length:100928      Length:100928      Length:100928      Length:100928     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n     TOD                 Pop               Time     \n Length:100928      Min.   :   0.00   Min.   :2022  \n Class :character   1st Qu.:   0.00   1st Qu.:2022  \n Mode  :character   Median :   0.00   Median :2022  \n                    Mean   :  40.44   Mean   :2022  \n                    3rd Qu.:  20.00   3rd Qu.:2022  \n                    Max.   :2300.00   Max.   :2022  \n\n\nUse head command to see the first 5 rows of the data.\n\nhead(Popdata2022,5)\n\n# A tibble: 5 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>               <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2022\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2022\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       10  2022\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    30  2022\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2022\n\n\n\n\n3. Wrangling data\n\n3.1 Select focus column\nIn this stage, we take only four columns from the original dataset Popdata2022, namely PA (Planning Area), AG (Age Group), Sex (Gender), and Pop (Number of People), and assign them to the new dataset Popdata.\n\nPopdata <- Popdata2022 %>% \n  select(PA, AG, Sex, Pop)\nhead(Popdata,5)\n\n# A tibble: 5 × 4\n  PA         AG     Sex     Pop\n  <chr>      <chr>  <chr> <dbl>\n1 Ang Mo Kio 0_to_4 Males     0\n2 Ang Mo Kio 0_to_4 Males    10\n3 Ang Mo Kio 0_to_4 Males    10\n4 Ang Mo Kio 0_to_4 Males    30\n5 Ang Mo Kio 0_to_4 Males     0\n\n\n\n\n3.2 Deriving the frequency count by Planning Area, Age Group, Sex\nAs we want to display the number of people in each age group and gender for each planning region, we use the group by command and drop off the na value. Then, the new column sumPop is derived to represent the data.\n\nPopdata <- Popdata %>% \n  group_by(PA, AG, Sex) %>% \n  na.omit() %>% \n  summarize(sumPop = sum(Pop))\nhead(Popdata,5)\n\n# A tibble: 5 × 4\n# Groups:   PA, AG [3]\n  PA         AG       Sex     sumPop\n  <chr>      <chr>    <chr>    <dbl>\n1 Ang Mo Kio 0_to_4   Females   2480\n2 Ang Mo Kio 0_to_4   Males     2530\n3 Ang Mo Kio 10_to_14 Females   3320\n4 Ang Mo Kio 10_to_14 Males     3350\n5 Ang Mo Kio 15_to_19 Females   3620\n\n\n\n\n3.3 Filter Planning Area\nWe may use the unique command on column PA to list every planning area in the dataset.\n\nunique(Popdata$PA)\n\n [1] \"Ang Mo Kio\"              \"Bedok\"                  \n [3] \"Bishan\"                  \"Boon Lay\"               \n [5] \"Bukit Batok\"             \"Bukit Merah\"            \n [7] \"Bukit Panjang\"           \"Bukit Timah\"            \n [9] \"Central Water Catchment\" \"Changi\"                 \n[11] \"Changi Bay\"              \"Choa Chu Kang\"          \n[13] \"Clementi\"                \"Downtown Core\"          \n[15] \"Geylang\"                 \"Hougang\"                \n[17] \"Jurong East\"             \"Jurong West\"            \n[19] \"Kallang\"                 \"Lim Chu Kang\"           \n[21] \"Mandai\"                  \"Marina East\"            \n[23] \"Marina South\"            \"Marine Parade\"          \n[25] \"Museum\"                  \"Newton\"                 \n[27] \"North-Eastern Islands\"   \"Novena\"                 \n[29] \"Orchard\"                 \"Outram\"                 \n[31] \"Pasir Ris\"               \"Paya Lebar\"             \n[33] \"Pioneer\"                 \"Punggol\"                \n[35] \"Queenstown\"              \"River Valley\"           \n[37] \"Rochor\"                  \"Seletar\"                \n[39] \"Sembawang\"               \"Sengkang\"               \n[41] \"Serangoon\"               \"Simpang\"                \n[43] \"Singapore River\"         \"Southern Islands\"       \n[45] \"Straits View\"            \"Sungei Kadut\"           \n[47] \"Tampines\"                \"Tanglin\"                \n[49] \"Tengah\"                  \"Toa Payoh\"              \n[51] \"Tuas\"                    \"Western Islands\"        \n[53] \"Western Water Catchment\" \"Woodlands\"              \n[55] \"Yishun\"                 \n\n\nThen we select 9 areas that we want to represent i.e. Bedok, Tampines, Jurong West, Sengkang, Woodlands, Hougang, Yishun, Choa Chu Kang, and Punggol.\n\nPopdata <- Popdata %>% \n  filter(PA %in% c(\"Bedok\", \"Tampines\", \"Jurong West\", \n                   \"Sengkang\", \"Woodlands\", \"Hougang\", \n                   \"Yishun\", \"Choa Chu Kang\", \"Punggol\"))\n\n\n\n3.4 Binning Age-group\nOnce more, we use the unique command to view the Age group in the original dataset.\n\nunique(Popdata$AG)\n\n [1] \"0_to_4\"      \"10_to_14\"    \"15_to_19\"    \"20_to_24\"    \"25_to_29\"   \n [6] \"30_to_34\"    \"35_to_39\"    \"40_to_44\"    \"45_to_49\"    \"50_to_54\"   \n[11] \"55_to_59\"    \"5_to_9\"      \"60_to_64\"    \"65_to_69\"    \"70_to_74\"   \n[16] \"75_to_79\"    \"80_to_84\"    \"85_to_89\"    \"90_and_over\"\n\n\nThe Age-group will be recoded according to the table below. Each group will have a 10-year age range.\n\n\n\nOriginal\nRecoded\n\nOriginal\nRecoded\n\n\n\n\n“0_to_4”\n“0-9”\n\n“50_to_54”\n“50-59”\n\n\n“5_to_9”\n“0-9”\n\n“55_to_59”\n“50-59”\n\n\n“10_to_14”\n“10-19”\n\n“60_to_64”\n“60-69”\n\n\n“15_to_19”\n“10-19”\n\n“65_to_69”\n“60-69”\n\n\n“20_to_24”\n“20-29”\n\n“70_to_74”\n“70-79”\n\n\n“25_to_29”\n“20-29”\n\n“75_to_79”\n“70-79”\n\n\n“30_to_34”\n“30-39”\n\n“80_to_84”\n“80-89”\n\n\n“35_to_39”\n“30-39”\n\n“85_to_89”\n“80-89”\n\n\n“40_to_44”\n“40-49”\n\n“90_and_over”\n“>90”\n\n\n“45_to_49”\n“40-49”\n\n\n\n\n\n\n\nPopdata <- Popdata %>% \n  mutate(AG = as.factor(AG)) %>%\n  mutate(AG = fct_collapse(AG,\n                           \"0-9\" = c(\"0_to_4\",\"5_to_9\"),\n                           \"10-19\" = c(\"10_to_14\",\"15_to_19\"),\n                           \"20-29\" = c(\"20_to_24\",\"25_to_29\"),\n                           \"30-39\" = c(\"30_to_34\",\"35_to_39\"),\n                           \"40-49\" = c(\"40_to_44\",\"45_to_49\"),\n                           \"50-59\" = c(\"50_to_54\",\"55_to_59\"),\n                           \"60-69\" = c(\"60_to_64\",\"65_to_69\"),\n                           \"70-79\" = c(\"70_to_74\",\"75_to_79\"),\n                           \"80-89\" = c(\"80_to_84\",\"85_to_89\"),\n                           \">90\" = c(\"90_and_over\")\n                           )) %>% \n  mutate(AG = fct_relevel(AG, \"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\", \n                          \"50-59\", \"60-69\", \"70-79\", \"80-89\", \">90\")) %>% \n  group_by(PA, AG, Sex) %>% \n  na.omit() %>%\n  summarize(sumPop = sum(sumPop)) %>% \n  rename(Pop = sumPop)\nhead(Popdata,5)\n\n# A tibble: 5 × 4\n# Groups:   PA, AG [3]\n  PA    AG    Sex       Pop\n  <chr> <fct> <chr>   <dbl>\n1 Bedok 0-9   Females 10670\n2 Bedok 0-9   Males   11050\n3 Bedok 10-19 Females 12880\n4 Bedok 10-19 Males   13210\n5 Bedok 20-29 Females 16130\n\n\nTo make the pyramid center, convert data from one gender to a negative value.\n\nPopdata_M <- Popdata %>%\n                  filter(`Sex` ==  \"Males\") %>%\n                  mutate (Pop = -Pop)\n\nPopdata_F <- Popdata %>%\n                  filter(`Sex` ==  \"Females\") \n\nPopdata <- rbind(Popdata_M,Popdata_F)\nPopdata\n\n# A tibble: 180 × 4\n# Groups:   PA, AG [90]\n   PA    AG    Sex      Pop\n   <chr> <fct> <chr>  <dbl>\n 1 Bedok 0-9   Males -11050\n 2 Bedok 10-19 Males -13210\n 3 Bedok 20-29 Males -16920\n 4 Bedok 30-39 Males -18000\n 5 Bedok 40-49 Males -18740\n 6 Bedok 50-59 Males -19960\n 7 Bedok 60-69 Males -20050\n 8 Bedok 70-79 Males -12390\n 9 Bedok 80-89 Males  -4040\n10 Bedok >90   Males   -660\n# … with 170 more rows\n\n\n\n\n\n4. Plotting the chart\nLet us begin with a basic pyramid to depict the overall population distribution of age and gender in the nine planning districts chosen.\n\n  ggplot(Popdata, aes(x = Pop, y = AG, fill = Sex, ease_aes('linear'))) +\n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population size\", \n        y = \"Age Group\", \n        title='Singapore Age-Sex Population Pyramid') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"#00C19A\", \"Females\" = \"#F8766D\"))\n\n\n\n\nFollowing that, we develop a Trellis plot 3x3 to facilitate comparison across planning areas. The nice age-sex pyramid for each planning area is now available.\n\nxbrks <- c(-20000, -10000, 0, 10000, 20000)\nxlabls <- paste0(as.character(c('20k', '10k', '0', '10k', '20k')))\n\np <- ggplot(Popdata, \n      aes (x = AG, y = Pop, fill = Sex)) +\n      geom_bar(stat = \"identity\", width = .6 ) +\n      labs (x = \"Population\", \n            y = \"Age Group\")+\n      ggtitle(\"<span style='font-size: 12pt;'>What is the demographic breakdown of Singaporeans in the top 9 most populous Planning Areas?\")+\n      coord_flip() +\n      theme_bw() +\n      theme(axis.ticks.y = element_blank()) +\n      scale_fill_manual(values = c(\"Males\" = \"#00C19A\", \"Females\" = \"#F8766D\"))\n      \nxbrks1 <- c(-20000, -10000, 0, 10000, 20000)\nxlabls1 <- paste0(as.character(c('20k', '10k', '0', '10k', '20k')))\np1 <- p +  facet_wrap (~ PA, nrow = 3, ncol = 3) + \n            xlab(\"Age Group\") +\n            scale_y_continuous(breaks = xbrks1, labels = xlabls1, name = \"Population Size\")\n\nggplotly(p1)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "1. The task\nIn this take-home exercise, you are required to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques learned in Lesson 4: Fundamentals of Visual Analytics. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.\nFor the purpose of this study, the focus should be on 3-ROOM, 4-ROOM and 5-ROOM types. You can choose to focus on either one housing type or multiple housing types. The study period should be on 2022.\nThe write-up of the take-home exercise should include but not limited to the followings:\n\nDescribe the selection and designed consideration of the analytical data visualisation used. The discussion should limit to not more than 150 words each.\nA reproducible description of the procedures used to prepare the analytical visualisation. Please refer to the peer submission I shared.\nA write-up of not more than 100 words to discuss the patterns reveal by each analytical visualisation prepared.\n\n\n\n2. Data\nThe original dataset ’Resale flat princes based on registration date from Jan-2017 onwards’ was obtained from Data.gov.sg. This dataset provides information on all resale HDB flat transactions from 2017 to 2023. The notable features in this dataset are as follows:\ni) town: the town of the associated HDB flat\nii) flat_type: the type of flat of the associated HDB flat. In Singapore, there are 1-room flats up to 5-room flats, as well as executive flats, which are slightly bigger than 5-room flats. (The remaining flat type: Multi-generational flats, are few and far between)\niii) block: the block of the associated HDB flat\niv) street: the street of the associated HDB flat\nv) storey_range: the storey range of the associated HDB flat. In this dataset, the storey range is given in a range of 3 (e.g. 10 to 12 , which means the flat is based on the 10th to 12th storey).\nvi) floor_area_sqm: the floor area of the associated HDB flat in square meters\nvii) remaining_lease: the remaining lease of the associated HDB flat in months and years\nviii) resale_price: the resale price of the assocaited HDB flat\n\n\n3. Design Consideration\n\n\n4. Step to create plot in R\n\n1. Installing and loading the required libraries\nThe code chunk below is used to install and load the required packages onto RStudio.\n\ntidyverse : A collection of core packages designed for data science, used extensively for data preparation and wrangling. (readr, ggplot2, dplyr, purrr, tidyr, tibble)\nggstatplot: an extension of ggplot2 package for creating graphics with details from statistical tests included in the plots themselves and targeted primarily at behavioral sciences community to provide a one-line code to produce information-rich plots.\npsych: A general purpose toolbox for personality, psychometric theory and experimental psychology. Functions are primarily for multivariate analysis and scale construction using factor analysis, principal component analysis, cluster analysis and reliability analysis, although others provide basic descriptive statistics.\nlubridate: Provides tools that make it easier to parse and manipulate dates. These tools are grouped below by common purpose.\nggrepel: This package contains extra geoms for ggplot2.\n\n\n\nCode\npackages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly')\nfor(p in packages){\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\n\n\n\n2. Importing the dataset\nThe source file is in csv format, hence read_csv of readr package is used to import the dataset. From the result below, we will see that our original data has 146,215 rows with 11 columns ( 8 categorical fields and 3 numeric fields).\n\n\nCode\nResale_raw <- read_csv(\"Data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\nglimpse(Resale_raw)\n\n\nRows: 146,215\nColumns: 11\n$ month               <chr> \"2017-01\", \"2017-01\", \"2017-01\", \"2017-01\", \"2017-…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"406\", \"108\", \"602\", \"465\", \"601\", \"150\", \"447\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 4\", \"ANG MO K…\n$ storey_range        <chr> \"10 TO 12\", \"01 TO 03\", \"01 TO 03\", \"04 TO 06\", \"0…\n$ floor_area_sqm      <dbl> 44, 67, 67, 68, 67, 68, 68, 67, 68, 67, 68, 67, 67…\n$ flat_model          <chr> \"Improved\", \"New Generation\", \"New Generation\", \"N…\n$ lease_commence_date <dbl> 1979, 1978, 1980, 1980, 1980, 1981, 1979, 1976, 19…\n$ remaining_lease     <chr> \"61 years 04 months\", \"60 years 07 months\", \"62 ye…\n$ resale_price        <dbl> 232000, 250000, 262000, 265000, 265000, 275000, 28…\n\n\nUse head command to see the first 5 rows of the data.\n\n\nCode\nhead(Resale_raw,5)\n\n\n# A tibble: 5 × 11\n  month   town     flat_…¹ block stree…² store…³ floor…⁴ flat_…⁵ lease…⁶ remai…⁷\n  <chr>   <chr>    <chr>   <chr> <chr>   <chr>     <dbl> <chr>     <dbl> <chr>  \n1 2017-01 ANG MO … 2 ROOM  406   ANG MO… 10 TO …      44 Improv…    1979 61 yea…\n2 2017-01 ANG MO … 3 ROOM  108   ANG MO… 01 TO …      67 New Ge…    1978 60 yea…\n3 2017-01 ANG MO … 3 ROOM  602   ANG MO… 01 TO …      67 New Ge…    1980 62 yea…\n4 2017-01 ANG MO … 3 ROOM  465   ANG MO… 04 TO …      68 New Ge…    1980 62 yea…\n5 2017-01 ANG MO … 3 ROOM  601   ANG MO… 01 TO …      67 New Ge…    1980 62 yea…\n# … with 1 more variable: resale_price <dbl>, and abbreviated variable names\n#   ¹​flat_type, ²​street_name, ³​storey_range, ⁴​floor_area_sqm, ⁵​flat_model,\n#   ⁶​lease_commence_date, ⁷​remaining_lease\n\n\n\n\n3. Wrangling data\n\n3.1 Select interested fields\n\n\nCode\nResale <-Resale_raw %>%\n  select(\"month\", \"town\", \"flat_type\", \"storey_range\", \"floor_area_sqm\", \"lease_commence_date\", \"remaining_lease\", \"resale_price\")\n\n\n\n\n3.2 Filter the analyzing year of 2022\nSeparating column month using separate(). Filter only Year of 2022.\n\n\nCode\nResale <-Resale %>%\n  mutate(quarter = quarter(ym(month)))\n\n\n\n\nCode\nResale <-Resale %>%\n  separate(`month`, into = c(\"Year\", \"Month\"), sep = \"-\") %>% \n  filter(Year == \"2022\")\n\n\n\n\n3.3 Filter flat types 3-Room, 4-Room, 5-Room\n\n\nCode\nResale <- Resale %>% \n  filter(flat_type %in% c(\"3 ROOM\",\"4 ROOM\", \"5 ROOM\"))\n\n\n\n\n3.4 Change format of price to represent in kSGD\n\n\nCode\nResale <- Resale %>%\n  mutate(resale_price=resale_price/1000) %>% \n  rename('resale_price_kSGD' = 'resale_price')\n\n\n\n\n3.5 Change format of remaining lease to represent in years\n\n\nCode\n# library(stringr)\nResale <-Resale %>%\n  separate(`remaining_lease`, into = \"remaining_lease\", sep = \" years\") %>% \n  mutate(remaining_lease = as.numeric(remaining_lease))\n\n\nHere, we can see that our data now only has 24,374 rows left after filter year and flat type.\n\n\nCode\nResale\n\n\n# A tibble: 24,374 × 10\n   Year  Month town      flat_…¹ store…² floor…³ lease…⁴ remai…⁵ resal…⁶ quarter\n   <chr> <chr> <chr>     <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <int>\n 1 2022  01    ANG MO K… 3 ROOM  07 TO …      73    1977      54     358       1\n 2 2022  01    ANG MO K… 3 ROOM  07 TO …      67    1978      55     355       1\n 3 2022  01    ANG MO K… 3 ROOM  07 TO …      68    1981      58     338       1\n 4 2022  01    ANG MO K… 3 ROOM  07 TO …      82    1980      57     420       1\n 5 2022  01    ANG MO K… 3 ROOM  04 TO …      67    1980      57     328       1\n 6 2022  01    ANG MO K… 3 ROOM  01 TO …      83    1979      56     360       1\n 7 2022  01    ANG MO K… 3 ROOM  01 TO …      67    1980      57     300       1\n 8 2022  01    ANG MO K… 3 ROOM  04 TO …      67    1979      56     333       1\n 9 2022  01    ANG MO K… 3 ROOM  04 TO …      67    1979      56     386       1\n10 2022  01    ANG MO K… 3 ROOM  10 TO …      67    1980      57     330       1\n# … with 24,364 more rows, and abbreviated variable names ¹​flat_type,\n#   ²​storey_range, ³​floor_area_sqm, ⁴​lease_commence_date, ⁵​remaining_lease,\n#   ⁶​resale_price_kSGD\n\n\n\n\n\n4. Exploratory Data Analysis\nUsing the describe() function, you can get a sense-check of the data and see if there were any errors in the feature engineering. These are the summary statistics that were observed:\n\nResale Price — The prices of the flats range between $200K to $1,418K with a mean of $536K\nFloor Area — The sizes of the flats range between 51sqm to 159sqm, with a mean of 94.07sqm\nRemaining Lease — The lease commence date of the flats range between 43 years to 96 years\n\n\n\nCode\ndescribe(Resale)\n\n\n                    vars     n    mean     sd median trimmed    mad  min  max\nYear*                  1 24374    1.00   0.00      1    1.00   0.00    1    1\nMonth*                 2 24374    6.50   3.44      7    6.51   4.45    1   12\ntown*                  3 24374   15.12   7.88     17   15.47   8.90    1   26\nflat_type*             4 24374    2.02   0.73      2    2.02   1.48    1    3\nstorey_range*          5 24374    3.36   2.09      3    3.08   1.48    1   17\nfloor_area_sqm         6 24374   94.07  19.32     93   93.99  25.20   51  159\nlease_commence_date    7 24374 1997.46  14.98   1998 1997.83  20.76 1967 2019\nremaining_lease        8 24374   74.06  15.02     74   74.46  20.76   43   96\nresale_price_kSGD      9 24374  536.39 157.99    515  520.46 133.43  200 1418\nquarter               10 24374    2.50   1.10      3    2.50   1.48    1    4\n                    range  skew kurtosis   se\nYear*                   0   NaN      NaN 0.00\nMonth*                 11 -0.02    -1.19 0.02\ntown*                  25 -0.31    -1.16 0.05\nflat_type*              2 -0.02    -1.13 0.00\nstorey_range*          16  1.66     4.36 0.01\nfloor_area_sqm        108 -0.06    -0.85 0.12\nlease_commence_date    52 -0.03    -1.33 0.10\nremaining_lease        53 -0.04    -1.32 0.10\nresale_price_kSGD    1218  1.09     1.81 1.01\nquarter                 3 -0.02    -1.33 0.01\n\n\n\n\n5. Visualizations\n\n5.1 Plotting histogram of resale price\nFindings:\n\nRight-skewed distribtion plot has a mean of $527k resale price.\nThe mode (peak) for resale price hover around $420000 mark having a count of nearing 750 transactions.\nThe right tail is longer.\nThis gives a distribution pattern of frequency on transaction prices generally falls under.\n\n\n\nCode\ngghistostats(\n  data = Resale,\n  x = 'resale_price_kSGD',\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"resale_price (kSGD)\" ) +\n  ggtitle(\"What is the overall Resale price distribution?\")\n\n\n\n\n\n\n\n5.2 Plotting histogram of floor area\n\n\nCode\ngghistostats(\n  data = Resale,\n  x = 'floor_area_sqm',\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"floor_area_sqm\" ) +\n  ggtitle(\"What is the overall floor area distribution?\")\n\n\n\n\n\n\n\n5.3 Two sample mean test on resale price between flat types\n\n\nCode\nggbetweenstats(\n  data = Resale,\n  x = 'flat_type', \n  y = 'resale_price_kSGD',\n  type = \"np\",\n  messages = FALSE) +\n  ggtitle(\"What is the difference in resale price between different types of flats?\")\n\n\n\n\n\n\n\n5.4 Box plot of resale price by flat types\nA boxplot was also used to understand the relationship between the flat types and resale prices. It can be seen that there are quite a number of outliers in all 3 flat types.\n\n\nCode\np<-ggplot(Resale, aes(x=flat_type, y=resale_price_kSGD, fill=flat_type)) +\n  geom_boxplot() +\n  stat_summary(fun.y=mean, geom=\"point\", color=\"red\") +\n  theme(legend.position=\"none\") +\n  ggtitle(\"Boxplot of resale price by flat type\")\n# Remove legend\n#| fig-height: 12\n#| fig-width: 12\np\n\n\n\n\n\n\n\n5.5 Box plot of resale price by town\n\n\nCode\nResale %>%\n  mutate(class = fct_reorder(town, resale_price_kSGD, .fun='mean')) %>%\n  ggplot( aes(x=reorder(town, resale_price_kSGD), y=resale_price_kSGD)) +\n  geom_boxplot() +\n  stat_summary(fun.y=mean, geom=\"point\", color=\"red\") +\n  theme(legend.position=\"none\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n  ggtitle(\"Boxplot of resale price by town\")\n\n\n\n\n\n\n\n5.6 HDB resale prices in 2022 by town\n\n\nCode\nResale %>% \n  group_by(flat_type) %>% \n  # Extract quarter and price per sqm\n  mutate(price_per_sqm = resale_price_kSGD/floor_area_sqm) %>%\n  ggplot(mapping = aes(x = town, y = price_per_sqm)) +\n  # Make grouped boxplot\n  geom_boxplot(aes(fill = as.factor(flat_type)), color = \"grey\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_fill_viridis_d(option = \"C\") +\n  # Adjust lables and add title\n  labs(title = \"HDB resale prices in 2022 by town\", y=\"Price per square metre (SGD)\", fill = \"flat_type\")+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\n\n\n\n5.7 Significant Test of Correlation: ggscatterstats()\n\n\nCode\nggscatterstats(\n  data = Resale,\n  x = floor_area_sqm,\n  y = resale_price_kSGD,\n  marginal = FALSE\n  )\n\n\n\n\n\n\n\nCode\np <- ggscatterstats(\n  data = Resale,\n  x = floor_area_sqm,\n  y = resale_price_kSGD,\n  marginal = FALSE,\n  point.args = list(size = 0.5, alpha = 0.1, stroke = 0, color = \"red\"),\n  smooth.line.args = list(linewidth = 0.5, color = \"blue\", method = \"lm\", formula = y ~\n    x)\n  )\n      \np1 <- p +  facet_wrap (~ town, nrow = 6, ncol = 6) + \n            xlab(\"floor area\") +\n            scale_y_continuous(breaks = c(0,3000,6000,9000,12000), name = \"Resale price(kSGD)\")\n\nggplotly(p1)\n\n\n\n\n\n\n\n\n5.8\n\n\nCode\nggplot(data = Resale, mapping = aes(y=town, fill=flat_type)) +\n  theme_minimal() +\n  geom_bar(position = \"fill\") +\n  scale_fill_viridis_d(option = \"C\") +\n  labs(title = \"Flat type proportion by town\", fill = \"Flat type\", \n       x = \"Count\", y = \"\")\n\n\n\n\n\n\n\n5.9 How have prices fluctuated in 2022 for different flat types?\nWe display a quarterly boxplot to illustrate the price trend over time. As room count increases, the average price per square meter drops. There are numerous outliers with extremely high prices per square meter in 3, 4, and 5 ROOM. The type of flat with the highest.\n\n\nCode\nResale %>% \n  group_by(flat_type) %>% \n  # Extract quarter and price per sqm\n  mutate(price_per_sqm = resale_price_kSGD/floor_area_sqm) %>%\n  ggplot(mapping = aes(x = flat_type, y = price_per_sqm)) +\n  # Make grouped boxplot\n  geom_boxplot(aes(fill = as.factor(quarter)), color = \"black\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_fill_viridis_d(option = \"C\") +\n  # Adjust lables and add title\n  labs(title = \"HDB resale prices in 2022 by flat type\", y=\"Price per square metre (SGD)\", fill = \"Quarter\")\n\n\n\n\n\n\n\n5.10 Resale flat type by town\n\n\nCode\nResale %>% \n  group_by(town) %>% \n  # Calculate housing age\n  mutate(housing_age = 2023 - lease_commence_date) %>% \n  summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>% \n  ggplot(mapping = aes(x=average_housing_age, y=average_price)) +\n  geom_count(aes(color = average_area), alpha = 0.6) +\n  # Change size of count points\n  scale_size_area(max_size = 10) +\n  # Add lables next to count points\n  geom_text_repel(aes(label = town),size = 2.7) +\n  scale_y_continuous( limits = c(400, 800)) +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_color_viridis_c(option = \"C\")\n\n\n\n\n\n\n\n\n\n5. Reference\nhttps://r4ds.had.co.nz/index.html\nhttps://r-graph-gallery.com/267-reorder-a-variable-in-ggplot2.html\nhttps://wangjing.city/wp-content/uploads/2021/05/Looking-into-Singapore-Resale-Flats-Market.html\nhttps://towardsdatascience.com/understanding-and-predicting-resale-hdb-flat-prices-in-singapore-1853ec7069b0\nhttps://rpubs.com/chunwey/LinearR2\nhttps://www.linkedin.com/pulse/data-analytics-understanding-resale-prices-hdb-houses-bannister/?trk=read_related_article-card_title\nhttps://wangjing.city/portfolio/looking-into-singapore-resale-flats-market/\nhttps://stackoverflow.com/questions/1330989/rotating-and-spacing-axis-labels-in-ggplot2\nhttp://www.sthda.com/english/wiki/ggplot2-axis-ticks-a-guide-to-customize-tick-marks-and-labels"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "In this take-home exercise, you are required to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore bi-lateral trade (i.e. Import, Export and Trade Balance) by using appropriate analytical visualisation techniques learned in Lesson 6: It’s About Time. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.\nThe write-up of the take-home exercise should include but not limited to the followings:\n\nDescribe the selection and designed consideration of the analytical data visualisation used. The discussion should limit to not more than 150 words each.\nA reproducible description of the procedures used to prepare the analytical visualisation. Please refer to the peer submission I shared.\nA write-up of not more than 100 words to discuss the patterns reveal by each analytical visualization prepared.\n\nPackages\n\npackages = c('readxl', 'datawizard')\nfor(p in packages){\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#t1-table-merchandise-imports-by-regionmarket-monthly",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#t1-table-merchandise-imports-by-regionmarket-monthly",
    "title": "Take-home Exercise 4",
    "section": "2.1 T1 table: Merchandise Imports By Region/Market, Monthly",
    "text": "2.1 T1 table: Merchandise Imports By Region/Market, Monthly\n\n\nCode\nknitr::kable(\n  head(T1, 5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonth\nTotal Merchandise Imports (Thousand Dollars)\nAmerica (Million Dollars)\nAsia (Million Dollars)\nEurope (Million Dollars)\nOceania (Million Dollars)\nAfrica (Million Dollars)\nEuropean Union (Million Dollars)\nBelgium (Thousand Dollars)\nDenmark (Thousand Dollars)\nFrance (Thousand Dollars)\nGermany, Federal Republic Of (Thousand Dollars)\nGreece (Thousand Dollars)\nIreland (Thousand Dollars)\nItaly (Thousand Dollars)\nLuxembourg (Thousand Dollars)\nNetherlands (Thousand Dollars)\nUnited Kingdom (Thousand Dollars)\nPortugal (Thousand Dollars)\nSpain (Thousand Dollars)\nAustria (Thousand Dollars)\nFinland (Thousand Dollars)\nNorway (Thousand Dollars)\nSweden (Thousand Dollars)\nSwitzerland (Thousand Dollars)\nLiechtenstein (Thousand Dollars)\nMalta (Thousand Dollars)\nGermany, Democratic Republic Of (Thousand Dollars)\nHungary (Thousand Dollars)\nPoland (Thousand Dollars)\nEstonia (Thousand Dollars)\nLatvia (Thousand Dollars)\nLithuania (Thousand Dollars)\nSlovenia (Thousand Dollars)\nCzech Republic (Thousand Dollars)\nSlovak Republic (Slovakia) (Thousand Dollars)\nBrunei Darussalam (Thousand Dollars)\nIndonesia (Thousand Dollars)\nMalaysia (Thousand Dollars)\nPhilippines (Thousand Dollars)\nThailand (Thousand Dollars)\nMyanmar (Thousand Dollars)\nCambodia (Thousand Dollars)\nLaos People’s Democratic Republic (Thousand Dollars)\nVietnam, Socialist Republic Of (Thousand Dollars)\nJapan (Thousand Dollars)\nHong Kong (Thousand Dollars)\nRepublic Of Korea (Thousand Dollars)\nTaiwan (Thousand Dollars)\nMacau (Thousand Dollars)\nMainland China (Thousand Dollars)\nAfghanistan (Thousand Dollars)\nBangladesh (Thousand Dollars)\nIndia (Thousand Dollars)\nMaldives, Republic Of (Thousand Dollars)\nNepal (Thousand Dollars)\nPakistan (Thousand Dollars)\nSri Lanka (Thousand Dollars)\nBahrain (Thousand Dollars)\nCyprus (Thousand Dollars)\nIran (Islamic Republic Of) (Thousand Dollars)\nIsrael (Thousand Dollars)\nJordan (Thousand Dollars)\nKuwait (Thousand Dollars)\nLebanon (Thousand Dollars)\nOman (Thousand Dollars)\nQatar (Thousand Dollars)\nSaudi Arabia (Thousand Dollars)\nSyrian Arab Republic (Thousand Dollars)\nUnited Arab Emirates (Thousand Dollars)\nYemen (Thousand Dollars)\nYemen Democratic (Thousand Dollars)\nCanada (Thousand Dollars)\nPuerto Rico (Thousand Dollars)\nUnited States (Thousand Dollars)\nArgentina (Thousand Dollars)\nBrazil (Thousand Dollars)\nChile (Thousand Dollars)\nColombia (Thousand Dollars)\nEcuador (Thousand Dollars)\nMexico (Thousand Dollars)\nParaguay (Thousand Dollars)\nPeru (Thousand Dollars)\nUruguay (Thousand Dollars)\nVenezuela (Thousand Dollars)\nNetherlands Antilles (Thousand Dollars)\nPanama (Thousand Dollars)\nBahamas (Thousand Dollars)\nBermuda (Thousand Dollars)\nFrench Guiana (Thousand Dollars)\nGrenada (Thousand Dollars)\nGuatemala (Thousand Dollars)\nHonduras (Thousand Dollars)\nJamaica (Thousand Dollars)\nSt Vincent & The Grenadines (Thousand Dollars)\nTrinidad & Tobago (Thousand Dollars)\nAnguilla (Thousand Dollars)\nOther Countries In America (Thousand Dollars)\nAustralia (Thousand Dollars)\nFiji (Thousand Dollars)\nNauru (Thousand Dollars)\nNew Caledonia (Thousand Dollars)\nNew Zealand (Thousand Dollars)\nPapua New Guinea (Thousand Dollars)\nCocos (Keeling) Islands (Thousand Dollars)\nFrench Southern Territories (Thousand Dollars)\nNorfolk Island (Thousand Dollars)\nCook Islands (Thousand Dollars)\nFrench Polynesia (Thousand Dollars)\nGuam (Thousand Dollars)\nKiribati (Thousand Dollars)\nNiue (Thousand Dollars)\nSolomon Islands (Thousand Dollars)\nTuvalu (Thousand Dollars)\nWallis & Fatuna Islands (Thousand Dollars)\nMicronesia (Thousand Dollars)\nPalau (Thousand Dollars)\nSouth Sudan (Thousand Dollars)\nOther Countries In Oceania (Thousand Dollars)\nCommonwealth Of Independent States (Thousand Dollars)\n\n\n\n\n2022 Dec\n49869770.0\n6901.5\n33611.7\n7541.8\n1399.9\n414.9\n5058.8\n103655.0\n67665.0\n1537347.0\n1129542.0\n99085.0\n106678.0\n702472.0\n8156.0\n384010.0\n940088.0\n31026.0\n262629.0\n104665.0\n42399.0\n50581.0\n162253.0\n992687.0\n2250.0\n41040.0\n0.0\n44406.0\n61324.0\n5378.0\n4288.0\n13594.0\n7106.0\n69549.0\n9115.0\n143124.0\n2074781.0\n6017970.0\n592778.0\n1116398.0\n7486.0\n25899.0\n7281.0\n567388.0\n2618288.0\n240017.0\n3207322.0\n5357878.0\n1376.0\n7642587.0\n61.0\n27270.0\n834657.0\n103.0\n221.0\n7334.0\n10737.0\n44949.0\n21698.0\n317.0\n98717.0\n8265.0\n639.0\n332.0\n72624.0\n640131.0\n801168.0\n0.0\n1212293.0\n629.0\n0.0\n211232.0\n8375.0\n5314219.0\n11273.0\n1004171.0\n16649.0\n7915.0\n4475.0\n277739.0\n681.0\n3464.0\n635.0\n89.0\n0.0\n127.0\n11.0\n0.0\n123.0\n6.0\n570.0\n1457.0\n93.0\n0.0\n64.0\n0.0\n37931.0\n1253373.0\n243.0\n14.0\n18.0\n122266.0\n23124.0\n2.0\n46.0\n1.0\n0.0\n210.0\n35.0\n0.0\n80.0\n3.0\n0.0\n0.0\n29.0\n1.0\n33107.0\n1577.0\n559381.0\n\n\n2022 Nov\n50653907.0\n7529.4\n34733.7\n7242.8\n664.4\n483.6\n4961.4\n121773.0\n67436.0\n1563127.0\n1107630.0\n37937.0\n118525.0\n725004.0\n5714.0\n301384.0\n1050419.0\n33086.0\n245875.0\n105084.0\n49148.0\n43134.0\n196484.0\n949410.0\n3686.0\n23080.0\n0.0\n46849.0\n59504.0\n6972.0\n6436.0\n8716.0\n8502.0\n77729.0\n7487.0\n121051.0\n1971918.0\n6773423.0\n581054.0\n1241990.0\n6044.0\n16407.0\n4963.0\n488956.0\n2837697.0\n169227.0\n2863026.0\n5319407.0\n17054.0\n8285837.0\n26.0\n25709.0\n837673.0\n145.0\n612.0\n10169.0\n12169.0\n11520.0\n2385.0\n267.0\n85965.0\n7262.0\n54562.0\n578.0\n60005.0\n476149.0\n866619.0\n0.0\n1205738.0\n106.0\n0.0\n224872.0\n16518.0\n5832049.0\n6775.0\n1132945.0\n13831.0\n4436.0\n2745.0\n242881.0\n281.0\n2155.0\n779.0\n720.0\n0.0\n116.0\n4.0\n4.0\n517.0\n19.0\n997.0\n838.0\n117.0\n0.0\n2854.0\n0.0\n43918.0\n577829.0\n191.0\n0.0\n256.0\n72677.0\n12724.0\n0.0\n99.0\n0.0\n0.0\n35.0\n104.0\n3.0\n0.0\n13.0\n0.0\n0.0\n8.0\n0.0\n27952.0\n3090.0\n355213.0\n\n\n2022 Oct\n53182943.0\n7666.4\n36120.9\n7475.9\n1329.8\n589.9\n4685.2\n88796.0\n63719.0\n1493161.0\n1122251.0\n15850.0\n157648.0\n594994.0\n15746.0\n263199.0\n859994.0\n39971.0\n184146.0\n101231.0\n49749.0\n40090.0\n180230.0\n1811943.0\n2650.0\n51734.0\n0.0\n42761.0\n72936.0\n5489.0\n2299.0\n5892.0\n8759.0\n78066.0\n9522.0\n214994.0\n1987191.0\n6417377.0\n646820.0\n1431165.0\n5856.0\n9089.0\n16907.0\n522441.0\n3038903.0\n207166.0\n3044583.0\n6484560.0\n2341.0\n7377473.0\n9.0\n18536.0\n826855.0\n14.0\n688.0\n6327.0\n14721.0\n66675.0\n2034.0\n692.0\n93452.0\n3020.0\n52798.0\n449.0\n108470.0\n528921.0\n1010564.0\n3.0\n1642118.0\n265.0\n0.0\n213606.0\n5480.0\n6163496.0\n14908.0\n917460.0\n11567.0\n2200.0\n4893.0\n272680.0\n487.0\n11670.0\n1123.0\n885.0\n0.0\n175.0\n4.0\n0.0\n12899.0\n1.0\n262.0\n706.0\n61.0\n2.0\n31.0\n1.0\n44771.0\n1246296.0\n170.0\n0.0\n14.0\n72719.0\n10221.0\n2.0\n115.0\n0.0\n0.0\n60.0\n65.0\n0.0\n1.0\n21.0\n1.0\n0.0\n5.0\n0.0\n0.0\n269.0\n211147.0\n\n\n2022 Sep\n55799312.0\n7995.9\n37696.3\n8167.6\n1544.6\n395.0\n5145.8\n215978.0\n61842.0\n1660563.0\n1170472.0\n107888.0\n118936.0\n547587.0\n55482.0\n314814.0\n1131385.0\n47500.0\n209987.0\n130438.0\n48419.0\n41524.0\n143127.0\n1758858.0\n3558.0\n23836.0\n0.0\n38367.0\n82610.0\n7789.0\n2679.0\n8406.0\n7816.0\n73954.0\n7399.0\n208537.0\n1924895.0\n7672003.0\n599147.0\n1343781.0\n6949.0\n12607.0\n20214.0\n594893.0\n3109529.0\n354257.0\n3113799.0\n5683947.0\n436.0\n7390866.0\n19.0\n18308.0\n1023746.0\n43.0\n602.0\n5272.0\n13436.0\n2744.0\n1662.0\n258.0\n143055.0\n8904.0\n16848.0\n303.0\n42137.0\n766915.0\n954922.0\n17.0\n2315066.0\n48.0\n0.0\n241035.0\n9831.0\n6537215.0\n13163.0\n833293.0\n29599.0\n10518.0\n2522.0\n263872.0\n235.0\n14741.0\n3311.0\n238.0\n0.0\n328.0\n4.0\n3.0\n296.0\n3.0\n926.0\n432.0\n493.0\n21.0\n58.0\n0.0\n35101.0\n1447901.0\n498.0\n8.0\n262.0\n79919.0\n14332.0\n0.0\n242.0\n0.0\n23.0\n37.0\n176.0\n0.0\n3.0\n4.0\n0.0\n0.0\n10.0\n0.0\n14777.0\n664.0\n192289.0\n\n\n2022 Aug\n58466009.0\n8633.8\n40911.9\n7433.2\n935.9\n551.2\n5131.0\n132917.0\n126150.0\n1624646.0\n1135242.0\n170197.0\n193225.0\n592000.0\n31284.0\n339001.0\n753406.0\n45507.0\n200170.0\n105197.0\n38114.0\n36231.0\n107557.0\n1420434.0\n3380.0\n40703.0\n0.0\n39917.0\n64268.0\n7588.0\n3549.0\n6345.0\n7957.0\n76026.0\n10549.0\n311958.0\n2301232.0\n7225607.0\n1121526.0\n1511871.0\n8313.0\n21829.0\n36150.0\n688285.0\n3100676.0\n319470.0\n3841813.0\n7174679.0\n3219.0\n8196629.0\n107.0\n36996.0\n908131.0\n37.0\n559.0\n9692.0\n12789.0\n7085.0\n2499.0\n255.0\n126174.0\n3782.0\n56351.0\n337.0\n73156.0\n827737.0\n1081996.0\n0.0\n1629843.0\n151.0\n0.0\n599499.0\n14898.0\n6575058.0\n11801.0\n968690.0\n75458.0\n9806.0\n1931.0\n247995.0\n513.0\n1888.0\n806.0\n803.0\n0.0\n424.0\n0.0\n2.0\n431.0\n8.0\n2170.0\n793.0\n137.0\n0.0\n80568.0\n9.0\n40996.0\n696980.0\n185.0\n0.0\n186.0\n133089.0\n104656.0\n7.0\n8.0\n101.0\n0.0\n38.0\n86.0\n0.0\n0.0\n2.0\n0.0\n0.0\n10.0\n6.0\n0.0\n441.0\n170747.0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#t2-table-merchandise-exports-by-regionmarket-monthly",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#t2-table-merchandise-exports-by-regionmarket-monthly",
    "title": "Take-home Exercise 4",
    "section": "2.2 T2 table: Merchandise Exports By Region/Market, Monthly",
    "text": "2.2 T2 table: Merchandise Exports By Region/Market, Monthly\n\n\nCode\nknitr::kable(\n  head(T2, 5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonth\nTotal Merchandise Exports (Thousand Dollars)\nAmerica (Million Dollars)\nAsia (Million Dollars)\nEurope (Million Dollars)\nOceania (Million Dollars)\nAfrica (Million Dollars)\nEuropean Union (Million Dollars)\nBelgium (Thousand Dollars)\nDenmark (Thousand Dollars)\nFrance (Thousand Dollars)\nGermany, Federal Republic Of (Thousand Dollars)\nGreece (Thousand Dollars)\nIreland (Thousand Dollars)\nItaly (Thousand Dollars)\nLuxembourg (Thousand Dollars)\nNetherlands (Thousand Dollars)\nUnited Kingdom (Thousand Dollars)\nPortugal (Thousand Dollars)\nSpain (Thousand Dollars)\nAustria (Thousand Dollars)\nFinland (Thousand Dollars)\nSweden (Thousand Dollars)\nSwitzerland (Thousand Dollars)\nMalta (Thousand Dollars)\nGermany, Democratic Republic Of (Thousand Dollars)\nHungary (Thousand Dollars)\nPoland (Thousand Dollars)\nEstonia (Thousand Dollars)\nLatvia (Thousand Dollars)\nLithuania (Thousand Dollars)\nSlovenia (Thousand Dollars)\nCzech Republic (Thousand Dollars)\nSlovak Republic (Slovakia) (Thousand Dollars)\nBrunei Darussalam (Thousand Dollars)\nIndonesia (Thousand Dollars)\nMalaysia (Thousand Dollars)\nPhilippines (Thousand Dollars)\nThailand (Thousand Dollars)\nMyanmar (Thousand Dollars)\nCambodia (Thousand Dollars)\nLaos People’s Democratic Republic (Thousand Dollars)\nVietnam, Socialist Republic Of (Thousand Dollars)\nJapan (Thousand Dollars)\nHong Kong (Thousand Dollars)\nRepublic Of Korea (Thousand Dollars)\nTaiwan (Thousand Dollars)\nMacau (Thousand Dollars)\nMainland China (Thousand Dollars)\nAfghanistan (Thousand Dollars)\nBangladesh (Thousand Dollars)\nIndia (Thousand Dollars)\nMaldives, Republic Of (Thousand Dollars)\nNepal (Thousand Dollars)\nPakistan (Thousand Dollars)\nSri Lanka (Thousand Dollars)\nBahrain (Thousand Dollars)\nCyprus (Thousand Dollars)\nIran (Islamic Republic Of) (Thousand Dollars)\nIsrael (Thousand Dollars)\nJordan (Thousand Dollars)\nKuwait (Thousand Dollars)\nLebanon (Thousand Dollars)\nOman (Thousand Dollars)\nQatar (Thousand Dollars)\nSaudi Arabia (Thousand Dollars)\nSyrian Arab Republic (Thousand Dollars)\nUnited Arab Emirates (Thousand Dollars)\nYemen (Thousand Dollars)\nYemen Democratic (Thousand Dollars)\nCanada (Thousand Dollars)\nPuerto Rico (Thousand Dollars)\nUnited States (Thousand Dollars)\nArgentina (Thousand Dollars)\nBrazil (Thousand Dollars)\nChile (Thousand Dollars)\nColombia (Thousand Dollars)\nEcuador (Thousand Dollars)\nMexico (Thousand Dollars)\nParaguay (Thousand Dollars)\nPeru (Thousand Dollars)\nUruguay (Thousand Dollars)\nVenezuela (Thousand Dollars)\nAustralia (Thousand Dollars)\nFiji (Thousand Dollars)\nNew Caledonia (Thousand Dollars)\nNew Zealand (Thousand Dollars)\nPapua New Guinea (Thousand Dollars)\nFrench Polynesia (Thousand Dollars)\nGuam (Thousand Dollars)\nSolomon Islands (Thousand Dollars)\nOther Countries In Oceania (Thousand Dollars)\n\n\n\n\n2022 Dec\n55000084.0\n6217.5\n39734.8\n4924.4\n3034.8\n1088.6\n4137.1\n432376.0\n31084.0\n402218.0\n809343.0\n131220.0\n177243.0\n128641.0\n25910.0\n1243341.0\n360897.0\n123349.0\n46151.0\n49367.0\n71732.0\n14099.0\n311701.0\n243227.0\n0.0\n47775.0\n53076.0\n683.0\n7434.0\n1248.0\n4546.0\n23443.0\n1217.0\n75900.0\n3740306.0\n5154779.0\n1116549.0\n1790423.0\n449544.0\n195030.0\n4643.0\n1958783.0\n2271626.0\n7403998.0\n2865718.0\n2768573.0\n29319.0\n6374198.0\n214.0\n294037.0\n1703023.0\n27931.0\n18692.0\n183923.0\n134049.0\n24163.0\n48818.0\n510.0\n105746.0\n15012.0\n46086.0\n1729.0\n18234.0\n64520.0\n102899.0\n260.0\n625765.0\n566.0\n0.0\n113586.0\n4234.0\n4671228.0\n22119.0\n227374.0\n8570.0\n12036.0\n7249.0\n224874.0\n563.0\n11791.0\n3822.0\n39.0\n1711317.0\n71371.0\n32546.0\n397788.0\n84412.0\n2428.0\n41150.0\n6018.0\n691400.0\n\n\n2022 Nov\n54162780.0\n6394.2\n37973.2\n5025.2\n3243.1\n1527.0\n4243.4\n756814.0\n29250.0\n324451.0\n927112.0\n126740.0\n33157.0\n167460.0\n4663.0\n1190952.0\n322583.0\n74028.0\n23462.0\n40047.0\n19921.0\n18936.0\n328426.0\n245180.0\n0.0\n63588.0\n63246.0\n1005.0\n2792.0\n3033.0\n6222.0\n25261.0\n2481.0\n65457.0\n4082822.0\n5557119.0\n1118234.0\n1762557.0\n392738.0\n280992.0\n2950.0\n1568729.0\n2504491.0\n5302426.0\n2165065.0\n2667565.0\n42902.0\n6773005.0\n272.0\n339772.0\n1467219.0\n34754.0\n12037.0\n111265.0\n133349.0\n21034.0\n57791.0\n1091.0\n122699.0\n8410.0\n44896.0\n2798.0\n16674.0\n172041.0\n106397.0\n62.0\n901306.0\n1322.0\n0.0\n96999.0\n56271.0\n4787358.0\n20687.0\n170736.0\n8683.0\n13459.0\n6212.0\n277119.0\n626.0\n8651.0\n947.0\n482.0\n1794035.0\n55584.0\n15556.0\n573747.0\n80267.0\n17142.0\n49396.0\n7120.0\n650476.0\n\n\n2022 Oct\n56576348.0\n6653.9\n40500.8\n5121.5\n3114.5\n1185.6\n4298.1\n350565.0\n67327.0\n529962.0\n1035273.0\n121392.0\n117698.0\n155578.0\n6334.0\n1189965.0\n357153.0\n81811.0\n32247.0\n60000.0\n65311.0\n21361.0\n362032.0\n220098.0\n0.0\n39889.0\n47942.0\n1321.0\n7758.0\n4156.0\n5236.0\n43738.0\n11506.0\n67063.0\n4075989.0\n6233818.0\n1229078.0\n1965567.0\n461908.0\n594395.0\n7222.0\n1730554.0\n2406706.0\n5137172.0\n2330102.0\n3034201.0\n21959.0\n7810503.0\n345.0\n465380.0\n1395949.0\n21845.0\n13355.0\n66674.0\n93118.0\n121596.0\n62302.0\n2586.0\n78544.0\n7316.0\n40943.0\n1148.0\n45914.0\n99750.0\n242241.0\n116.0\n573275.0\n700.0\n0.0\n110044.0\n49109.0\n5070780.0\n23605.0\n202358.0\n7161.0\n16109.0\n6672.0\n282600.0\n987.0\n7898.0\n1885.0\n676.0\n1628700.0\n70864.0\n38811.0\n499540.0\n102466.0\n34617.0\n76617.0\n7749.0\n658085.0\n\n\n2022 Sep\n62507132.0\n7091.9\n45605.1\n5155.1\n3453.3\n1201.8\n4065.4\n386724.0\n44793.0\n358786.0\n912066.0\n150911.0\n61522.0\n125791.0\n7283.0\n1181847.0\n379348.0\n149219.0\n35478.0\n60601.0\n45266.0\n21764.0\n579719.0\n248160.0\n0.0\n60851.0\n53511.0\n2292.0\n9914.0\n2474.0\n2679.0\n40588.0\n11752.0\n81269.0\n4373980.0\n5884698.0\n1367212.0\n2241114.0\n509268.0\n1504662.0\n27116.0\n2375792.0\n2481370.0\n7405741.0\n2896148.0\n2875136.0\n18310.0\n7133642.0\n453.0\n547112.0\n1817817.0\n30156.0\n15734.0\n226902.0\n191920.0\n41003.0\n64638.0\n548.0\n111282.0\n7608.0\n42895.0\n1082.0\n19112.0\n95392.0\n310368.0\n85.0\n813202.0\n1464.0\n0.0\n134488.0\n74606.0\n5278523.0\n52858.0\n274320.0\n44538.0\n20157.0\n11642.0\n231403.0\n1297.0\n10393.0\n969.0\n64.0\n1923247.0\n89525.0\n29359.0\n528450.0\n114715.0\n2743.0\n50413.0\n9035.0\n708359.0\n\n\n2022 Aug\n63363749.0\n7931.0\n44106.2\n6109.6\n3608.4\n1608.5\n5020.5\n570824.0\n42761.0\n454328.0\n1291942.0\n191678.0\n68379.0\n126344.0\n9801.0\n1512800.0\n498657.0\n100757.0\n41036.0\n36414.0\n30590.0\n18788.0\n440859.0\n229646.0\n0.0\n80433.0\n48436.0\n2590.0\n4005.0\n3363.0\n2361.0\n53328.0\n8491.0\n101311.0\n4684693.0\n6150507.0\n1654932.0\n2254888.0\n455447.0\n1087906.0\n3719.0\n2259090.0\n2311824.0\n6466344.0\n2412712.0\n2621213.0\n26644.0\n7548001.0\n232.0\n534857.0\n1593916.0\n32331.0\n16029.0\n132621.0\n121017.0\n48485.0\n70390.0\n810.0\n138756.0\n9380.0\n34121.0\n1380.0\n68168.0\n101056.0\n119219.0\n0.0\n975155.0\n1463.0\n0.0\n131512.0\n32665.0\n6094432.0\n43246.0\n258914.0\n12651.0\n17219.0\n10004.0\n258392.0\n283.0\n9050.0\n2100.0\n136.0\n2060828.0\n49089.0\n39826.0\n471479.0\n75179.0\n4153.0\n73882.0\n13854.0\n823524.0"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "Arrivals_by_air\n\nThe data is wide and short\nHighlight all the countries and select Pivot. Rename the column to Country and Arrivals\n\n\nPull the Month-Year to Columns and Arrivals to Rows and Country to Filters.\n\n\n\n\n\n\nThis plot reveals the pattern in the separate month. For the plot above, we observe that the August of every year always have high arrivals but the number is particular high in 2018.\n\n\n\n\n\n\n\n\n\nGood to see how the ranking change over time in comparison with other group."
  },
  {
    "objectID": "indexInclass.html#in-class-exercise-06-19-feb-2023",
    "href": "indexInclass.html#in-class-exercise-06-19-feb-2023",
    "title": "In-class Exercise",
    "section": "In-class Exercise 06 (19 Feb 2023)",
    "text": "In-class Exercise 06 (19 Feb 2023)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#table-merchandise-importsexport-by-regionmarket-monthly",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#table-merchandise-importsexport-by-regionmarket-monthly",
    "title": "Take-home Exercise 4",
    "section": "2.1 Table: Merchandise Imports/Export By Region/Market, Monthly",
    "text": "2.1 Table: Merchandise Imports/Export By Region/Market, Monthly\n\n\n\n\n\n\nCountry\nMonthYear\nLevel\nImportValue\n\n\n\n\nAmerica (Million Dollars)\n2022-12-01\nRegion\n6901.5\n\n\nAsia (Million Dollars)\n2022-12-01\nRegion\n33611.7\n\n\nEurope (Million Dollars)\n2022-12-01\nRegion\n7541.8\n\n\nOceania (Million Dollars)\n2022-12-01\nRegion\n1399.9\n\n\nAfrica (Million Dollars)\n2022-12-01\nRegion\n414.9\n\n\nEuropean Union (Million Dollars)\n2022-12-01\nRegion\n5058.8\n\n\nAmerica (Million Dollars)\n2022-11-01\nRegion\n7529.4\n\n\nAsia (Million Dollars)\n2022-11-01\nRegion\n34733.7\n\n\nEurope (Million Dollars)\n2022-11-01\nRegion\n7242.8\n\n\nOceania (Million Dollars)\n2022-11-01\nRegion\n664.4\n\n\n\n\n\n\n\n\nCountry\nMonthYear\nLevel\nExportValue\n\n\n\n\nAmerica (Million Dollars)\n2022-12-01\nRegion\n6217.5\n\n\nAsia (Million Dollars)\n2022-12-01\nRegion\n39734.8\n\n\nEurope (Million Dollars)\n2022-12-01\nRegion\n4924.4\n\n\nOceania (Million Dollars)\n2022-12-01\nRegion\n3034.8\n\n\nAfrica (Million Dollars)\n2022-12-01\nRegion\n1088.6\n\n\nEuropean Union (Million Dollars)\n2022-12-01\nRegion\n4137.1\n\n\nAmerica (Million Dollars)\n2022-11-01\nRegion\n6394.2\n\n\nAsia (Million Dollars)\n2022-11-01\nRegion\n37973.2\n\n\nEurope (Million Dollars)\n2022-11-01\nRegion\n5025.2\n\n\nOceania (Million Dollars)\n2022-11-01\nRegion\n3243.1"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#cycle-plot",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#cycle-plot",
    "title": "Take-home Exercise 4",
    "section": "4.6 Cycle Plot",
    "text": "4.6 Cycle Plot\nStep 1: Deriving month and year fields\n\n\nCode\ncycle <- wide\n\ncycle$month <- month(cycle$`MonthYear`)\ncycle$year <- year(cycle$`MonthYear`)\n\n\nStep 2: Extracting the target country\n\n\nCode\ncycle <- cycle %>%\n  subset(`Country`== \"China\") %>% \n  drop_na()\n\n\nStep 3: Plotting the cycle plot\n\n\nCode\nggplot() +\n  geom_line(data=cycle,\n            aes(x=year,\n                y=ImportValue,\n                group=month),\n            colour=\"steelblue\") +\n  geom_line(data=cycle,\n            aes(x=year,\n                y=ExportValue,\n                group=month),\n            colour=\"#ec5954\") +\n\n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Singapore-China trading pattern\",\n       subtitle = \"2016-2022\") +\n  xlab(\"\") +\n  ylab(\"Trading Volume\") +\n  theme(plot.title = element_text(size=15),\n        axis.text.x = element_text(size = 10, angle = 90),\n        axis.text.y = element_text(size = 10),\n        strip.text = element_text(size = 10))\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nSingapore-China trade\nFrom the cycle plot, we note that each month follows a similar pattern, with a dip in 2019-2020 and a rise beginning in 2021."
  },
  {
    "objectID": "1.html",
    "href": "1.html",
    "title": "Old Faithful",
    "section": "",
    "text": "Data on eruptions of the Old Faithful geyser in Yellowstone National Park, Wyoming, USA. The data was collected continuously from August 1st until August 15th, 1985.\n\n\n\nNumber of bins:\n\n\n\n\n\n\n\nThe data consists of 299 pairs of measurements, referring to the time interval between the starts of successive eruptions and the duration of the subsequent eruption.\nClick the Code button above to see the source code for this example."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#interactive-dashboard",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#interactive-dashboard",
    "title": "Take-home Exercise 4",
    "section": "3.2 Interactive Dashboard",
    "text": "3.2 Interactive Dashboard\n\n\nCode\n# Prepare data for dashboard\nline <- long %>% \n  subset(Type == \"ImportValue\"|Type == \"ExportValue\")\n\n# Building interactive filters\nd <- highlight_key(line)\n\nfilter_tools <- htmltools::div(\n  filter_select(id = \"filter\", \n                label = \"Select Country\", \n                sharedData = d,\n                group = ~Country,\n                multiple=FALSE),\n  \n  filter_slider(id = \"period\", \n                label = \"Select period\", \n                sharedData = d, \n                column = ~year(MonthYear),\n                width = \"100%\"),\n  \n  filter_slider(id = \"value\", \n                label = \"Select Value\", \n                sharedData = d, \n                column = ~Value,\n                width = \"100%\"),\n  \n  filter_checkbox(id = \"variable\", \n                  label = \"Select variable\", \n                  sharedData = d,\n                  group = ~Type,\n                  inline = FALSE))\n\nvline <- function(x = 0, color = \"steelblue\") {\n  list(\n    type = \"line\",\n    y0 = 0, y1 = 1,\n    yref = \"paper\",\n    x0 = x, x1 = x,\n    line = list(color = color, dash=\"dot\")\n  )\n}\n\n# plotting interactive scatter plot using plotly\np <- plot_ly(data=d,\n             type= \"scatter\",\n             mode= \"line\",\n             x= ~MonthYear,\n             y= ~Value,\n             color= ~Type,\n             colors= \"Accent\",\n             # fill = 'tonexty',\n             text= ~paste(\"Country:\",`Country`,\n                          \"\\nMonth Year:\", `MonthYear`,\n                          \"\\nType:\",`Type`)) %>%\n  \n  layout(title = list(text=\"<b>Import/Export trend</b>\"),\n         hoverlabel = list(align = \"left\"),\n         legend = list(orientation = \"h\", y = 1, x = 0),\n         shapes = vline(\"2020\"),\n         xaxis = list(title=\"Month Year\"),\n         yaxis = list(title=\"Value\"))\n\ngg <- highlight(p, \"plotly_selected\")\n\n# Using crosstalk bscols to put all 3 elements (filter, scatter plot, datatable) together.\ncrosstalk::bscols(filter_tools,gg,DT::datatable(d, class= \"display\",\n                                                filter=list(position=\"top\", clear=FALSE),\n                                                options=list(pageLength = 10,scrollY = TRUE,\n                                                             iDisplayLength = 25)),\n                  widths = c(4, 8, 12),\n                  annotations = list(caption = \"Data from Department of Statistics, Singapore (DOS)\"))\n\n\n\n\n\n\n\n\nSelect Country\n\n\n\n\n\n\nSelect period\n\n\n\n\nSelect Value\n\n\n\n\nSelect variable\n\n\n\n\nExportValue\n\n\n\n\n\nImportValue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData from Department of Statistics, Singapore (DOS)\n\n\n\n\n\nfunction filter_default() {\n    document.getElementById(\"filter\").getElementsByClassName(\"selectized\") \n[0].selectize.setValue(\"China (Thousand Dollars)\", false);\n }\nwindow.onload = filter_default;"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#scatter-plot-dashboard",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#scatter-plot-dashboard",
    "title": "Take-home Exercise 4",
    "section": "4.2 Scatter plot Dashboard",
    "text": "4.2 Scatter plot Dashboard\nStep 1. Create scatter plot with plotly\n\n\nCode\n# Plot scatter plot\nfig <- wide %>%\n  plot_ly(\n    x = ~`ImportValue`,\n    y = ~`ExportValue`,\n    color = ~`Country`,\n    frame = ~as.character(`MonthYear`, format = \"%Y-%m\"),\n    size = ~`Total`,\n    sizes = c(10,1000),\n    text= ~paste(\"Country:\",`Country`,\n                 \"\\nImport Value:\", `ImportValue`, \" Thousand Dollars\",\n                 \"\\nExport Value:\", `ExportValue`, \" Thousand Dollars\",\n                 \"\\nMonth Year:\", `MonthYear`), \n    hoverinfo = \"text\",\n    type = 'scatter',\n    mode = 'markers'\n  )\n\n\nStep 2. Set up layout\n\n\nCode\n# Create the diagonal line\ndline <- function(color = \"steelblue\") {\n  list(\n    type = \"line\",\n    yref = \"paper\",\n    xref = \"paper\",\n    y0 = 0, y1 = 1,\n    x0 = 0, x1 = 1,\n    line = list(color = color, dash=\"dot\")\n  )\n}\n\n# Setup layout\nfig <- fig %>% \n  layout(title = list(text=\"MERCHANDISE TRADE PERFORMANCE WITH TRADING PARTNERS\"),\n         subtitle = \"2016-2022\",\n         hoverlabel = list(align = \"left\"),\n         shapes = dline(),\n         legend = list(orientation = \"h\", y = 1, x = 0),\n         showlegend = FALSE,\n         xaxis = list(title=\"Import Value\", range = list(0, 10000000)),\n         yaxis = list(title=\"Export Value\", range = list(0, 10000000)),\n         width=650,\n         height=650\n  )\n\n\nStep 3. Set up animation\n\n\nCode\nfig <- fig %>% \n  animation_opts(\n    500, easing = \"linear\", redraw = FALSE\n  )\n\n# Animation slider\nfig <- fig %>% animation_slider(\n  currentvalue = list(prefix = \"MONTH-YEAR :\", font = list(color=\"red\"))\n)\n\nfig\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nInsights from scatter plot\n\nMainland China is range with a High Import - High Export spectrum. From 2020 to 2021, there was a significant increase in value, particularly export value.\nTaiwan import rate has continuously grown but we can observed significant jump of import value in 2021 after COVID."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#table-wide-table",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#table-wide-table",
    "title": "Take-home Exercise 4",
    "section": "2.1 Table: Wide table",
    "text": "2.1 Table: Wide table\n\n\n\n\n\n\n\n\n\n\n\n\nCountry\nMonthYear\nLevel\nType\nValue\n\n\n\n\nAmerica (Million Dollars)\n2022-12-01\nRegion\nImportValue\n6901.5\n\n\nAsia (Million Dollars)\n2022-12-01\nRegion\nImportValue\n33611.7\n\n\nEurope (Million Dollars)\n2022-12-01\nRegion\nImportValue\n7541.8\n\n\nOceania (Million Dollars)\n2022-12-01\nRegion\nImportValue\n1399.9\n\n\nAfrica (Million Dollars)\n2022-12-01\nRegion\nImportValue\n414.9\n\n\nEuropean Union (Million Dollars)\n2022-12-01\nRegion\nImportValue\n5058.8\n\n\nAmerica (Million Dollars)\n2022-11-01\nRegion\nImportValue\n7529.4\n\n\nAsia (Million Dollars)\n2022-11-01\nRegion\nImportValue\n34733.7\n\n\nEurope (Million Dollars)\n2022-11-01\nRegion\nImportValue\n7242.8\n\n\nOceania (Million Dollars)\n2022-11-01\nRegion\nImportValue\n664.4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCountry\nMonthYear\nLevel\nImportValue\nExportValue\nDiff\nTotal\n\n\n\n\nAmerica (Million Dollars)\n2022-12-01\nRegion\n6901.5\n6217.5\n684.0\n13119.0\n\n\nAsia (Million Dollars)\n2022-12-01\nRegion\n33611.7\n39734.8\n-6123.1\n73346.5\n\n\nEurope (Million Dollars)\n2022-12-01\nRegion\n7541.8\n4924.4\n2617.4\n12466.2\n\n\nOceania (Million Dollars)\n2022-12-01\nRegion\n1399.9\n3034.8\n-1634.9\n4434.7\n\n\nAfrica (Million Dollars)\n2022-12-01\nRegion\n414.9\n1088.6\n-673.7\n1503.5\n\n\nEuropean Union (Million Dollars)\n2022-12-01\nRegion\n5058.8\n4137.1\n921.7\n9195.9\n\n\nAmerica (Million Dollars)\n2022-11-01\nRegion\n7529.4\n6394.2\n1135.2\n13923.6\n\n\nAsia (Million Dollars)\n2022-11-01\nRegion\n34733.7\n37973.2\n-3239.5\n72706.9\n\n\nEurope (Million Dollars)\n2022-11-01\nRegion\n7242.8\n5025.2\n2217.6\n12268.0\n\n\nOceania (Million Dollars)\n2022-11-01\nRegion\n664.4\n3243.1\n-2578.7\n3907.5"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#table-wide-merchandise-importsexport-by-regionmarket-monthly",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#table-wide-merchandise-importsexport-by-regionmarket-monthly",
    "title": "Take-home Exercise 4",
    "section": "2.1 Table Wide : Merchandise Imports/Export By Region/Market, Monthly",
    "text": "2.1 Table Wide : Merchandise Imports/Export By Region/Market, Monthly\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCountry\nMonthYear\nLevel\nImportValue\nExportValue\nDiff\nTotal\n\n\n\n\nAmerica\n2022-12-01\nRegion\n6901.5\n6217.5\n684.0\n13119.0\n\n\nAsia\n2022-12-01\nRegion\n33611.7\n39734.8\n-6123.1\n73346.5\n\n\nEurope\n2022-12-01\nRegion\n7541.8\n4924.4\n2617.4\n12466.2\n\n\nOceania\n2022-12-01\nRegion\n1399.9\n3034.8\n-1634.9\n4434.7\n\n\nAfrica\n2022-12-01\nRegion\n414.9\n1088.6\n-673.7\n1503.5"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#table-long-merchandise-importsexport-by-regionmarket-monthly",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#table-long-merchandise-importsexport-by-regionmarket-monthly",
    "title": "Take-home Exercise 4",
    "section": "2.2 Table Long : Merchandise Imports/Export By Region/Market, Monthly",
    "text": "2.2 Table Long : Merchandise Imports/Export By Region/Market, Monthly\n\n\n\n\n\nCountry\nMonthYear\nLevel\nType\nValue\n\n\n\n\nAmerica\n2022-12-01\nRegion\nImportValue\n6901.5\n\n\nAsia\n2022-12-01\nRegion\nImportValue\n33611.7\n\n\nEurope\n2022-12-01\nRegion\nImportValue\n7541.8\n\n\nOceania\n2022-12-01\nRegion\nImportValue\n1399.9\n\n\nAfrica\n2022-12-01\nRegion\nImportValue\n414.9"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#line-plot",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#line-plot",
    "title": "Take-home Exercise 4",
    "section": "3.1 Line Plot",
    "text": "3.1 Line Plot\nStep 1. Prepare data for line plot of Singapore\n\n\nCode\nsingapore <- wide %>% \n  drop_na() %>% \n  group_by(MonthYear) %>% \n  summarise(import = sum(ImportValue), export = sum(ExportValue))\n\n\nsingaporeribbon <- gather(singapore , \"Type\", \"Value\",  -`MonthYear`)\n\n\nStep 2. Prepare data for line plot of Singapore\n\n\nCode\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = singaporeribbon,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `import`, \n                 ymax = `export`, \n                 fill = `import`>`export`), \n             data = singapore, \n             alpha = 0.6, \n             method = 'line')+ \n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 65000000,\n           alpha = .1,\n           fill = \"yellow\")\n\n\n\n\n\nStep 3. Prepare data for line plot of China\n\n\nCode\nbraid <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"China\")\n\nribbon <- gather(braid , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\n\nStep 2. Plot line plot of China\n\n\nCode\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid, \n             alpha = 0.6, \n             method = 'line')+ \n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nInsights from line plot\n\nMainland China is range with a High Import - High Export spectrum. From 2020 to 2021, there was a significant increase in value, particularly export value.\nTaiwan import rate has continuously grown but we can observed significant jump of import value in 2021 after COVID."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#heat-map",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#heat-map",
    "title": "Take-home Exercise 4",
    "section": "4.5 Heat Map",
    "text": "4.5 Heat Map\nStep 1. Prepare data by selecting top difference between import and export\n\n\nCode\nheatmap <- wide %>% \n  drop_na() %>% \n  group_by(Country) %>% \n  mutate(totaldiff = sum(Diff)) %>% \n  arrange(totaldiff) %>% \n  subset(Country == \"China\" | Country == \"Malaysia\" | Country == \"Taiwan\" | Country == \"Hong Kong\" | Country == \"Indonesia\" ) \n\n\nStep 2. Plot heatmap\n\n\nCode\np <-  heatmap %>% \n  ggplot(aes(x = MonthYear, y = reorder(Country,totaldiff), fill= Diff)) +\n  geom_tile_interactive(tooltip = c(paste( \"Country:\", heatmap$Country,\n                                           \"\\n Import:\", heatmap$ImportValue,\n                                           \"\\n Export:\", heatmap$ExportValue,\n                                           \"\\n Balance:\" , heatmap$Diff,\n                                           \"\\n Month:\", heatmap$MonthYear))) +\n  scale_fill_distiller(palette = \"RdPu\") +\n  theme_ipsum() +\n  geom_tile() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+\n  labs(title = \"Trade balance\", x=\"\", y=\"\") \n  \ngirafe(\n  ggobj = p,\n  width_svg = 15,\n  height_svg = 3\n)\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nInsights from heatmap\n\nMainland China is range with a High Import - High Export spectrum. From 2020 to 2021, there was a significant increase in value, particularly export value.\nTaiwan import rate has continuously grown but we can observed significant jump of import value in 2021 after COVID."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#slope-graph",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#slope-graph",
    "title": "Take-home Exercise 4",
    "section": "4.3 Slope Graph",
    "text": "4.3 Slope Graph\nStep 1. Prepare data for slope graph\n\n\nCode\n# Import\nslopeimport <- wide %>% \n  subset(Level == \"Region\") %>% \n  mutate(month = month(MonthYear)) %>% \n  mutate(year = year(MonthYear)) %>% \n  drop_na() %>% \n  group_by(Country, year) %>% \n  summarise(sumyear = sum(ImportValue)) %>% \n  mutate(Year = factor(year)) %>% \n  arrange(`sumyear`)\n\n#Export\nslopeexport <- wide %>% \n  subset(Level == \"Region\") %>% \n  mutate(month = month(MonthYear)) %>% \n  mutate(year = year(MonthYear)) %>% \n  drop_na() %>% \n  group_by(Country, year) %>% \n  summarise(sumyear = sum(ExportValue)) %>% \n  mutate(Year = factor(year)) %>% \n  arrange(`sumyear`)\n\n\nStep 2. Create slope plot\n\n\nCode\n# Create slope plot for import\np <- newggslopegraph(dataframe = slopeimport, \n                Times = `Year`, \n                Measurement = `sumyear`, \n                Grouping = `Country`,\n                Title = \"Total Import per Year by Region\",\n                SubTitle = \"2016-2022\",\n                Caption = NULL)\n\np + annotate(\"rect\", \n             xmin = \"2020\", \n             xmax = \"2022\", \n             ymin = -1, \n             ymax = 600000,\n             alpha = .1,\n             fill = \"yellow\")\n# Create slope plot for export\np2 <- newggslopegraph(dataframe = slopeexport, \n                Times = `Year`, \n                Measurement = `sumyear`, \n                Grouping = `Country`,\n                Title = \"Total Export per Year by Region\",\n                SubTitle = \"2016-2022\",\n                Caption = NULL)\n\np2 + annotate(\"rect\", \n             xmin = \"2020\", \n             xmax = \"2022\", \n             ymin = -1, \n             ymax = 600000,\n             alpha = .1,\n             fill = \"yellow\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nInsights from slope graph\n\nMainland China is range with a High Import - High Export spectrum. From 2020 to 2021, there was a significant increase in value, particularly export value.\nTaiwan import rate has continuously grown but we can observed significant jump of import value in 2021 after COVID."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "title": "In-class Exercise 7",
    "section": "",
    "text": "Geometric data -> polygon, point, line\neach geographic is used to represent building, location\nDifferent representation (i.e. point, polygon, polyline) will be used differently. Point has only 1 dimension and will limit the parameter that we could visual i.e. size, color\nAlso depend on the data you have\nWhen working with the geographic data, you must know your data first what are available.\n\n\n\nCoordinate system will ensure how the map will be referenced together. However there are many types of coordinate system\n\nGeographic coordinate system (similar to our mobile phone, navigation satellite) called WGS84. Latitude/Longtitude is used as a reference. Not good for measure distance because the measure is on surface of the sphere.\nprojected coordinate system Different country has different projection system. Vietnam which the country is long has 2 projection systems. As well as Indonesia which is wide also has 2 projection systems.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\npacman::p_load(sf, tmap, tidyverse)\n\nRead data\n\nsgpools <- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME                            ADDRESS POSTC…¹ XCOORD YCOORD OUTLE…² Gp1Gp…³\n   <chr>                           <chr>     <dbl>  <dbl>  <dbl> <chr>     <dbl>\n 1 Livewire (Marina Bay Sands)     2 Bayf…   18972 30842. 29599. Branch        5\n 2 Livewire (Resorts World Sentos… 26 Sen…   98138 26704. 26526. Branch       11\n 3 SportsBuzz (Kranji)             Lotus …  738078 20118. 44888. Branch        0\n 4 SportsBuzz (PoMo)               1 Sele…  188306 29777. 31382. Branch       44\n 5 Prime Serangoon North           Blk 54…  552542 32239. 39519. Branch        0\n 6 Singapore Pools Woodlands Cent… 1A Woo…  731001 21012. 46987. Branch        3\n 7 Singapore Pools 64 Circuit Rd … Blk 64…  370064 33990. 34356. Branch       17\n 8 Singapore Pools 88 Circuit Rd … Blk 88…  370088 33847. 33976. Branch       16\n 9 Singapore Pools Anchorvale Rd … Blk 30…  540308 33910. 41275. Branch       21\n10 Singapore Pools Ang Mo Kio N2 … Blk 20…  560202 29246. 38943. Branch       25\n# … with 296 more rows, and abbreviated variable names ¹​POSTCODE,\n#   ²​`OUTLET TYPE`, ³​`Gp1Gp2 Winnings`\n\n\n\nsgpools_sf <- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                ADDRESS POSTC…¹ OUTLE…² Gp1Gp…³            geometry\n * <chr>               <chr>     <dbl> <chr>     <dbl>         <POINT [m]>\n 1 Livewire (Marina B… 2 Bayf…   18972 Branch        5 (30841.56 29598.56)\n 2 Livewire (Resorts … 26 Sen…   98138 Branch       11  (26703.87 26525.7)\n 3 SportsBuzz (Kranji) Lotus …  738078 Branch        0 (20117.93 44888.06)\n 4 SportsBuzz (PoMo)   1 Sele…  188306 Branch       44 (29776.95 31382.18)\n 5 Prime Serangoon No… Blk 54…  552542 Branch        0 (32238.69 39518.76)\n 6 Singapore Pools Wo… 1A Woo…  731001 Branch        3 (21012.15 46987.32)\n 7 Singapore Pools 64… Blk 64…  370064 Branch       17 (33990.39 34355.53)\n 8 Singapore Pools 88… Blk 88…  370088 Branch       16 (33847.38 33976.04)\n 9 Singapore Pools An… Blk 30…  540308 Branch       21 (33909.93 41274.52)\n10 Singapore Pools An… Blk 20…  560202 Branch       25  (29246.06 38942.6)\n# … with 296 more rows, and abbreviated variable names ¹​POSTCODE,\n#   ²​`OUTLET TYPE`, ³​`Gp1Gp2 Winnings`\n\n\n\ntmap_mode(\"view\")\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "indexInclass.html#in-class-exercise-07-25-feb-2023",
    "href": "indexInclass.html#in-class-exercise-07-25-feb-2023",
    "title": "In-class Exercise",
    "section": "In-class Exercise 07 (25 Feb 2023)",
    "text": "In-class Exercise 07 (25 Feb 2023)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#choropleth-map",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#choropleth-map",
    "title": "Take-home Exercise 4",
    "section": "4.6 Choropleth Map",
    "text": "4.6 Choropleth Map\nStep 1. Prepare data for Choropleth map\n\n\nCode\ndata(\"World\")\nmap <- World %>% \n  select(iso_a3, name, sovereignt, geometry)\n\nmap$name <- as.character(map$name)\nmap$sovereignt <- as.character(map$sovereignt)\n\n\nStep 2. Create animated map\n\n\nCode\ndata_map_area <- map %>% \n  full_join(wide, by = c('sovereignt' = 'Country')) %>% \n  drop_na()\n                          \ntmap_mode(\"view\")\nchoropleth <- tm_shape(data_map_area) +\n  tm_polygons(\"Total\") +\n  tm_facets(along = \"MonthYear\", free.coords = FALSE)\n\ntmap_animation(choropleth , filename = \"choropleth.gif\", delay = 25)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#section",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#section",
    "title": "Take-home Exercise 4",
    "section": "3.4 ",
    "text": "3.4"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#reveal-the-trend-of-total-line-plot",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#reveal-the-trend-of-total-line-plot",
    "title": "Take-home Exercise 4",
    "section": "3.1 Reveal the trend of total Line Plot",
    "text": "3.1 Reveal the trend of total Line Plot\nStep 1. Prepare data for line plot of Singapore\n\n\nCode\nsingapore <- wide %>% \n  subset((Country == \"Total Merchandise Imports\"|Country == \"Total Merchandise Exports\") & Level == \"Country\") %>% \n  group_by(MonthYear) \n\nsingaporeribbon <- singapore %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  gather(\"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`) %>% \n  drop_na()\n\n\nStep 2. Prepare data for line plot of Singapore\n\n\nCode\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = singaporeribbon,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`),\n             show.legend = FALSE,\n             data = singapore, \n             alpha = 0.6, \n             method = 'line') +\n  \n  labs(title = \"Singapore bi-lateral trade\", \n       subtitle = \"2016-2022\",\n       x = 'Month Year', y = 'Trade Value'\n  ) +\n  \n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 65000000,\n           alpha = .1,\n           fill = \"yellow\") +\n  \n  annotate(\"text\",\n           label = \"Covid outbreak\", \n           x = as.Date(\"2021-06-01\"),\n           y=25000000) \n\n\n\n\n\nStep 3. Prepare data for line plot of China\n\n\nCode\nbraid <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"China\")\n\nribbon <- gather(braid , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\n\nStep 2. Plot line plot of China\n\n\nCode\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid, \n             alpha = 0.6, \n             method = 'line')+ \n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nInsights from line plot\n\nMainland China is range with a High Import - High Export spectrum. From 2020 to 2021, there was a significant increase in value, particularly export value.\nTaiwan import rate has continuously grown but we can observed significant jump of import value in 2021 after COVID."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#uncover-the-singapore-bi-lateral-trend-over-covid-outbreak",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#uncover-the-singapore-bi-lateral-trend-over-covid-outbreak",
    "title": "Take-home Exercise 4",
<<<<<<< HEAD
    "section": "3.1 Uncover the Singapore Bi-lateral trend over Covid outbreak",
    "text": "3.1 Uncover the Singapore Bi-lateral trend over Covid outbreak\nWe begin with a ribbon plot to illustrate the overall pattern of Singapore international trade over time. The function ggbraid helps distinguish between trade surplus and trade deficit by filling the region between two alternating lines with two different colors.\nStep 1. Prepare data for line plot of Singapore\n\n\nCode\nsingapore <- wide %>% \n  subset((Country == \"Total Merchandise Imports\"|Country == \"Total Merchandise Exports\") \n         & Level == \"Country\") %>% \n  group_by(MonthYear) \n\nsingaporeribbon <- singapore %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  gather(\"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`) %>% \n  drop_na()\n\n\nStep 2. Prepare data for line plot of Singapore\n\n\nCode\nhues <- scales::hue_pal()(2) \np <- ggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = singaporeribbon,\n            show.legend = FALSE)  +\n  \n  labs(title = \"Singapore Bi-lateral Trade Trend\", \n       subtitle = \"2016-2022\",\n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  \n  annotate(\"segment\", \n           x = as.Date(\"2020-01-01\"), \n           xend = as.Date(\"2020-01-01\"), \n           y = 0, \n           yend = 70000000,\n           colour = \"red\") +\n  annotate(\"text\",\n           label = \"Covid outbreak\", \n           x = as.Date(\"2020-12-01\"),\n           y=25000000,\n           color = \"red\") +\n  annotate(\"text\", \n           x = as.Date(\"2018-06-01\"), \n           y = 60000000, size = 4, \n           label = \"Export > Import\", \n           hjust = 0, \n           color = hues[1])\np1 <- p+\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`),\n             show.legend = FALSE,\n             data = singapore, \n             alpha = 0.6, \n             method = 'line')\n\np1\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nAs a result of the COVID-19 epidemic, Singapore’s international commerce dropped in 2020\nSingapore has a positive trade balance, or a trade surplus, according to the bilateral trend from 2016 to 2022. Prior to the start of the COVID-19 pandemic in 2020, Singapore’s international trade growth was robust from 2016 to 2019, but it began to weaken in 2019. Due to the outbreak of the COVID-19 pandemic in May 2020, the rate drops dramatically before quickly returning."
=======
    "section": "4.1 Uncover the Singapore Bi-lateral trend over Covid outbreak",
    "text": "4.1 Uncover the Singapore Bi-lateral trend over Covid outbreak\nWe begin with a ribbon plot to illustrate the overall pattern of Singapore international trade over time. The function ggbraid helps distinguish between trade surplus and trade deficit by filling the region between two alternating lines with two different colors.\nStep 1. Prepare data for line plot of Singapore\n\n\nCode\nsingapore <- wide %>% \n  subset((Country == \"Total Merchandise Imports\"|Country == \"Total Merchandise Exports\") \n         & Level == \"Country\") %>% \n  group_by(MonthYear) \n\nsingaporeribbon <- singapore %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  gather(\"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`) %>% \n  drop_na()\n\n\nStep 2. Prepare data for line plot of Singapore\n\n\nCode\np <- ggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = singaporeribbon,\n            show.legend = FALSE)  +\n  \n  labs(title = \"Singapore Bi-lateral Trade Trend\", \n       subtitle = \"2016-2022\",\n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  \n  annotate(\"segment\", \n           x = as.Date(\"2020-01-01\"), \n           xend = as.Date(\"2020-01-01\"), \n           y = 0, \n           yend = 70000000,\n           colour = \"red\") +\n  \n  annotate(\"text\",\n           label = \"Covid outbreak\", \n           x = as.Date(\"2020-12-01\"),\n           y=25000000,\n           color = \"red\") \np1 <- p+\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`),\n             show.legend = FALSE,\n             data = singapore, \n             alpha = 0.6, \n             method = 'line')\n\np1\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nAs a result of the COVID-19 epidemic, Singapore’s international commerce dropped in 2020\nSingapore has a positive trade balance, or a trade surplus, according to the bilateral trend from 2016 to 2022. Prior to the start of the COVID-19 pandemic in 2020, Singapore’s international trade growth was robust from 2016 to 2019, but it began to weaken in 2019. Due to the outbreak of the COVID-19 pandemic in May 2020, the rate drops dramatically before quickly returning."
<<<<<<< HEAD
>>>>>>> parent of 687a304 (take-home exercise04)
=======
>>>>>>> parent of 687a304 (take-home exercise04)
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#merchandise-trade-performance-with-trading-partners",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#merchandise-trade-performance-with-trading-partners",
    "title": "Take-home Exercise 4",
    "section": "4.2 Merchandise trade performance with trading partners",
    "text": "4.2 Merchandise trade performance with trading partners\nTo illustrate the trade balance with all of Singapore’s trading partners, the bubble plot between import and export is chosen. The X-axis shows Singapore’s import value, while the Y-axis shows Singapore’s export value. Each bubble is colored differently depending on the country it represents.\nThe size of the bubbles indicates the total value of Singapore’s merchandise trade with the trading partner. If the bubble’s center point rises below the line, Singapore’s imports from the trade partner exceed Singapore’s exports. If the bubble’s center point falls beyond the line, Singapore’s exports to the trading partner exceed Singapore’s imports.\nThe graph is animated to emphasize the fluctuating equilibrium over time.\nStep 1. Create scatter plot with plotly\n\n\nCode\n# Plot scatter plot\nfig <- wide %>%\n  plot_ly(\n    x = ~`ImportValue`,\n    y = ~`ExportValue`,\n    color = ~`Country`,\n    frame = ~as.character(`MonthYear`, format = \"%Y-%m\"),\n    size = ~`Total`,\n    sizes = c(10,1000),\n    text= ~paste(\"Country:\",`Country`,\n                 \"\\nImport Value:\", `ImportValue`, \" Thousand Dollars\",\n                 \"\\nExport Value:\", `ExportValue`, \" Thousand Dollars\",\n                 \"\\nMonth Year:\", `MonthYear`), \n    hoverinfo = \"text\",\n    type = 'scatter',\n    mode = 'markers'\n  )\n\n\nStep 2. Set up layout\n\n\nCode\n# Create the diagonal line\ndline <- function(color = \"steelblue\") {\n  list(\n    type = \"line\",\n    yref = \"paper\",\n    xref = \"paper\",\n    y0 = 0, y1 = 1,\n    x0 = 0, x1 = 1,\n    line = list(color = color, dash=\"dot\")\n  )\n}\n\n# Setup layout\nfig <- fig %>% \n  layout(title = list(text=\"MERCHANDISE TRADE PERFORMANCE WITH TRADING PARTNERS\"),\n         subtitle = \"2016-2022\",\n         hoverlabel = list(align = \"left\"),\n         shapes = dline(),\n         legend = list(orientation = \"h\", y = 1, x = 0),\n         showlegend = FALSE,\n         xaxis = list(title=\"Import Value\", range = list(0, 10000000)),\n         yaxis = list(title=\"Export Value\", range = list(0, 10000000)),\n         width=650,\n         height=650\n  )\n\n\nStep 3. Set up animation\n\n\nCode\nfig <- fig %>% \n  animation_opts(\n    500, easing = \"linear\", redraw = FALSE\n  )\n\n# Animation slider\nfig <- fig %>% animation_slider(\n  currentvalue = list(prefix = \"MONTH-YEAR :\", font = list(color=\"red\"))\n)\n\nfig\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nInsights from scatter plot\n\nMainland China is range with a High Import - High Export spectrum. From 2020 to 2021, there was a significant increase in value, particularly export value.\nTaiwan import rate has continuously grown but we can observed significant jump of import value in 2021 after COVID.\n\n\n\nStep 3. Prepare data for line plot of the selected countries\n\n\nCode\nbraid <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"China\")\n\nribbon <- gather(braid , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid2 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Malaysia\")\n\nribbon2 <- gather(braid2 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid3 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"United States\")\n\nribbon3 <- gather(braid3 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\n\nStep 2. Plot line plot of the selected countries\n\n\nCode\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid, \n             alpha = 0.6, \n             method = 'line')+   \n  labs(title = \"China\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon2,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid2, \n             alpha = 0.6, \n             method = 'line')+ \n  labs(title = \"Malaysia\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon3,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid3, \n             alpha = 0.6, \n             method = 'line')+ \n  labs(title = \"United States\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nChina’s import and export volume declined sharply in the beginning of 2020\nChina"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#merchandise-trade-performance-with-major-trading-partners",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#merchandise-trade-performance-with-major-trading-partners",
    "title": "Take-home Exercise 4",
<<<<<<< HEAD
    "section": "3.2 Merchandise trade performance with major trading partners",
    "text": "3.2 Merchandise trade performance with major trading partners\nTo illustrate the trade balance with all of Singapore’s trading partners, the bubble plot between import and export is chosen. The X-axis shows Singapore’s import value, while the Y-axis shows Singapore’s export value. Each bubble is colored differently depending on the country it represents.\nThe size of the bubbles indicates the total value of Singapore’s merchandise trade with the trading partner. If the bubble’s center point rises below the line, Singapore’s imports from the trade partner exceed Singapore’s exports. If the bubble’s center point falls beyond the line, Singapore’s exports to the trading partner exceed Singapore’s imports.\nThe graph is animated to emphasize the fluctuating equilibrium over time. Only major trading partners are depicted on the graph to reflect the effect of the key contributors.\nStep 1. Create scatter plot with plotly\n\n\nCode\n# Plot scatter plot\nscatter <- wide %>% \n  subset(Country == \"China\" | Country == \"Malaysia\" | Country == \"Taiwan\" | Country == \"Hong Kong\" | Country == \"Indonesia\" )\n\nfig <- scatter %>%\n  plot_ly(\n    x = ~`ImportValue`,\n    y = ~`ExportValue`,\n    color = ~`Country`,\n    frame = ~as.character(`MonthYear`, format = \"%Y-%m\"),\n    size = ~`Total`,\n    sizes = c(1,10000),\n    text= ~paste(\"Country:\",`Country`,\n                 \"\\nImport Value:\", `ImportValue`, \" Thousand Dollars\",\n                 \"\\nExport Value:\", `ExportValue`, \" Thousand Dollars\",\n                 \"\\nTotal:\", `Total`,\n                 \"\\nMonth Year:\", `MonthYear`), \n    hoverinfo = \"text\",\n    type = 'scatter',\n    mode = 'markers'\n  )\n\n\nStep 2. Set up layout\n\n\nCode\n# Create the diagonal line\ndline <- function(color = \"steelblue\") {\n  list(\n    type = \"line\",\n    yref = \"paper\",\n    xref = \"paper\",\n    y0 = 0, y1 = 1,\n    x0 = 0, x1 = 1,\n    line = list(color = color, dash=\"dot\")\n  )\n}\n\n# Setup layout\nfig <- fig %>% \n  layout(title = list(text=\"MERCHANDISE TRADE PERFORMANCE WITH MAJOR TRADING PARTNERS\"),\n         subtitle = \"2016-2022\",\n         hoverlabel = list(align = \"left\"),\n         shapes = dline(),\n         legend = list(orientation = \"h\", y = 1, x = 0),\n         showlegend = FALSE,\n         xaxis = list(title=\"Import Value\", range = list(0, 10000000)),\n         yaxis = list(title=\"Export Value\", range = list(0, 10000000)),\n         width=650,\n         height=650\n  )\n\n\nStep 3. Set up animation\n\n\nCode\nfig <- fig %>% \n  animation_opts(\n    500, easing = \"linear\", redraw = FALSE\n  )\n\n# Animation slider\nfig <- fig %>% animation_slider(\n  currentvalue = list(prefix = \"MONTH-YEAR :\", font = list(color=\"red\"))\n)\n\nfig\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nChina’s import and export volume declined sharply in the beginning of 2020\nChina bubble declines along the diagonal from December 2019 until February 2020. This implies a significant decline in both imports and exports from China within the specified time frame. But, it returned shortly thereafter.\nWith a similar trajectory to China, the bubble of Malaysia in December 2019 proceeded diagonally downward. Yet, it continued to decline until mid-2020. \nIn May of 2020, the impact of Indonesia is clearly seen by a 25% decline in overall volume.\nUnlike exports to other partners, Singapore’s exports to Hong Kong do not appear to be as affected. However, a faster increase in exports to Hong Kong is observed in 2021.\n\n\nWe employ the ribbon chart once again to assess the impact of Covid-19 on Singapore’s most major trading partners.\n\n\nCode\nbraid <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"China\")\n\nribbon <- gather(braid , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid2 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Malaysia\")\n\nribbon2 <- gather(braid2 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid3 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Taiwan\")\n\nribbon3 <- gather(braid3 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid4 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Hong Kong\")\n\nribbon4 <- gather(braid4 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid5 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Indonesia\")\n\nribbon5 <- gather(braid5 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+   \n  labs(title = \"Singapore trade balance trend with China\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon2,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid2, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Malaysia\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2021-01-01\"), \n           y = 2500000, size = 4, \n           label = \"Import > Export\", \n           hjust = 0, \n           color = hues[2])\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon3,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`<`ExportValue`), \n             data = braid3, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Taiwan\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2019-01-01\"), \n           y = 1000000, size = 4, \n           label = \"Import > Export\", \n           hjust = 0, \n           color = hues[2])\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon4,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid4, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Hong Kong\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2019-01-01\"), \n           y = 9000000, size = 4, \n           label = \"Export > Import\", \n           hjust = 0, \n           color = hues[1])\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon5,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid5, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Indonesia\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2019-01-01\"), \n           y = 9000000, size = 4, \n           label = \"Export > Import\", \n           hjust = 0, \n           color = hues[1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nSingapore Bi-lateral trend with major trading partners\nThe ribbon chart conveys the same message as the bubble chart. In February 2020, a significant decline in imports and exports between Singapore and China could be recognized. In terms of import and export rates, trade between Singapore and China has been well balanced. In 2021, Singapore will likely export more to China.\nMalaysia demonstrates an unexpected tendency. Prior to the start of Covid-19, commerce between Singapore and Malaysia was balanced. Since the Covid-19 outbreak, however, Singapore has had a trade deficit with Malaysia.\nCovid-19 appears to have little effect on Singapore imports from Taiwan. Taiwan’s import volume keeps on growing steadily.\nExport from Singapore to Hong Kong has a minimal effect, as there is no discernible change in trend, but the export rate is projected to rise in 2021.\nImports and exports with Indonesia decreased significantly at the beginning of 2020."
=======
    "section": "4.2 Merchandise trade performance with major trading partners",
    "text": "4.2 Merchandise trade performance with major trading partners\nTo illustrate the trade balance with all of Singapore’s trading partners, the bubble plot between import and export is chosen. The X-axis shows Singapore’s import value, while the Y-axis shows Singapore’s export value. Each bubble is colored differently depending on the country it represents.\nThe size of the bubbles indicates the total value of Singapore’s merchandise trade with the trading partner. If the bubble’s center point rises below the line, Singapore’s imports from the trade partner exceed Singapore’s exports. If the bubble’s center point falls beyond the line, Singapore’s exports to the trading partner exceed Singapore’s imports.\nThe graph is animated to emphasize the fluctuating equilibrium over time. Only major trading partners are depicted on the graph to reflect the effect of the key contributors.\nStep 1. Create scatter plot with plotly\n\n\nCode\n# Plot scatter plot\nscatter <- wide %>% \n  subset(Country == \"China\" | Country == \"Malaysia\" | Country == \"Taiwan\" | Country == \"Hong Kong\" | Country == \"Indonesia\" )\n\nfig <- scatter %>%\n  plot_ly(\n    x = ~`ImportValue`,\n    y = ~`ExportValue`,\n    color = ~`Country`,\n    frame = ~as.character(`MonthYear`, format = \"%Y-%m\"),\n    size = ~`Total`,\n    sizes = c(1,10000),\n    text= ~paste(\"Country:\",`Country`,\n                 \"\\nImport Value:\", `ImportValue`, \" Thousand Dollars\",\n                 \"\\nExport Value:\", `ExportValue`, \" Thousand Dollars\",\n                 \"\\nTotal:\", `Total`,\n                 \"\\nMonth Year:\", `MonthYear`), \n    hoverinfo = \"text\",\n    type = 'scatter',\n    mode = 'markers'\n  )\n\n\nStep 2. Set up layout\n\n\nCode\n# Create the diagonal line\ndline <- function(color = \"steelblue\") {\n  list(\n    type = \"line\",\n    yref = \"paper\",\n    xref = \"paper\",\n    y0 = 0, y1 = 1,\n    x0 = 0, x1 = 1,\n    line = list(color = color, dash=\"dot\")\n  )\n}\n\n# Setup layout\nfig <- fig %>% \n  layout(title = list(text=\"MERCHANDISE TRADE PERFORMANCE WITH MAJOR TRADING PARTNERS\"),\n         subtitle = \"2016-2022\",\n         hoverlabel = list(align = \"left\"),\n         shapes = dline(),\n         legend = list(orientation = \"h\", y = 1, x = 0),\n         showlegend = FALSE,\n         xaxis = list(title=\"Import Value\", range = list(0, 10000000)),\n         yaxis = list(title=\"Export Value\", range = list(0, 10000000)),\n         width=650,\n         height=650\n  )\n\n\nStep 3. Set up animation\n\n\nCode\nfig <- fig %>% \n  animation_opts(\n    500, easing = \"linear\", redraw = FALSE\n  )\n\n# Animation slider\nfig <- fig %>% animation_slider(\n  currentvalue = list(prefix = \"MONTH-YEAR :\", font = list(color=\"red\"))\n)\n\nfig\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nChina’s import and export volume declined sharply in the beginning of 2020\nChina bubble declines along the diagonal from December 2019 until February 2020. This implies a significant decline in both imports and exports from China within the specified time frame. But, it returned shortly thereafter.\nWith a similar trajectory to China, the bubble of Malaysia in December 2019 proceeded diagonally downward. Yet, it continued to decline until mid-2020. \nIn May of 2020, the impact of Indonesia is clearly seen by a 25% decline in overall volume.\nUnlike exports to other partners, Singapore’s exports to Hong Kong do not appear to be as affected. However, a faster increase in exports to Hong Kong is observed in 2021.\n\n\nWe employ the ribbon chart once again to assess the impact of Covid-19 on Singapore’s most major trading partners.\n\n\nCode\nhues <- scales::hue_pal()(2) \nbraid <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"China\")\n\nribbon <- gather(braid , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid2 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Malaysia\")\n\nribbon2 <- gather(braid2 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid3 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Taiwan\")\n\nribbon3 <- gather(braid3 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid4 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Hong Kong\")\n\nribbon4 <- gather(braid4 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid5 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Indonesia\")\n\nribbon5 <- gather(braid5 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+   \n  labs(title = \"Singapore trade balance trend with China\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon2,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid2, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Malaysia\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2021-01-01\"), \n           y = 2500000, size = 4, \n           label = \"Import > Export\", \n           hjust = 0, \n           color = hues[2])\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon3,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`<`ExportValue`), \n             data = braid3, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Taiwan\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2019-01-01\"), \n           y = 1000000, size = 4, \n           label = \"Import > Export\", \n           hjust = 0, \n           color = hues[2])\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon4,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid4, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Hong Kong\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2019-01-01\"), \n           y = 9000000, size = 4, \n           label = \"Export > Import\", \n           hjust = 0, \n           color = hues[1])\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon5,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid5, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Indonesia\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2019-01-01\"), \n           y = 9000000, size = 4, \n           label = \"Export > Import\", \n           hjust = 0, \n           color = hues[1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nSingapore Bi-lateral trend with major trading partners\nThe ribbon chart conveys the same message as the bubble chart. In February 2020, a significant decline in imports and exports between Singapore and China could be recognized. In terms of import and export rates, trade between Singapore and China has been well balanced. In 2021, Singapore will likely export more to China.\nMalaysia demonstrates an unexpected tendency. Prior to the start of Covid-19, commerce between Singapore and Malaysia was balanced. Since the Covid-19 outbreak, however, Singapore has had a trade deficit with Malaysia.\nCovid-19 appears to have little effect on Singapore imports from Taiwan. Taiwan’s import volume keeps on growing steadily.\nExport from Singapore to Hong Kong has a minimal effect, as there is no discernible change in trend, but the export rate is projected to rise in 2021.\nImports and exports with Indonesia decreased significantly at the beginning of 2020."
<<<<<<< HEAD
>>>>>>> parent of 687a304 (take-home exercise04)
=======
>>>>>>> parent of 687a304 (take-home exercise04)
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observe-impact-in-region-level",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observe-impact-in-region-level",
    "title": "Take-home Exercise 4",
    "section": "4.3 Observe impact in Region level",
    "text": "4.3 Observe impact in Region level\nStep 1. Prepare data for slope graph\n\n\nCode\n# Import\nslopeimport <- wide %>% \n  subset(Level == \"Region\") %>% \n  mutate(month = month(MonthYear)) %>% \n  mutate(year = year(MonthYear)) %>% \n  drop_na() %>% \n  group_by(Country, year) %>% \n  summarise(sumyear = sum(ImportValue)) %>% \n  mutate(Year = factor(year)) %>% \n  arrange(`sumyear`)\n\n#Export\nslopeexport <- wide %>% \n  subset(Level == \"Region\") %>% \n  mutate(month = month(MonthYear)) %>% \n  mutate(year = year(MonthYear)) %>% \n  drop_na() %>% \n  group_by(Country, year) %>% \n  summarise(sumyear = sum(ExportValue)) %>% \n  mutate(Year = factor(year)) %>% \n  arrange(`sumyear`)\n\n\nStep 2. Create slope plot\n\n\nCode\n# Create slope plot for import\np <- newggslopegraph(dataframe = slopeimport, \n                Times = `Year`, \n                Measurement = `sumyear`, \n                Grouping = `Country`,\n                Title = \"Total Import per Year by Region\",\n                SubTitle = \"2016-2022\",\n                Caption = NULL)\n\np + annotate(\"rect\", \n             xmin = \"2020\", \n             xmax = \"2022\", \n             ymin = -1, \n             ymax = 600000,\n             alpha = .1,\n             fill = \"yellow\")\n# Create slope plot for export\np2 <- newggslopegraph(dataframe = slopeexport, \n                Times = `Year`, \n                Measurement = `sumyear`, \n                Grouping = `Country`,\n                Title = \"Total Export per Year by Region\",\n                SubTitle = \"2016-2022\",\n                Caption = NULL)\n\np2 + annotate(\"rect\", \n             xmin = \"2020\", \n             xmax = \"2022\", \n             ymin = -1, \n             ymax = 600000,\n             alpha = .1,\n             fill = \"yellow\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nInsights from slope graph\n\nMainland China is range with a High Import - High Export spectrum. From 2020 to 2021, there was a significant increase in value, particularly export value.\nTaiwan import rate has continuously grown but we can observed significant jump of import value in 2021 after COVID."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observe-trade-dynamic-of-singapores-major-trading-partners-in-relative",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observe-trade-dynamic-of-singapores-major-trading-partners-in-relative",
    "title": "Take-home Exercise 4",
    "section": "3.3 Observe trade dynamic of Singapore’s major trading partners in relative",
    "text": "3.3 Observe trade dynamic of Singapore’s major trading partners in relative\nThe slope graph allows us to see how each country’s import and export dynamics change in relation to the other countries over time.\nStep 1. Prepare data for slope graph\n\n\nCode\n# Import\nslopeimport <- wide %>% \n  subset(Country == \"China\" | Country == \"Malaysia\" | Country == \"Taiwan\" | Country == \"Hong Kong\" | Country == \"Indonesia\" ) %>% \n  mutate(month = month(MonthYear)) %>% \n  mutate(year = year(MonthYear)) %>% \n  drop_na() %>% \n  group_by(Country, year) %>% \n  summarise(sumyear = sum(ImportValue)) %>% \n  mutate(Year = factor(year)) %>% \n  arrange(`sumyear`)\n\n#Export\nslopeexport <- wide %>% \n  subset(Country == \"China\" | Country == \"Malaysia\" | Country == \"Taiwan\" | Country == \"Hong Kong\" | Country == \"Indonesia\" ) %>% \n  mutate(month = month(MonthYear)) %>% \n  mutate(year = year(MonthYear)) %>% \n  drop_na() %>% \n  group_by(Country, year) %>% \n  summarise(sumyear = sum(ExportValue)) %>% \n  mutate(Year = factor(year)) %>% \n  arrange(`sumyear`)\n\n\nStep 2. Create slope plot\n\n\nCode\n# Create slope plot for import\np <- newggslopegraph(dataframe = slopeimport, \n                Times = `Year`, \n                Measurement = `sumyear`, \n                Grouping = `Country`,\n                Title = \"Total Import per Year\",\n                SubTitle = \"2016-2022\",\n                Caption = NULL)\n\np + annotate(\"rect\", \n             xmin = \"2020\", \n             xmax = \"2022\", \n             ymin = -1, \n             ymax = 600000,\n             alpha = .1,\n             fill = \"yellow\")\n# Create slope plot for export\np2 <- newggslopegraph(dataframe = slopeexport, \n                Times = `Year`, \n                Measurement = `sumyear`, \n                Grouping = `Country`,\n                Title = \"Total Export per Year\",\n                SubTitle = \"2016-2022\",\n                Caption = NULL)\n\np2 + annotate(\"rect\", \n             xmin = \"2020\", \n             xmax = \"2022\", \n             ymin = -1, \n             ymax = 600000,\n             alpha = .1,\n             fill = \"yellow\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTrade dynamic of Singapore’s major trading partners in relative\nThere is no change in rank for import. China has consistently ranked #1 in terms of imports. Singapore has expanded its imports from three nations, including China, Malaysia, and Taiwan, beginning in 2020.\nLikewise, there is no change in rank on the export side. China has continuously topped the exporting rankings. Similar to Hong Kong, although China’s export rate slowed in 2019, growth accelerated in 2021. Malaysia and Indonesia’s export volumes dropped drastically in 2020 before rebounding in 2021."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observing-the-dynamism-of-trade-balance-based-on-location",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observing-the-dynamism-of-trade-balance-based-on-location",
    "title": "Take-home Exercise 4",
    "section": "4.4 Observing the dynamism of trade balance based on location",
    "text": "4.4 Observing the dynamism of trade balance based on location\nStep 1. Prepare data for Choropleth map\n\n\nCode\ndata(\"World\")\nmap <- World %>% \n  select(iso_a3, name, sovereignt, geometry)\n  \n\nmap$name <- as.character(map$name)\nmap$sovereignt <- as.character(map$sovereignt)\n\n\nStep 2. Create animated map\n\n\nCode\ndata_map_area <- map %>% \n  full_join(wide, by = c('sovereignt' = 'Country')) %>% \n  drop_na()\n                          \ntmap_mode(\"view\")\nchoropleth <- tm_shape(data_map_area) +\n  tm_polygons(\"Total\") +\n  tm_facets(along = \"MonthYear\", free.coords = FALSE)\n\ntmap_animation(choropleth , filename = \"choropleth.gif\", delay = 25)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observing-the-dynamic-of-trade-balance-based-on-location",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observing-the-dynamic-of-trade-balance-based-on-location",
    "title": "Take-home Exercise 4",
    "section": "3.4 Observing the dynamic of trade balance based on location",
    "text": "3.4 Observing the dynamic of trade balance based on location\nStep 1. Prepare data for Choropleth map\n\n\nCode\ndata(\"World\")\nmap <- World %>% \n  select(iso_a3, name, sovereignt, geometry)\n  \n\nmap$name <- as.character(map$name)\nmap$sovereignt <- as.character(map$sovereignt)\n\n\nStep 2. Create animated map\n\n\nCode\ndata_map_area <- map %>% \n  full_join(wide, by = c('sovereignt' = 'Country')) %>% \n  drop_na()\n                          \ntmap_mode(\"view\")\nchoropleth <- tm_shape(data_map_area) +\n  tm_polygons(\"Diff\") +\n  tm_facets(along = \"MonthYear\", free.coords = FALSE)\n\ntmap_animation(choropleth , filename = \"choropleth.gif\", delay = 50)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observing-the-dynamic-of-trade-balance",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observing-the-dynamic-of-trade-balance",
    "title": "Take-home Exercise 4",
    "section": "4.5 Observing the dynamic of trade balance",
    "text": "4.5 Observing the dynamic of trade balance\nStep 1. Prepare data by selecting top difference between import and export\n\n\nCode\nheatmap <- wide %>% \n  drop_na() %>% \n  group_by(Country) %>% \n  mutate(totaldiff = sum(Diff)) %>% \n  arrange(totaldiff) %>% \n  subset(Country == \"China\" | Country == \"Malaysia\" | Country == \"Taiwan\" | Country == \"Hong Kong\" | Country == \"Indonesia\" ) \n\n\nStep 2. Plot heatmap\n\n\nCode\np <-  heatmap %>% \n  ggplot(aes(x = MonthYear, y = reorder(Country,totaldiff), fill= Diff)) +\n  geom_tile_interactive(tooltip = c(paste( \"Country:\", heatmap$Country,\n                                           \"\\n Import:\", heatmap$ImportValue,\n                                           \"\\n Export:\", heatmap$ExportValue,\n                                           \"\\n Balance:\" , -heatmap$Diff,\n                                           \"\\n Month:\", heatmap$MonthYear))) +\n  scale_fill_distiller(palette = \"Spectral\") +\n  theme_ipsum() +\n  geom_tile() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+\n  labs(title = \"Trade balance\", x=\"\", y=\"\") \n  \ngirafe(\n  ggobj = p,\n  width_svg = 15,\n  height_svg = 3\n)\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nInsights from heatmap"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#monitoring-the-relative-trade-balance-dynamics-of-singapores-major-trading-partners",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#monitoring-the-relative-trade-balance-dynamics-of-singapores-major-trading-partners",
    "title": "Take-home Exercise 4",
    "section": "3.5 Monitoring the relative trade balance dynamics of Singapore’s major trading partners",
    "text": "3.5 Monitoring the relative trade balance dynamics of Singapore’s major trading partners\nHeatmaps allow us to see the group’s auto-correlation and compare it to another group at the same time.\nStep 1. Prepare data by selecting top difference between import and export\n\n\nCode\nheatmap <- wide %>% \n  drop_na() %>% \n  group_by(Country) %>% \n  mutate(totaldiff = sum(Diff)) %>% \n  arrange(totaldiff) %>% \n  subset(Country == \"China\" | Country == \"Malaysia\" | Country == \"Taiwan\" | Country == \"Hong Kong\" | Country == \"Indonesia\" ) \n\n\nStep 2. Plot heatmap\n\n\nCode\np <-  heatmap %>% \n  ggplot(aes(x = MonthYear, y = reorder(Country,totaldiff), fill= Diff)) +\n  geom_tile_interactive(tooltip = c(paste( \"Country:\", heatmap$Country,\n                                           \"\\n Import:\", heatmap$ImportValue,\n                                           \"\\n Export:\", heatmap$ExportValue,\n                                           \"\\n Balance:\" , -heatmap$Diff,\n                                           \"\\n Month:\", heatmap$MonthYear))) +\n  scale_fill_distiller(palette = \"Spectral\") +\n  theme_ipsum() +\n  geom_tile() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=2))+\n  labs(title = \"Relative trade balance dynamics of Singapore's major trading partners\", x=\"\", y=\"\") +\n  \n  annotate(\"segment\", \n           x = as.Date(\"2020-01-01\"), \n           xend = as.Date(\"2020-01-01\"), \n           y = 0, \n           yend = 6,\n           colour = \"red\") +\n  \n  annotate(\"text\",\n           label = \"Covid outbreak\", \n           x = as.Date(\"2020-06-01\"),\n           y=2,\n           color = \"red\") \n  \ngirafe(\n  ggobj = p,\n  width_svg = 15,\n  height_svg = 3\n)\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nInsights from heatmap\nThe difference in color tone between Hong Kong and the other countries stand out as the trading relationship between Singapore and Hong Kong is highly surplus. The darker blue color of Hong Kong, which began in early 2021, reflects the quicker rise of export volume in comparison to import volume.\nContrary to Hong Kong, Taiwan reflects the outstanding deficit balance. The gradual darkening of the red shade over time for Taiwan represents the continuing increase of import volume over export."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#singapore-china-trading-pattern",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#singapore-china-trading-pattern",
    "title": "Take-home Exercise 4",
    "section": "3.6 Singapore-China trading pattern",
    "text": "3.6 Singapore-China trading pattern\nStep 1: Deriving month and year fields\n\n\nCode\ncycle <- wide\n\ncycle$month <- month(cycle$`MonthYear`)\ncycle$year <- year(cycle$`MonthYear`)\n\n\nStep 2: Extracting the target country\n\n\nCode\ncycle <- cycle %>%\n  subset(`Country`== \"China\") %>% \n  drop_na()\n\n\nStep 3: Plotting the cycle plot\n\n\nCode\nggplot() +\n  geom_line(data=cycle, aes(x=year, y=ImportValue, group=month), colour= \"steelblue\") +\n  geom_line(data=cycle, aes(x=year, y=ExportValue, group=month), colour= \"#ec5954\") +\n\n  facet_grid(~month) +\n  labs(title = \"Singapore-China trading pattern\",\n       subtitle = \"2016-2022\") +\n\n  ylab(\"Trading Volume\") +\n  theme(plot.title = element_text(size=15),\n        axis.text.x = element_text(size = 10, angle = 90),\n        axis.text.y = element_text(size = 10),\n        strip.text = element_text(size = 10))\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nSingapore-China trade\nFrom the cycle plot, we note that each month follows a similar pattern, with a dip in 2019-2020 and a rise beginning in 2021."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#data-preparation",
    "title": "Take-home Exercise 4",
    "section": "2.1 Data Preparation",
    "text": "2.1 Data Preparation\nMerchandise Trade provided by Department of Statistics, Singapore (DOS) is used. Pay attention to the fact that the data is in xlsx format with several tabs. As a result, we will manage using functions from the readxl packages.\nStep 1. Checking the number of sheets it contains\nTo list all sheets in an excel spreadsheet, we utilize the readxl package’s function excel sheet.\n\nexcel_sheets(\"data/data.xlsx\")\n\n[1] \"Content\" \"T1\"      \"T2\"     \n\n\nStep 2. Importing data\nThe readxl package’s read_xlsx() function is used in the code chunk below to import the data worksheet of our data workbook into R.\n\nT1 <- read_xlsx(\"data/data.xlsx\", sheet = \"T1\")\nT2 <- read_xlsx(\"data/data.xlsx\", sheet = \"T2\")\n\nStep 3. Transpose the fat table to long table\nGather takes multiple columns and collapses into key-value pairs, duplicating all other columns as needed. You use gather() when you notice that you have columns that are not variables. This function is under tidyr package.\n\nT1 <- gather(T1, \"MonthYear\", \"ImportValue\", -`Data Series`)\nT2 <- gather(T2, \"MonthYear\", \"ExportValue\", -`Data Series`)\n\n\n\n\n\n\n\nData Series\nMonthYear\nImportValue\n\n\n\n\nTotal Merchandise Imports (Thousand Dollars)\n2022 Dec\n49869770\n\n\nAmerica (Million Dollars)\n2022 Dec\n6901.5\n\n\nAsia (Million Dollars)\n2022 Dec\n33611.7\n\n\nEurope (Million Dollars)\n2022 Dec\n7541.8\n\n\nOceania (Million Dollars)\n2022 Dec\n1399.9\n\n\n\n\n\n\n\n\nData Series\nMonthYear\nExportValue\n\n\n\n\nTotal Merchandise Exports (Thousand Dollars)\n2022 Dec\n55000084\n\n\nAmerica (Million Dollars)\n2022 Dec\n6217.5\n\n\nAsia (Million Dollars)\n2022 Dec\n39734.8\n\n\nEurope (Million Dollars)\n2022 Dec\n4924.4\n\n\nOceania (Million Dollars)\n2022 Dec\n3034.8\n\n\n\n\n\n\nStep 4. Convert MonthYear column to date format\nFor our time series analysis, we then convert the date time to the date format using the ym function from the lubridate package.\n\nT1$`MonthYear` <- ym(T1$`MonthYear`)\nT2$`MonthYear` <- ym(T2$`MonthYear`)\n\n# Convert ImportValue column to numeric format\nT1$`ImportValue` <- as.numeric(T1$`ImportValue`)\nT2$`ExportValue` <- as.numeric(T2$`ExportValue`)\n\nStep 5. Separate region and country\nNotice that the country column contains both country and region-level information. To prevent misleading analysis, we have created the field Level to distinguish between the Region and Country levels.\n\n# =================== Import =================== #\nRegion <- T1 %>% \n  filter(grepl('Million', `Data Series`)) %>%\n  rename(\"Region\" = \"ImportValue\")\n\nCountry <- T1 %>% \n  filter(grepl('Thousand', `Data Series`)) %>%\n  rename(\"Country\" = \"ImportValue\")\n\nImport <- full_join(Region, Country, by = join_by(`Data Series`, `MonthYear`))\nImport  <- gather(Import , \"Level\", \"ImportValue\", -`Data Series`, -`MonthYear`)\n\n# =================== Export =================== #\nRegion <- T2 %>% \n  filter(grepl('Million', `Data Series`)) %>%\n  rename(\"Region\" = \"ExportValue\")\n\nCountry <- T2 %>% \n  filter(grepl('Thousand', `Data Series`)) %>%\n  rename(\"Country\" = \"ExportValue\")\n\nExport <- full_join(Region, Country, by = join_by(`Data Series`, `MonthYear`))\nExport  <- gather(Export , \"Level\", \"ExportValue\", -`Data Series`, -`MonthYear`)\n\nStep 6. Filter year from 2016 and rename column\nBecause we are focusing on the impact of the Covid epidemic event, we only filter data from 2016 to 2022.\n\nImport <- Import %>%\n  filter(`MonthYear`> as.Date(\"2015-12-01\")) %>% \n  rename(`Country` = `Data Series`)\n\nExport <- Export %>%\n  filter(`MonthYear`> as.Date(\"2015-12-01\")) %>%\n  rename(`Country` = `Data Series`)\n\nStep 7. Merge Import and Export into one table\n\nwide <- full_join(Import, Export, by = join_by(`Country`, `MonthYear`,`Level`))\nwide <- wide %>% \n  mutate(\"Diff\" = ImportValue-ExportValue) %>%\n  mutate(\"Total\" = ImportValue+ExportValue)\nwide$`Country` <- str_replace(wide$`Country`, \"Mainland China\", \"China\")\n wide$`Country` <- str_replace_all(wide$`Country`, \" \\\\(|Thousand Dollars|\\\\)\", \"\")\n wide$`Country` <- str_replace_all(wide$`Country`, \" \\\\(|Million Dollars|\\\\)\", \"\")\n\nlong  <- gather(wide , \"Type\", \"Value\", -`Country`, -`MonthYear`,-`Level`)\n\nAnd now we have both a wide table and a long table prepared for analysis.\nTable Wide : Merchandise Imports/Export By Region/Market, Monthly\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCountry\nMonthYear\nLevel\nImportValue\nExportValue\nDiff\nTotal\n\n\n\n\nAmerica\n2022-12-01\nRegion\n6901.5\n6217.5\n684.0\n13119.0\n\n\nAsia\n2022-12-01\nRegion\n33611.7\n39734.8\n-6123.1\n73346.5\n\n\nEurope\n2022-12-01\nRegion\n7541.8\n4924.4\n2617.4\n12466.2\n\n\nOceania\n2022-12-01\nRegion\n1399.9\n3034.8\n-1634.9\n4434.7\n\n\nAfrica\n2022-12-01\nRegion\n414.9\n1088.6\n-673.7\n1503.5\n\n\n\n\n\nTable Long : Merchandise Imports/Export By Region/Market, Monthly\n\n\n\n\n\nCountry\nMonthYear\nLevel\nType\nValue\n\n\n\n\nAmerica\n2022-12-01\nRegion\nImportValue\n6901.5\n\n\nAsia\n2022-12-01\nRegion\nImportValue\n33611.7\n\n\nEurope\n2022-12-01\nRegion\nImportValue\n7541.8\n\n\nOceania\n2022-12-01\nRegion\nImportValue\n1399.9\n\n\nAfrica\n2022-12-01\nRegion\nImportValue\n414.9"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html",
    "title": "In-class Exercise 8",
    "section": "",
    "text": "Prof recap the geospatial application on Rshiny with the Choropleth map where the user can change the variable and color.\nShare good practice of drafting the application on Quarto first before putting it on the Shiny app.\nThe interactive application -> we can group it with the data table that we are using for each output.\n\n\n\n\n\nCentrality analysis\nNode-Edge : The most important one is the node. You must start with having nodes then there are ways to create the link either physical or not.\nTypes of network : Directed and Undirected graph\n\nAn ego-centric : example secretary is the key to CEO\nBipartite graph\nTidygraph is the latest package for graph that based on the tidyverse structure. The tidygraph store within tibbler dataframe.\n\n\n\n\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\n\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# … with 1,366 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# … with 51 more rows\n\n\n\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# … with 1,366 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# … with 51 more rows\n\n\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\nRestructure the data here is very important. For network plot, the data structure is critical.\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %>%\n  rename(from = id) %>%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %>%\n  rename(to = id) %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(from, to) %>%\n    summarise(weight = n()) %>%\n  filter(from!=to) %>%\n  filter(weight > 1) %>%\n  ungroup()\n\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "indexInclass.html#in-class-exercise-08-11-mar-2023",
    "href": "indexInclass.html#in-class-exercise-08-11-mar-2023",
    "title": "In-class Exercise",
    "section": "In-class Exercise 08 (11 Mar 2023)",
    "text": "In-class Exercise 08 (11 Mar 2023)"
  }
]