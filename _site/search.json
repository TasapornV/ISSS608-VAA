[
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "1. The task\nIn this take-home exercise, you are required to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore bi-lateral trade (i.e.Â Import, Export and Trade Balance) by using appropriate analytical visualisation techniques learned in Lesson 6: It's About Time. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.\nThe write-up of the take-home exercise should include but not limited to the followings:\n\nDescribe the selection and designed consideration of the analytical data visualisation used. The discussion should limit to not more than 150 words each.\nA reproducible description of the procedures used to prepare the analytical visualisation. Please refer to the peer submission I shared.\nA write-up of not more than 100 words to discuss the patterns reveal by each analytical visualization prepared.\n\n\n\n2. Packages\n\npackages = c('readxl')\nfor(p in packages){\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\n\n\n3. Data\nFor the purpose of this take-home exercise, Merchandise Trade provided by Department of Statistics, Singapore (DOS) will be used. The data are available under the sub-section of Merchandise Trade by Region/Market. You should download the data by clicking on the link Download all in Excel on the same webpage. The study period should be between January 2020 to December 2022.\n\nData Preparation\n\n# checking the number of sheets it contains\nexcel_sheets(\"data/data.xlsx\")\n\n[1] \"Content\" \"T1\"      \"T2\"     \n\n\n\nT1 <- read_excel(\"data/data.xlsx\", sheet = \"T1\")\nT2 <- read_excel(\"data/data.xlsx\", sheet = \"T2\")\n\n\n\nCode\nknitr::kable(\n  head(T1,5)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Series\n2022 Dec\n2022 Nov\n2022 Oct\n2022 Sep\n2022 Aug\n2022 Jul\n2022 Jun\n2022 May\n2022 Apr\n2022 Mar\n2022 Feb\n2022 Jan\n2021 Dec\n2021 Nov\n2021 Oct\n2021 Sep\n2021 Aug\n2021 Jul\n2021 Jun\n2021 May\n2021 Apr\n2021 Mar\n2021 Feb\n2021 Jan\n2020 Dec\n2020 Nov\n2020 Oct\n2020 Sep\n2020 Aug\n2020 Jul\n2020 Jun\n2020 May\n2020 Apr\n2020 Mar\n2020 Feb\n2020 Jan\n2019 Dec\n2019 Nov\n2019 Oct\n2019 Sep\n2019 Aug\n2019 Jul\n2019 Jun\n2019 May\n2019 Apr\n2019 Mar\n2019 Feb\n2019 Jan\n2018 Dec\n2018 Nov\n2018 Oct\n2018 Sep\n2018 Aug\n2018 Jul\n2018 Jun\n2018 May\n2018 Apr\n2018 Mar\n2018 Feb\n2018 Jan\n2017 Dec\n2017 Nov\n2017 Oct\n2017 Sep\n2017 Aug\n2017 Jul\n2017 Jun\n2017 May\n2017 Apr\n2017 Mar\n2017 Feb\n2017 Jan\n2016 Dec\n2016 Nov\n2016 Oct\n2016 Sep\n2016 Aug\n2016 Jul\n2016 Jun\n2016 May\n2016 Apr\n2016 Mar\n2016 Feb\n2016 Jan\n2015 Dec\n2015 Nov\n2015 Oct\n2015 Sep\n2015 Aug\n2015 Jul\n2015 Jun\n2015 May\n2015 Apr\n2015 Mar\n2015 Feb\n2015 Jan\n2014 Dec\n2014 Nov\n2014 Oct\n2014 Sep\n2014 Aug\n2014 Jul\n2014 Jun\n2014 May\n2014 Apr\n2014 Mar\n2014 Feb\n2014 Jan\n2013 Dec\n2013 Nov\n2013 Oct\n2013 Sep\n2013 Aug\n2013 Jul\n2013 Jun\n2013 May\n2013 Apr\n2013 Mar\n2013 Feb\n2013 Jan\n2012 Dec\n2012 Nov\n2012 Oct\n2012 Sep\n2012 Aug\n2012 Jul\n2012 Jun\n2012 May\n2012 Apr\n2012 Mar\n2012 Feb\n2012 Jan\n2011 Dec\n2011 Nov\n2011 Oct\n2011 Sep\n2011 Aug\n2011 Jul\n2011 Jun\n2011 May\n2011 Apr\n2011 Mar\n2011 Feb\n2011 Jan\n2010 Dec\n2010 Nov\n2010 Oct\n2010 Sep\n2010 Aug\n2010 Jul\n2010 Jun\n2010 May\n2010 Apr\n2010 Mar\n2010 Feb\n2010 Jan\n2009 Dec\n2009 Nov\n2009 Oct\n2009 Sep\n2009 Aug\n2009 Jul\n2009 Jun\n2009 May\n2009 Apr\n2009 Mar\n2009 Feb\n2009 Jan\n2008 Dec\n2008 Nov\n2008 Oct\n2008 Sep\n2008 Aug\n2008 Jul\n2008 Jun\n2008 May\n2008 Apr\n2008 Mar\n2008 Feb\n2008 Jan\n2007 Dec\n2007 Nov\n2007 Oct\n2007 Sep\n2007 Aug\n2007 Jul\n2007 Jun\n2007 May\n2007 Apr\n2007 Mar\n2007 Feb\n2007 Jan\n2006 Dec\n2006 Nov\n2006 Oct\n2006 Sep\n2006 Aug\n2006 Jul\n2006 Jun\n2006 May\n2006 Apr\n2006 Mar\n2006 Feb\n2006 Jan\n2005 Dec\n2005 Nov\n2005 Oct\n2005 Sep\n2005 Aug\n2005 Jul\n2005 Jun\n2005 May\n2005 Apr\n2005 Mar\n2005 Feb\n2005 Jan\n2004 Dec\n2004 Nov\n2004 Oct\n2004 Sep\n2004 Aug\n2004 Jul\n2004 Jun\n2004 May\n2004 Apr\n2004 Mar\n2004 Feb\n2004 Jan\n2003 Dec\n2003 Nov\n2003 Oct\n2003 Sep\n2003 Aug\n2003 Jul\n2003 Jun\n2003 May\n2003 Apr\n2003 Mar\n2003 Feb\n2003 Jan\n2002 Dec\n2002 Nov\n2002 Oct\n2002 Sep\n2002 Aug\n2002 Jul\n2002 Jun\n2002 May\n2002 Apr\n2002 Mar\n2002 Feb\n2002 Jan\n2001 Dec\n2001 Nov\n2001 Oct\n2001 Sep\n2001 Aug\n2001 Jul\n2001 Jun\n2001 May\n2001 Apr\n2001 Mar\n2001 Feb\n2001 Jan\n2000 Dec\n2000 Nov\n2000 Oct\n2000 Sep\n2000 Aug\n2000 Jul\n2000 Jun\n2000 May\n2000 Apr\n2000 Mar\n2000 Feb\n2000 Jan\n1999 Dec\n1999 Nov\n1999 Oct\n1999 Sep\n1999 Aug\n1999 Jul\n1999 Jun\n1999 May\n1999 Apr\n1999 Mar\n1999 Feb\n1999 Jan\n1998 Dec\n1998 Nov\n1998 Oct\n1998 Sep\n1998 Aug\n1998 Jul\n1998 Jun\n1998 May\n1998 Apr\n1998 Mar\n1998 Feb\n1998 Jan\n1997 Dec\n1997 Nov\n1997 Oct\n1997 Sep\n1997 Aug\n1997 Jul\n1997 Jun\n1997 May\n1997 Apr\n1997 Mar\n1997 Feb\n1997 Jan\n1996 Dec\n1996 Nov\n1996 Oct\n1996 Sep\n1996 Aug\n1996 Jul\n1996 Jun\n1996 May\n1996 Apr\n1996 Mar\n1996 Feb\n1996 Jan\n1995 Dec\n1995 Nov\n1995 Oct\n1995 Sep\n1995 Aug\n1995 Jul\n1995 Jun\n1995 May\n1995 Apr\n1995 Mar\n1995 Feb\n1995 Jan\n1994 Dec\n1994 Nov\n1994 Oct\n1994 Sep\n1994 Aug\n1994 Jul\n1994 Jun\n1994 May\n1994 Apr\n1994 Mar\n1994 Feb\n1994 Jan\n1993 Dec\n1993 Nov\n1993 Oct\n1993 Sep\n1993 Aug\n1993 Jul\n1993 Jun\n1993 May\n1993 Apr\n1993 Mar\n1993 Feb\n1993 Jan\n1992 Dec\n1992 Nov\n1992 Oct\n1992 Sep\n1992 Aug\n1992 Jul\n1992 Jun\n1992 May\n1992 Apr\n1992 Mar\n1992 Feb\n1992 Jan\n1991 Dec\n1991 Nov\n1991 Oct\n1991 Sep\n1991 Aug\n1991 Jul\n1991 Jun\n1991 May\n1991 Apr\n1991 Mar\n1991 Feb\n1991 Jan\n1990 Dec\n1990 Nov\n1990 Oct\n1990 Sep\n1990 Aug\n1990 Jul\n1990 Jun\n1990 May\n1990 Apr\n1990 Mar\n1990 Feb\n1990 Jan\n1989 Dec\n1989 Nov\n1989 Oct\n1989 Sep\n1989 Aug\n1989 Jul\n1989 Jun\n1989 May\n1989 Apr\n1989 Mar\n1989 Feb\n1989 Jan\n1988 Dec\n1988 Nov\n1988 Oct\n1988 Sep\n1988 Aug\n1988 Jul\n1988 Jun\n1988 May\n1988 Apr\n1988 Mar\n1988 Feb\n1988 Jan\n1987 Dec\n1987 Nov\n1987 Oct\n1987 Sep\n1987 Aug\n1987 Jul\n1987 Jun\n1987 May\n1987 Apr\n1987 Mar\n1987 Feb\n1987 Jan\n1986 Dec\n1986 Nov\n1986 Oct\n1986 Sep\n1986 Aug\n1986 Jul\n1986 Jun\n1986 May\n1986 Apr\n1986 Mar\n1986 Feb\n1986 Jan\n1985 Dec\n1985 Nov\n1985 Oct\n1985 Sep\n1985 Aug\n1985 Jul\n1985 Jun\n1985 May\n1985 Apr\n1985 Mar\n1985 Feb\n1985 Jan\n1984 Dec\n1984 Nov\n1984 Oct\n1984 Sep\n1984 Aug\n1984 Jul\n1984 Jun\n1984 May\n1984 Apr\n1984 Mar\n1984 Feb\n1984 Jan\n1983 Dec\n1983 Nov\n1983 Oct\n1983 Sep\n1983 Aug\n1983 Jul\n1983 Jun\n1983 May\n1983 Apr\n1983 Mar\n1983 Feb\n1983 Jan\n1982 Dec\n1982 Nov\n1982 Oct\n1982 Sep\n1982 Aug\n1982 Jul\n1982 Jun\n1982 May\n1982 Apr\n1982 Mar\n1982 Feb\n1982 Jan\n1981 Dec\n1981 Nov\n1981 Oct\n1981 Sep\n1981 Aug\n1981 Jul\n1981 Jun\n1981 May\n1981 Apr\n1981 Mar\n1981 Feb\n1981 Jan\n1980 Dec\n1980 Nov\n1980 Oct\n1980 Sep\n1980 Aug\n1980 Jul\n1980 Jun\n1980 May\n1980 Apr\n1980 Mar\n1980 Feb\n1980 Jan\n1979 Dec\n1979 Nov\n1979 Oct\n1979 Sep\n1979 Aug\n1979 Jul\n1979 Jun\n1979 May\n1979 Apr\n1979 Mar\n1979 Feb\n1979 Jan\n1978 Dec\n1978 Nov\n1978 Oct\n1978 Sep\n1978 Aug\n1978 Jul\n1978 Jun\n1978 May\n1978 Apr\n1978 Mar\n1978 Feb\n1978 Jan\n1977 Dec\n1977 Nov\n1977 Oct\n1977 Sep\n1977 Aug\n1977 Jul\n1977 Jun\n1977 May\n1977 Apr\n1977 Mar\n1977 Feb\n1977 Jan\n1976 Dec\n1976 Nov\n1976 Oct\n1976 Sep\n1976 Aug\n1976 Jul\n1976 Jun\n1976 May\n1976 Apr\n1976 Mar\n1976 Feb\n1976 Jan\n\n\n\n\nTotal Merchandise Imports (Thousand Dollars)\n49869770.0\n50653907.0\n53182943.0\n55799312.0\n58466009.0\n61029374.0\n59649162.0\n57604263.0\n56116002.0\n58079982.0\n44958373.0\n50026788.0\n54349357.0\n50674908.0\n47945213.0\n45980374.0\n44714491.0\n46107788.0\n45039845.0\n41559697.0\n45169547.0\n47668437.0\n37643664.0\n39028616.0\n40154550.0\n38477878.0\n38173829.0\n38801413.0\n36472279.0\n37843646.0\n35120892.0\n31458238.0\n35878828.0\n40433029.0\n39472637.0\n41180224.0\n41580603.0\n42489886.0\n42282537.0\n39450625.0\n40998179.0\n42030046.0\n38979868.0\n42637579.0\n41294888.0\n40340098.0\n36074448.0\n41553606.0\n42566514.0\n45114564.0\n47127052.0\n41439605.0\n43802120.0\n44972517.0\n41054575.0\n42887787.0\n38382736.0\n39745452.0\n34609596.0\n38491510.0\n40104280.0\n41476983.0\n39347126.0\n35732238.0\n38702897.0\n36874744.0\n36416610.0\n39149517.0\n34542072.0\n39987555.0\n33032643.0\n36734901.0\n39473257.0\n37482999.0\n33929792.0\n32761041.0\n33527949.0\n31906437.0\n34067889.0\n32922385.0\n32237957.0\n33661999.0\n30949946.0\n30382944.0\n34868755.0\n33630636.0\n35998057.0\n35278954.0\n35260544.0\n37430942.0\n36614847.0\n33572417.0\n36970386.0\n38824707.0\n29731205.0\n35221197.0\n38374997.0\n35762528.0\n41160397.0\n40573602.0\n36885234.0\n40809150.0\n38216943.0\n41829362.0\n42799285.0\n43813748.0\n37214009.0\n41143329.0\n38686538\n38981788\n44871411\n41616787\n40477278\n43645756\n39241029\n41984109\n42058336\n38088858\n35355063\n40563794\n37259840\n40081332\n41031806\n37875867\n38629287\n38990798\n41641022\n42810254\n39686751\n43698690\n40218167\n40266013\n38210081\n41868766\n39592049\n38911564\n42209188\n37264457\n39185518\n39756662\n38518652\n43060778\n32126643\n37583825\n36115015\n35795622\n35674370\n35562647\n36208637\n38506428\n37674529\n33511638\n36719932\n36362935\n30904685\n33290120\n33885826\n31415491\n32568130\n33242874\n30161686\n31670300\n29799099\n27818221\n27868130\n27730194\n26488010\n25726467\n29158912\n32855642\n38957660\n41584525\n38926024\n43365604\n40693260\n38619579\n40555557\n38648064\n33413957\n38681524\n34935734\n36053976\n37110162\n32811183\n33723677\n34151496\n34076139\n32340922\n31945246\n32640492\n27851480\n30763489\n33117053\n31957329\n31068778\n32818225\n34163426\n33155215\n33778399\n32627841\n29327041\n31515804\n29937624\n27375920\n30768661\n29184752\n32075302\n29312727\n29639219\n27943026\n28003355\n26203333\n26658197\n28178684\n21400853\n24945420\n25299368\n24894387\n26438682\n25520660\n25375603\n26647804\n24845482\n24467390\n24103838\n25214316\n20335381\n21035150\n22369973\n20077600\n22247169\n20630297\n19534347\n19832506\n19773576\n18135977\n19325007\n20441818\n17162800\n18539098\n17021067\n17690794\n18915666\n17047877\n18224600\n18668721\n18290300\n17487220\n18179783\n17547760\n14816724\n15909729\n15524076\n16568462\n18073404\n16029478\n17270265\n17417877\n17509415\n17125687\n17491623\n19116724\n17952511\n17612616\n20984719\n21041672\n21400038\n21325111\n20917474\n19865437\n20281078\n18669571\n17564650\n18704237\n15557241\n15863851\n17928291\n17374626\n16958676\n16444304\n16507617\n16699646\n15738641\n15009917\n15254783\n15235020\n11997660\n12992380\n14334730\n13093541\n13587124\n14058810\n14005064\n14735024\n14468062\n12963883\n13958753\n16061183\n14766759\n13830549\n17502726\n16775834\n17623903\n17412112\n16546053\n17547538\n15923212\n16289060\n15832565\n16729284\n12634879\n15788034\n15962353\n15880423\n16335830\n14761790\n14383157\n15785983\n15175692\n15245468\n15494902\n16418429\n14200033\n15539334\n15830770\n15691830\n16058778\n14787061\n15730943\n15532592\n14718979\n14922431\n13734522\n14664246\n12396937\n12244388\n14012963\n13438282\n13689237\n13661781\n13698273\n13591796\n13100849\n13021032\n13560716\n12544778\n10306501\n11769574\n12551076\n11534142\n11935375\n12051975\n11337445\n11852930\n11723084\n11419871\n11578361\n11561628\n10482915\n9574146\n11790640\n10663094\n10522213\n9726572\n9312418\n10213734\n10314947\n8786922\n9337442\n9725652\n8133215\n9002815\n9078154\n9313806\n9060661\n8905213\n9505211\n10418246\n9776340\n9785944\n9161131\n9668039\n9350929\n10171241\n9962846\n10242614\n10218287\n8704397\n9114427\n8836001\n8957917\n8818823\n8569262\n9262216\n8406030\n8712990\n8308040\n8598657\n8828501\n8451166\n8647696\n7657119\n8097023\n8015335\n8303029\n8490927\n6822113\n6644115\n8259539\n7799082\n8102209\n7166715\n8429892\n7503029\n8158578\n6838830\n6790755\n6268633\n6354236\n6555218\n6652230\n6629129\n6190999\n6215154\n5540682\n6219723\n5557727\n5235972\n5532124\n4826591\n4986178\n4828720\n4960162\n4864192\n4952515\n4601977\n4816309\n4491147\n4467418\n4335254\n4613095\n4787314\n4183673\n4472337\n4658699\n4567826\n4830563\n4661139\n4634948\n4505947\n4683737\n4843832\n5118133\n5012976\n4744192\n5555553\n4485253\n5888685\n5224181\n4607949\n4959779\n5587835\n5158092\n5449376\n4704522\n5179362\n4356968\n5531613\n4854182\n5231031\n4837197\n4772244\n5116032\n5045172\n5251715\n4799308\n5316575\n4921836\n4272017\n5086907\n4911003\n4828021\n5271758\n4917847\n4878895\n5136811\n4678344\n5274497\n5027263\n5425186\n4773926\n5121029\n4992982\n4389186\n5069083\n4759595\n4897741\n5416758\n4601529\n4856759\n5247435\n4904126\n3659930\n5452863\n4191641\n4599084\n4612468\n4531820\n4364383\n4610652\n4098498\n4237842\n4315873\n4202221\n3502180\n4078139\n3642324\n3738350\n3372278\n3577580\n3721574\n3218006\n3142256\n2913750\n3045825\n2752707\n2626946\n2582839\n2547477\n2745427\n2798938\n2554868\n2481365\n2615636\n2501445\n2215845\n2382856\n2322582\n1981827\n2452992\n2294084\n2198239\n2310009\n2281908\n2284011\n2157971\n2110730\n1885173\n2147905\n2006166\n1744496\n2101238\n2015057\n1987479\n2036514\n1941389\n2056149\n2041451\n1649794\n1462483\n1942839\n1781332\n1658989\n1830978\n\n\nAmerica (Million Dollars)\n6901.5\n7529.4\n7666.4\n7995.9\n8633.8\n7879.7\n8024.0\n8521.1\n7822.1\n7176.1\n5385.2\n5850.9\n6261.1\n6127.4\n6027.6\n5631.6\n5750.1\n5728.6\n5457.4\n5191.8\n6195.9\n5303.5\n4164.2\n4580.0\n4676.4\n4588.2\n4869.7\n4886.4\n4132.0\n4667.3\n4686.2\n4259.0\n5183.5\n5910.8\n5314.1\n5844.1\n5686.4\n6274.7\n5754.5\n5633.1\n6128.8\n5986.2\n5876.4\n5797.3\n6128.0\n5528.7\n5381.1\n5543.6\n6184.6\n6013.9\n6409.9\n5466.5\n6031.7\n5590.7\n5961.2\n5661.3\n5122.6\n5316.7\n4113.3\n4706.6\n5014.4\n4895.6\n4983.1\n4435.1\n4888.7\n4684.4\n5147.3\n5372.0\n4481.4\n5262.9\n4097.8\n4743.8\n4645.3\n4908.6\n4145.9\n4121.3\n4754.1\n4107.4\n4396.5\n4284.6\n4251.0\n4437.5\n3813.2\n3818.0\n4515.7\n4773.8\n4711.8\n5147.4\n4484.8\n4468.0\n4886.9\n4418.3\n4725.5\n5555.1\n3842.0\n4751.9\n5546.4\n5087.7\n5927.0\n4999.0\n5276.0\n4755.4\n4635.5\n5276.7\n6046.6\n6117.0\n5579.0\n5570.0\n4793.3\n5269.7\n5847.2\n6441.8\n5843.8\n6344.8\n5004.3999999999996\n5550.9\n5697.4\n4717.3999999999996\n5173.2\n5553.4\n4705.3\n4806.6000000000004\n5670.2\n5248.5\n5521\n5556.7\n5098.6000000000004\n5876.5\n5073.8\n5539.4\n5312.3\n5349.6\n5489.2\n6298.3\n4816.1000000000004\n5093.8999999999996\n5678.4\n4871\n5308.5\n5658.1\n5702.4\n5382.1\n4542.3999999999996\n4964.5\n4842.5\n5033\n4822.5\n4760.2\n5220.1000000000004\n5044.1000000000004\n5236.8\n4845.8999999999996\n5512.7\n5475.1\n4255.2\n4687.7\n4756.3\n4653.1000000000004\n4434\n4687.6000000000004\n4587.5\n4335.3999999999996\n4062\n3907.3\n4123.3\n4114.8\n4181.7\n4362.3999999999996\n4585\n4657.5\n5995.1\n5589.1\n5483.1\n5484.8\n5674.7\n5361.7\n5725.3\n5562.2\n4929.1000000000004\n4800.5\n4664.3999999999996\n4818\n5116.8999999999996\n4379.3\n4340\n4627.6000000000004\n4883.5\n4602.7\n4411.5\n5232.8\n4163.6000000000004\n4170.7\n6260.1\n5104.3\n4533.3\n4380.3999999999996\n4259.6000000000004\n4401.5\n4313\n4209.1000000000004\n3980.9\n4154\n4364.3\n3499.5\n3797.8\n3875.5\n4519.8\n3816.1\n4219.3\n3622.7\n3460\n3393.4\n3676.4\n3624.7\n2991.3\n2744.1\n2896.6\n2789.2\n3218.7\n3145.2\n3369.4\n4304.7\n3418.6\n3350.4\n3439.7\n3753.7\n2606.4\n2554.4\n2649.3\n2624.1\n3430\n3061.2\n3087.6\n2670.2\n2852.8\n2460.4\n2825.5\n3455.3\n2755.3\n2385.1999999999998\n2353\n2615.5\n3059.6\n2327\n2829.1\n2744.2\n3265\n2628.2\n2978.2\n2714.8\n2672.8\n2481.5\n2455.6999999999998\n2829.2\n3602.7\n2817.7\n2777.9\n3077.8\n3278.4\n2919\n2974.2\n3434.9\n3437.6\n3263.5\n3306.2\n3129.6\n3568.8\n3537.4\n3270.4\n3440.7\n3153.3\n2874.4\n2774.1\n3293.9\n2547\n2596.4\n2981.1\n3170.6\n2896.5\n3014.3\n3573.6\n2704.7\n2870.7\n2775.4\n2664.8\n2952.3\n2234.5\n2958\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\n\n\nAsia (Million Dollars)\n33611.7\n34733.7\n36120.9\n37696.3\n40911.9\n43214.2\n42507.2\n40534.7\n38735.7\n42199.9\n31611.3\n35014.0\n39140.3\n35949.6\n33552.7\n32533.4\n31492.5\n31645.0\n31021.0\n28497.2\n30623.1\n31367.8\n26122.6\n27413.7\n28200.4\n25844.9\n26127.9\n27823.2\n26052.3\n26767.4\n24779.3\n21718.9\n24534.5\n26783.6\n26588.1\n27128.1\n27688.7\n27905.0\n28378.3\n26350.3\n26671.9\n28473.3\n26052.4\n27541.0\n26807.2\n26773.8\n22762.9\n27643.4\n27352.6\n29765.8\n31710.5\n27426.4\n28371.5\n29381.2\n26804.0\n28718.4\n26249.7\n26481.1\n23434.2\n26477.0\n27349.4\n28430.0\n27283.6\n25101.0\n26491.1\n24750.6\n24011.2\n26420.2\n23510.6\n27215.5\n22103.1\n25008.4\n26302.5\n25122.1\n23492.4\n23237.1\n23121.5\n22039.0\n23479.2\n22261.9\n21145.8\n21940.0\n20726.8\n20169.1\n23757.8\n22217.7\n23871.5\n24404.3\n24174.4\n25221.3\n24850.7\n22616.4\n24671.7\n23668.0\n19628.9\n23268.9\n24966.7\n23279.3\n26010.9\n27147.5\n24350.1\n28201.5\n26630.8\n28177.4\n28145.1\n28647.9\n24865.1\n27473.3\n26194.799999999999\n26960.799999999999\n29434\n28099.3\n26865.3\n28328.7\n26388.3\n27479.200000000001\n27552.5\n26017.4\n23175.7\n27814.1\n26030.799999999999\n28706\n27659\n26139.599999999999\n25790.799999999999\n26712.7\n28764.9\n28848.5\n27714\n29417.200000000001\n28344.3\n27629\n25534.400000000001\n28768.5\n27327.1\n25482.6\n29680.5\n26645.3\n27103.5\n27180.799999999999\n25992.400000000001\n30249.7\n21631.9\n25562.3\n24935.7\n23996.3\n24418.9\n24785.3\n24992.2\n26413.200000000001\n26406.9\n22765.9\n25090.5\n24259.5\n21219.200000000001\n23073.5\n22487.1\n20776.7\n22080.2\n22322.2\n19972.8\n21579.4\n19884.7\n18334\n18269.8\n18236.3\n17144\n16335.8\n19514.2\n21649.8\n26393.9\n29379.1\n26991.5\n31290.3\n27963.8\n26682.5\n27528.7\n26276\n23240.2\n27400.2\n24856\n25264.5\n25697.5\n23693.4\n23975.4\n24127.7\n23352.400000000001\n22424\n22114.799999999999\n22153.7\n19277\n22255.5\n21897.9\n22074.7\n21440.3\n23585.1\n24903.8\n23415.599999999999\n24201.200000000001\n23544.400000000001\n20782.2\n22493\n21273.8\n19858.7\n21922.2\n20785.400000000001\n22398.400000000001\n21032.799999999999\n20528.599999999999\n19551.7\n20004.7\n18552.400000000001\n18830.900000000001\n20300\n15041.3\n18349.3\n18286.400000000001\n17904.599999999999\n19014.599999999999\n18226.7\n17940\n18018.099999999999\n17472.400000000001\n17060.7\n15897.4\n17154.8\n13995.8\n14282.4\n15920.4\n14106.6\n15274.3\n14344.3\n13199.8\n13598.3\n13564.9\n12461.7\n12841.7\n13511.2\n11197.3\n12979.4\n11348\n11960.5\n12574.3\n11608.9\n11990.5\n12441.8\n12118.3\n11479.9\n12145.2\n11687.5\n9607.6\n10625.2\n10344.1\n10938.6\n11310.6\n10507.3\n11285\n11146.8\n11237.7\n10935.5\n11443.2\n12363.4\n11353.3\n11516.7\n14222.4\n14381\n14362.3\n14492.5\n14115.7\n13055.8\n13690.6\n12685.3\n11993.5\n12326.9\n10354.700000000001\n10569\n11843.6\n11309.5\n11154.8\n10772.4\n10074.6\n10923.5\n10216.6\n9653.2000000000007\n9991.1\n9487.9\n7499.7\n7813.7\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\n\n\nEurope (Million Dollars)\n7541.8\n7242.8\n7475.9\n8167.6\n7433.2\n8300.5\n7300.2\n7030.8\n7407.2\n7203.2\n6479.0\n7821.6\n7586.3\n6872.0\n6714.8\n6882.1\n5919.4\n6919.2\n7011.2\n6563.5\n6740.5\n8964.0\n5403.7\n5749.6\n6087.4\n6133.5\n6285.4\n5316.9\n5225.0\n5475.3\n4960.7\n4629.0\n5150.6\n6333.3\n6209.6\n6859.7\n6314.8\n6827.1\n6624.7\n6310.1\n6533.8\n6325.3\n6054.8\n7987.4\n7157.0\n7128.7\n6730.3\n7489.3\n7742.8\n8032.7\n7805.9\n7542.6\n8218.9\n8694.4\n7126.1\n7181.7\n6237.3\n6963.0\n6061.9\n6318.0\n6809.7\n6876.0\n6292.9\n5484.9\n6491.4\n6169.1\n6428.7\n6434.0\n5985.2\n6570.9\n6067.0\n6105.0\n7658.1\n6535.5\n5667.2\n4809.6\n4920.3\n5153.8\n5302.1\n5624.9\n6051.1\n6250.8\n5365.3\n5450.5\n5918.4\n6080.4\n6404.1\n4818.9\n5765.3\n6870.3\n6040.6\n5765.4\n6603.1\n8133.0\n5199.5\n6054.5\n6627.2\n6444.4\n7811.7\n6998.1\n5962.7\n6782.3\n5703.1\n7038.5\n7411.0\n7700.1\n5447.2\n6463.7\n6886.7\n6065.7\n8486.1\n6238.1\n6664.6\n7708.3\n7068.7\n7676.5\n7679.2\n6399\n6302.6\n6531.6\n5582.2\n5702.9\n6536.2\n5552.8\n6349.8\n5869.5\n6618.4\n7496.7\n6261.5\n7704.4\n6058.4\n6675\n6551.8\n5991.1\n6767.4\n7664.2\n6070.3\n5184.6000000000004\n6047.2\n6271.8\n6249.8\n6845.6\n5348.6\n6309.2\n5790.3\n6205.1\n6011.9\n5466.6\n5192.6000000000004\n6252\n5556.7\n5374.8\n5295.7\n5764.4\n4877.6000000000004\n4815.7\n5785.2\n5179.1000000000004\n5232.2\n5583.9\n4841.2\n5041.3\n5226.3999999999996\n4834\n4893.6000000000004\n4626.8\n4614.2\n4384.8999999999996\n4506.3999999999996\n5779.6\n5746.8\n5732.3\n5634.4\n5627.3\n6048.3\n5651.5\n6380\n6028.6\n4599.8999999999996\n5601.7\n4821.2\n5249.4\n5597\n4255.6000000000004\n4730.5\n4761.7\n5082.3\n4663.8999999999996\n4834.8\n4666\n3869.9\n3820.9\n4133.7\n4152.8999999999996\n4475.3\n4122.8999999999996\n4251\n4530.7\n4137.3999999999996\n4245.7\n3918.8\n4276.8999999999996\n3591.6\n3559.3\n4305.6000000000004\n3774.7\n4389.5\n3807.4\n4131.5\n4055.9\n3978.5\n3545.2\n3709.8\n3575.2\n3000.7\n3254.6\n3544.8\n3658.5\n3625\n3444.2\n3531.4\n3661.4\n3445.1\n3477.3\n4235.3\n3794.5\n3205\n3803.3\n3254.4\n2932.6\n3109.5\n2778.8\n2840.2\n3074.3\n2898.5\n2727.9\n3112.4\n2860.6\n2596.1\n2657.6\n2831.8\n2579.4\n2818.9\n2439.5\n2806.3\n2926.2\n2439.5\n2706\n2556.9\n2591.1999999999998\n2087.8000000000002\n2219.6999999999998\n2325.6\n2359.1999999999998\n2533.6999999999998\n2309.5\n2639.7\n2803.8\n2424.4\n2698.9\n2562.1999999999998\n2803.4\n2566.8000000000002\n2473.3000000000002\n2939.2\n2964.8\n2853.7\n2780.9\n2980.7\n2875.4\n2852.4\n2724.1\n2374.3000000000002\n2719.1\n2344\n2314.3000000000002\n2700.2\n2477.1\n2585.9\n2306.3000000000002\n2440.3000000000002\n2798.7\n2362.6999999999998\n2301.9\n2218.9\n2525.5\n2030.4\n1998.6\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\n\n\nOceania (Million Dollars)\n1399.9\n664.4\n1329.8\n1544.6\n935.9\n1060.6\n1141.8\n1164.7\n1559.1\n863.9\n814.4\n810.4\n744.8\n994.1\n1021.2\n599.8\n744.0\n1201.2\n890.1\n1001.7\n1030.5\n1131.0\n1134.7\n705.5\n540.9\n1412.8\n577.3\n477.7\n586.5\n493.1\n456.4\n441.8\n637.6\n845.9\n694.7\n819.7\n1369.3\n841.1\n941.8\n866.8\n1015.1\n815.3\n503.7\n889.4\n820.3\n518.9\n787.2\n614.4\n895.3\n875.7\n801.7\n686.2\n827.4\n773.2\n828.5\n793.2\n490.3\n651.5\n600.3\n591.8\n576.9\n992.2\n570.3\n462.7\n436.4\n1014.6\n486.0\n674.8\n409.0\n708.7\n402.9\n456.0\n524.8\n576.5\n471.9\n434.6\n433.7\n394.6\n588.5\n498.8\n545.2\n642.5\n665.9\n658.6\n513.8\n377.5\n869.1\n614.7\n595.3\n707.2\n554.5\n545.9\n794.3\n1145.2\n871.8\n778.3\n1027.5\n694.5\n1065.0\n1173.7\n865.4\n754.7\n844.3\n952.1\n755.7\n802.2\n907.8\n1280.1\n602.79999999999995\n496.1\n845\n704.2\n770.3\n763.5\n484.7\n810.2\n753.7\n709.2\n550.6\n386.7\n777.3\n713\n943.7\n767.3\n731.7\n620.79999999999995\n766.6\n443.9\n483.5\n876.3\n395.7\n415\n509.8\n705.5\n537\n591.9\n601.1\n469.8\n617.1\n523.29999999999995\n391.5\n441.2\n485.4\n620.29999999999995\n449.3\n450.7\n330.1\n439.4\n714.1\n628.5\n386.3\n430.9\n655.5\n629.4\n438.6\n590.1\n722.7\n643.79999999999995\n665.7\n495.9\n586.79999999999995\n614.6\n541.1\n668.1\n514.9\n649.6\n437\n552.20000000000005\n453.1\n601.70000000000005\n671.3\n751.9\n639.5\n763.3\n810.9\n793.6\n770.3\n575.1\n479.9\n751.6\n461.9\n530.79999999999995\n569.6\n374.5\n539\n500.9\n489.9\n509\n424.4\n446\n350.4\n430.7\n618\n459.9\n490\n535.29999999999995\n609\n627.1\n916.9\n484.9\n422.6\n457.8\n612.9\n373\n585.20000000000005\n604.9\n589.29999999999995\n499.9\n450.5\n488.6\n426.7\n549\n336.9\n511.7\n283.89999999999998\n358.8\n426.9\n432.2\n302.2\n451.8\n440.2\n450.9\n373.7\n383.1\n409.4\n324.2\n336.8\n291.39999999999998\n355.5\n335.4\n310.39999999999998\n370.8\n296.10000000000002\n307.10000000000002\n315\n357.5\n457.3\n471.3\n525.6\n427.8\n321.10000000000002\n463.6\n383.1\n506.7\n496.9\n398.5\n367.1\n475.5\n405.2\n460.7\n364.7\n517.1\n323.10000000000002\n284.60000000000002\n504.7\n322.3\n487.3\n291.39999999999998\n460.9\n441.2\n370.6\n404.3\n523.1\n268.60000000000002\n365.5\n460.1\n450.7\n408.5\n445.8\n359.2\n409.5\n314.60000000000002\n356.8\n276.10000000000002\n261.3\n275.89999999999998\n336.2\n268.60000000000002\n244.1\n259.3\n255.3\n200.5\n216.6\n235.5\n235.9\n215.1\n187.4\n190.8\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna\nna"
  },
  {
    "objectID": "indexTakehome.html#take-home-exercise-02-r",
    "href": "indexTakehome.html#take-home-exercise-02-r",
    "title": "Take-home Exercise",
    "section": "Take-home Exercise 02 (R)",
    "text": "Take-home Exercise 02 (R)"
  },
  {
    "objectID": "indexTakehome.html#take-home-exercise-03-r",
    "href": "indexTakehome.html#take-home-exercise-03-r",
    "title": "Take-home Exercise",
    "section": "Take-home Exercise 03 (R)",
    "text": "Take-home Exercise 03 (R)"
  },
  {
    "objectID": "indexTakehome.html#take-home-exercise-04-r",
    "href": "indexTakehome.html#take-home-exercise-04-r",
    "title": "Take-home Exercise",
    "section": "Take-home Exercise 04 (R)",
    "text": "Take-home Exercise 04 (R)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#getting-started",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Getting Started",
    "text": "Getting Started\n::: callout-info ## Do It Yourself Write a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\nShow the code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmetically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\nThe Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\nImporting the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks <- read_csv(\"data/eventlog.csv\")\n\n\n\nExamining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\n\ntz field stores time zone of the source IP address.\n\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\nData Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nNote: ymd_hms() and hour() are from lubridate package and weekdays() is a base R function.\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nNote: Beside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so theyâll be ordered when plotting\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\nBuilding the Calendar Heatmaps\n\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn from the code chunk: - a tibble data table called grouped is derived by aggregating the attack by wkday and hour fields. - a new field called n is derived by using group_by() and count() functions. - na.omit() is used to exclude missing value. - geom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles. - theme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot. - coord_equal() is used to ensure the plot will have an aspect ratio of 1:1. - scale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination thereâs no need to further preprocess the data.\n\n\nBuilding Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e.Â top4_attacks).\n\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Cycle Plot",
    "text": "Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nData Preparation\n\nStep 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nStep 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n\nStep 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e.Â Vietnam)\n\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n\n\nStep 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nPlotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "1. The task\nIn this take-home exercise, you are required to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques learned in Lesson 4: Fundamentals of Visual Analytics. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.\nFor the purpose of this study, the focus should be on 3-ROOM, 4-ROOM and 5-ROOM types. You can choose to focus on either one housing type or multiple housing types. The study period should be on 2022.\nThe write-up of the take-home exercise should include but not limited to the followings:\n\nDescribe the selection and designed consideration of the analytical data visualisation used. The discussion should limit to not more than 150 words each.\nA reproducible description of the procedures used to prepare the analytical visualisation. Please refer to the peer submission I shared.\nA write-up of not more than 100 words to discuss the patterns reveal by each analytical visualisation prepared.\n\n\n\n2. Packages\nThe code chunk below is used to install and load the required packages onto RStudio.\n\ntidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling. (readr, ggplot2, dplyr, purrr, tidyr, tibble)\npsych: A general purpose toolbox for personality, psychometric theory and experimental psychology. Functions are primarily for multivariate analysis and scale construction using factor analysis, principal component analysis, cluster analysis and reliability analysis, although others provide basic descriptive statistics.\nlubridate: Provides tools that make it easier to parse and manipulate dates. These tools are grouped below by common purpose.\nggrepel: This package contains extra geoms for ggplot2.\n\n\npackages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly')\nfor(p in packages){\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\n\n\n3. Data\nThe original dataset âResale flat princes based on registration date from Jan-2017 onwardsâ was obtained from Data.gov.sg. This dataset provides information on all resale HDB flat transactions from 2017 to 2023. The notable features in this dataset are as follows:\ni) town: the town of the associated HDB flat\nii) flat_type: the type of flat of the associated HDB flat. In Singapore, there are 1-room flats up to 5-room flats, as well as executive flats, which are slightly bigger than 5-room flats. (The remaining flat type: Multi-generational flats, are few and far between)\niii) block: the block of the associated HDB flat\niv) street: the street of the associated HDB flat\nv) storey_range: the storey range of the associated HDB flat. In this dataset, the storey range is given in a range of 3 (e.g.Â 10 to 12 , which means the flat is based on the 10th to 12th storey).\nvi) floor_area_sqm: the floor area of the associated HDB flat in square meter.\nvii) lease_commence_date: The month and year from when the lease (i.e., 99-year lease, 999-year lease, or freehold) on the property starts.\nvii) remaining_lease: the remaining lease of the associated HDB flat in months and years\nviii) resale_price: the resale price of the assocaited HDB flat\n\nData Preparation\nThe source file is in csv format, hence read_csv of readr package is used to import the dataset. Then we use summary function to see the statistical summary of our original data set. From te result below, we will see that our original data has 146,215 rows with 11 columns ( 8 categorical fields and 3 numeric fields).\n\n\nCode\n# Read data \ndata_raw <- read_csv(\"data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\n\n# show data summary\nsummary(data_raw)\n\n\n    month               town            flat_type            block          \n Length:146215      Length:146215      Length:146215      Length:146215     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n street_name        storey_range       floor_area_sqm    flat_model       \n Length:146215      Length:146215      Min.   : 31.00   Length:146215     \n Class :character   Class :character   1st Qu.: 82.00   Class :character  \n Mode  :character   Mode  :character   Median : 94.00   Mode  :character  \n                                       Mean   : 97.61                     \n                                       3rd Qu.:113.00                     \n                                       Max.   :249.00                     \n lease_commence_date remaining_lease     resale_price    \n Min.   :1966        Length:146215      Min.   : 140000  \n 1st Qu.:1985        Class :character   1st Qu.: 358000  \n Median :1996        Mode  :character   Median : 448000  \n Mean   :1996                           Mean   : 477991  \n 3rd Qu.:2007                           3rd Qu.: 565000  \n Max.   :2019                           Max.   :1418000  \n\n\nUse head command to see the first 5 rows of the data.\n\n\nCode\nknitr::kable(\n  head(data_raw,5)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmonth\ntown\nflat_type\nblock\nstreet_name\nstorey_range\nfloor_area_sqm\nflat_model\nlease_commence_date\nremaining_lease\nresale_price\n\n\n\n\n2017-01\nANG MO KIO\n2 ROOM\n406\nANG MO KIO AVE 10\n10 TO 12\n44\nImproved\n1979\n61 years 04 months\n232000\n\n\n2017-01\nANG MO KIO\n3 ROOM\n108\nANG MO KIO AVE 4\n01 TO 03\n67\nNew Generation\n1978\n60 years 07 months\n250000\n\n\n2017-01\nANG MO KIO\n3 ROOM\n602\nANG MO KIO AVE 5\n01 TO 03\n67\nNew Generation\n1980\n62 years 05 months\n262000\n\n\n2017-01\nANG MO KIO\n3 ROOM\n465\nANG MO KIO AVE 10\n04 TO 06\n68\nNew Generation\n1980\n62 years 01 month\n265000\n\n\n2017-01\nANG MO KIO\n3 ROOM\n601\nANG MO KIO AVE 5\n01 TO 03\n67\nNew Generation\n1980\n62 years 05 months\n265000\n\n\n\n\n\n\n# Create field \"quarter\", \"month\", and \"year\ndata <- data_raw %>%\n  mutate(quarter = quarter(ym(month))) %>%\n  mutate(Month = month(ym(month))) %>%\n  mutate(Year = year(ym(month))) %>% \n  mutate(month = as.Date(paste(month, \"-01\", sep=\"\"), format=\"%Y -%m -%d\")) %>% \n  rename(\"YM\" = \"month\")\n\n# Change format of price to represent in kSGD\ndata <- data %>% \n  mutate(\"resale_price_kSGD\" = resale_price/1000)\n\n# Filter flat types 3-Room, 4-Room, 5-Room and filter only Year of 2022\ndata_2022 <- data %>% \n  filter(flat_type %in% c(\"3 ROOM\",\"4 ROOM\", \"5 ROOM\")) %>%\n  filter(Year == \"2022\")\n\nHere, we can see that our data now only has 24,374 rows left after filter year and flat type.\n\n\n       YM                 town            flat_type            block          \n Min.   :2022-01-01   Length:24374       Length:24374       Length:24374      \n 1st Qu.:2022-04-01   Class :character   Class :character   Class :character  \n Median :2022-07-01   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2022-06-16                                                           \n 3rd Qu.:2022-09-01                                                           \n Max.   :2022-12-01                                                           \n street_name        storey_range       floor_area_sqm    flat_model       \n Length:24374       Length:24374       Min.   : 51.00   Length:24374      \n Class :character   Class :character   1st Qu.: 81.00   Class :character  \n Mode  :character   Mode  :character   Median : 93.00   Mode  :character  \n                                       Mean   : 94.07                     \n                                       3rd Qu.:110.00                     \n                                       Max.   :159.00                     \n lease_commence_date remaining_lease     resale_price        quarter     \n Min.   :1967        Length:24374       Min.   : 200000   Min.   :1.000  \n 1st Qu.:1985        Class :character   1st Qu.: 428000   1st Qu.:2.000  \n Median :1998        Mode  :character   Median : 515000   Median :3.000  \n Mean   :1997                           Mean   : 536391   Mean   :2.498  \n 3rd Qu.:2014                           3rd Qu.: 610000   3rd Qu.:3.000  \n Max.   :2019                           Max.   :1418000   Max.   :4.000  \n     Month           Year      resale_price_kSGD\n Min.   : 1.0   Min.   :2022   Min.   : 200.0   \n 1st Qu.: 4.0   1st Qu.:2022   1st Qu.: 428.0   \n Median : 7.0   Median :2022   Median : 515.0   \n Mean   : 6.5   Mean   :2022   Mean   : 536.4   \n 3rd Qu.: 9.0   3rd Qu.:2022   3rd Qu.: 610.0   \n Max.   :12.0   Max.   :2022   Max.   :1418.0   \n\n\nOur data is now ready for visualization.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYM\ntown\nflat_type\nblock\nstreet_name\nstorey_range\nfloor_area_sqm\nflat_model\nlease_commence_date\nremaining_lease\nresale_price\nquarter\nMonth\nYear\nresale_price_kSGD\n\n\n\n\n2022-01-01\nANG MO KIO\n3 ROOM\n320\nANG MO KIO AVE 1\n07 TO 09\n73\nNew Generation\n1977\n54 years 05 months\n358000\n1\n1\n2022\n358\n\n\n2022-01-01\nANG MO KIO\n3 ROOM\n225\nANG MO KIO AVE 1\n07 TO 09\n67\nNew Generation\n1978\n55 years 01 month\n355000\n1\n1\n2022\n355\n\n\n2022-01-01\nANG MO KIO\n3 ROOM\n331\nANG MO KIO AVE 1\n07 TO 09\n68\nNew Generation\n1981\n58 years\n338000\n1\n1\n2022\n338\n\n\n2022-01-01\nANG MO KIO\n3 ROOM\n534\nANG MO KIO AVE 10\n07 TO 09\n82\nNew Generation\n1980\n57 years 02 months\n420000\n1\n1\n2022\n420\n\n\n2022-01-01\nANG MO KIO\n3 ROOM\n578\nANG MO KIO AVE 10\n04 TO 06\n67\nNew Generation\n1980\n57 years 01 month\n328000\n1\n1\n2022\n328\n\n\n\n\n\n\n\n\n4. Exploratory Data Analysis and Visualization\nUsing the describe() function on the continuous variables, you can get a sense-check of the data and see if there were any errors in the feature engineering. These are the summary statistics that were observed:\n\nResale Price â The prices of the flats range between $200K to $1,418K with a mean of $536K\nFloor Area â The sizes of the flats range between 51sqm to 159sqm, with a mean of 94.07sqm\nRemaining Lease â The lease commence date of the flats range between 43 years to 96 years\n\n\n\nCode\nknitr:: kable(\n  data_2022 %>% \n    select(floor_area_sqm, remaining_lease, resale_price) %>%\n    na.omit() %>% \n    describe()\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvars\nn\nmean\nsd\nmedian\ntrimmed\nmad\nmin\nmax\nrange\nskew\nkurtosis\nse\n\n\n\n\nfloor_area_sqm\n1\n24374\n94.07497\n19.32042\n93\n93.98708\n25.2042\n51\n159\n108\n-0.0566164\n-0.8508218\n0.1237523\n\n\nremaining_lease*\n2\n24374\n376.28600\n180.21525\n377\n380.98656\n247.5942\n1\n638\n637\n-0.0378131\n-1.3214875\n1.1543251\n\n\nresale_price\n3\n24374\n536391.16792\n157993.72136\n515000\n520461.65003\n133434.0000\n200000\n1418000\n1218000\n1.0935155\n1.8129983\n1011.9904756\n\n\n\n\n\nAs graphical summaries can reveal issues that are not obvious from numerical statistics, we will use visualization approaches to convey the underlying insights in this project.\n\nComparison of resale price per sqm among different types of flats\nWe would like to compare price per sqm among 3 types of flat i.e.Â 3-ROOM, 4-ROOM, and 5-ROOM. To confirm the validity of the hypothesis that the average resale price per sqm are the same among 3 flat types, we the following null hypothesis will be tested.\nH0: The average resale price per sqm among 3 flat types are the same\nH1: The average resale price per sqm among 3 flat types are different\nTo begin the confirmatory data analysis, we would like to test the normality assumption for the distribution of the average resaleÂ price per sqmÂ for each type of flat. We use a ridge plot to visualize the distribution of three distinct types simultaneously. All three categories have a right-skewed distribution in the outcome plot.\n\n\nCode\nlibrary(ggstatsplot)\nlibrary(ggplot2)\nlibrary(ggridges)\n\ndist <- data_2022 %>%\n  group_by(flat_type) %>%\n  mutate(price_per_sqm = resale_price/floor_area_sqm)\n\nggplot(dist, aes(x=price_per_sqm, y=flat_type)) +\n  geom_density_ridges(fill = \"steelblue\", alpha = 0.5)+\n  labs(title = \"Distribution of Price per sqm\", \n       x = \"Price per sqm\", \n       y = \"Flat Type\")+\n  theme_minimal()\n\n\n\n\n\nNevertheless, visual examination alone is insufficient. A significance test comparing the sample distribution to a normal distribution can be used to determine whether or not data exhibit a significant deviationÂ from normality. Therefore, Shapiro-test Wilkâs method is chosen for the normality test confirmation. Shapiro-test Wilkâs test statistics suggest that there is enough statistically evidence to reject the null hypothesis that the distribution of price per sqm are normally distributed. Therefore, we will use non-parametric test to prove our hypothesis.\n\n\n\n    Shapiro-Wilk normality test\n\ndata:  sample(dist$price_per_sqm, 5000)\nW = 0.84717, p-value < 2.2e-16\n\n\nThe following packages are required for this visualization\n\nggstatplot: an extension of ggplot2 package for creating graphics with details from statistical tests included in the plots themselves and targeted primarily at behavioral sciences community to provide a one-line code to produce information-rich plots.\n\nAs we are comparing between more than 2 groups, ANOVA is automatically selected by the function. As the p-value for each pair is less than the 0.05 threshold, there is sufficient statistical evidence to reject the null hypothesis. Thus, we may conclude that the average resale price per sqm for three distinct types of apartments are different.\n\nggbetweenstats(dist,\n               x = \"flat_type\",\n               y = \"price_per_sqm\",\n               type = 'np'\n               ) +\n  ggtitle(\"Comparison of resale price per sqm among different types of flats\")\n\n\n\n\n\n\nSignificant Test of Correlation between resale price and floor area\nScatterplots illustrate the relationship between two numerical variables. Each dot stands for an observation. The position of the two variables along the X (horizontal) and Y (vertical) axes represents their respective values. In this scenario, we evaluate the relationship between price and floor area using a scatter plot.We complement the scatter points with the linear model of a straight line. The various angles of the line reflect the various relationships between price and area in each town. This figure also shows that the relationship in some towns, such as CENTRAL AREA, might not seems linear, although it is linear in others, such as BUKIT TIMAH.\n\n\nCode\ng <- ggscatterstats(\n  data = data_2022,\n  x = floor_area_sqm,\n  y = resale_price,\n  marginal = FALSE,\n  point.args = list(size = 0.5, stroke = 0, color = \"steelblue\"),\n  smooth.line.args = list(linewidth = 0.5, color = \"grey\", method = \"lm\", formula = y ~ x)) +  facet_wrap (~ town, nrow = 6, ncol = 6) +\n  xlab(\"floor area\") +\n  scale_y_continuous(breaks = c(0,3000,6000,9000,12000), name = \"Resale price\") +\n  labs(title = \"Correlation between resale price and floor area\") \n\nggplotly(g)\n\n\n\n\n\n\n\n\nChecking for normality and linearity\nBefore drawing conclusions, plotting the correlations will allow us to confirm that they are linear. Here is some code to determine if our data is normally distributed or bell-shaped.\nThe result demonstrates that our data are not normally distributed, as the p-value of the Shapiro-Wilk test is less than 0.05. The scatter falls outside the shaded area, reflecting the same conclusion as the Shapiro-Wilk test. The shaded gray area in the plot represents the quantile confidence bands at 95%. A pattern of observed quantiles in which some points fall outside of these borders suggests an out-of-the-ordinary sample if drawn from a Normal distribution.\n\nlibrary(ggpubr)\nggqqplot(data_2022$floor_area_sqm)\nggqqplot(data_2022$resale_price_kSGD)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Shapiro-Wilk normality test\n\ndata:  sample(data_2022$floor_area_sqm, 5000)\nW = 0.96248, p-value < 2.2e-16\n\n\n\n    Shapiro-Wilk normality test\n\ndata:  sample(data_2022$resale_price_kSGD, 5000)\nW = 0.9359, p-value < 2.2e-16\n\n\n\nSince our data are not normally distributed, we will use a Spearman correlation that is non-parametric. In addition, we detected some outliers (>3), hence we will employ the Robust correlation technique to decrease the influence of outliers.\n\n\nCode\nggscatterstats(data = data_2022 |> filter(town == \"CENTRAL AREA\"), \n                           x = floor_area_sqm, y = resale_price_kSGD,\n                           type = \"robust\") + \n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +\n  labs(title = \"CENTRAL AREA\", \n       x = \"floor area (sqm)\", y = \"resale price(kSGD)\") +\n  scale_x_continuous(limits = c(50, 150)) +\n  scale_y_continuous(limits = c(0, 1500)) \nggscatterstats(data = data_2022 |> filter(town == \"CHOA CHU KANG\"), \n                           x = floor_area_sqm, y = resale_price_kSGD,\n                           type = \"robust\") + \n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +\n  labs(title = \"CHOA CHU KANG\", \n       x = \"floor area (sqm)\", y = \"resale price(kSGD)\")+\n  scale_x_continuous(limits = c(50, 150)) +\n  scale_y_continuous(limits = c(0, 1500))\n\n\n\n\n\n\n\n\n\n\n\n\n\nour very low P-value shows a very strong evidence against the null hypothesis, that there is no correlation between our variables, in favor of the alternative hypothesis, that floor area and resale price are correlated for both town selected.\nThe presence of a positive winsorised correlation coefficient value in both CENTRAL AREA and CHOA CHU KANG indicates that increasing the floor area (sqm) of flats raises the resale price. In other words,the larger the floor area, the higher the price of the flat.\nThe correlation coefficient indicates the effect size and ranges from -1 to 1. CENTRAL AREA has a correlation value of 0.83, which is higher than CHOA CHU KANGâs correlation coefficient of 0.52, indicating a stronger correlation between the floor area and price in CENTRAL AREA.\n\n\n\nPrices shifted in 2022 for different flat types\nWe display a quarterly boxplot to illustrate the price trend over time for different types of flats. There are numerous outliers with extremely high resale prices in 3, 4, and 5 ROOM.\n\n\nCode\ndata_2022 %>%\n  group_by(flat_type) %>%\n  ggplot(mapping = aes(x = flat_type, y = resale_price_kSGD)) +\n  # Make grouped boxplot\n  geom_boxplot(aes(fill = as.factor(quarter)), color = \"grey\") +\n    stat_summary(fun=mean, geom=\"point\", color=\"red\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_fill_viridis_d(option = \"C\") +\n  # Adjust lables and add title\n  labs(title = \"Resale prices in 2022 by quarter\", y=\"Resale price (kSGD)\", x=\"\", fill = \"Quarter\")\n\n\n\n\n\nWe utilize Wilcoxon rank sum test to confirm our hypothesis that there is a pricing difference between Quarter 1 and Quarter 4. Nonparametric Friedman test is selected as residuals are not-normally distributed.\nIn Wilcoxon rank sum test, medians are only used to better describe not-normally distributed data, but medians are not used to compare groups. In fact the difference in ranks can be significant even when medians are identical.\n\n\nCode\n# 3 ROOM\nthree <- data_2022 %>% \n  filter(quarter %in% c(\"1\", \"4\")) %>% \n  filter(flat_type == \"3 ROOM\")\n  \nggbetweenstats(three,\n               x = \"quarter\",\n               y = \"resale_price_kSGD\",\n               type = 'np'\n               ) +\n  ggtitle(\"3 ROOM\")\n# 4 ROOM\nfour <- data_2022 %>% \n  filter(quarter %in% c(\"1\", \"4\")) %>% \n  filter(flat_type == \"4 ROOM\")\n  \n  \nggbetweenstats(four,\n               x = \"quarter\",\n               y = \"resale_price_kSGD\",\n               type = 'np'\n               ) +\n  ggtitle(\"4 ROOM\")\n# 5 ROOM\nfive <- data_2022 %>% \n  filter(quarter %in% c(\"1\", \"4\")) %>% \n  filter(flat_type == \"5 ROOM\")\n  \n  \nggbetweenstats(five,\n               x = \"quarter\",\n               y = \"resale_price_kSGD\",\n               type = 'np'\n               ) +\n  ggtitle(\"5 ROOM\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nour very low P-value shows a very strong evidence against the null hypothesis (H0), in favor of the alternative hypothesis (HAlt), that sample-medians are different. That tells us that the price in Q4 is significantly increased from Q1.\nP-value only tells that there is an effect from training, but not how strong this effect is. {ggwithinstats} provides the measure of the Effect Size for Repeated Measures ANOVA, which shows that training effect of -0.21 and -0.22.\nThe Wilcoxon rank sum test with continuity correction testing the difference in ranks between price and area. The result suggests that the effects are negative, statistically significant.\n\n\n\nFlat type transaction proportion\nWeâre curious about the proportion of transacted flat types in each area. As a result, a stacked bar graph is used, in which the length or height of each bar is proportionally equivalent to the data that it depicts. This type of chart has the flaw of representing bar height in relative terms, which does not reflect the actual quantity. However, it has the advantage of making proportion visualization easier for small groups e.g.Â Bukit Timah. The stacked bar chart below shows a relatively low number of 3-ROOM type transactions in PUNGGOL and a high proportion of 5-ROOM type transactions in PASIR RIS.\n\n# Proportional stacked bar chart\nggplot(data_2022, aes(y=town, fill=flat_type)) +\n  geom_bar(position = \"fill\") +\n  scale_fill_viridis_d(option = \"E\") +\n  labs(title = \"Flat type transaction proportion\", fill = \"Flat type\",\n       x = \"\", y = \"\")\n# Stacked bar chart\nggplot(data_2022, aes(y=town, fill = flat_type))+\n  geom_bar()+\n    scale_fill_viridis_d(option = \"E\") +\n  labs(title = \"Flat type transaction\", fill = \"Flat type\",\n       x = \"\", y = \"\")\n\n\n\n\n\n\n\n\n\n\n\nWe will utilize ggbarstats function which provide us the statistic result.\n\nggbarstats(\n  data             = data_2022,\n  x                = flat_type,\n  y                = town,\n  title            = \"Flat type transaction proportion\",\n  xlab             = \"\",\n\n  ggplot.component = list(ggplot2::scale_x_discrete(guide = ggplot2::guide_axis(n.dodge = 2))),\n  palette          = \"Set3\",\n  coord.flip   = TRUE\n)  + theme(axis.text.x = element_text(size = 10, angle = 90))\n\n\n\n\nggbarstats function goes one step further and displays percentages of flat type inside of every town as stacked-bars, where counts are identical to the previous plot, but every town category as one 100 percent.\n\n\nTrend of Singapore Resale flat prices in 2022\nThe geofacet package was chosen to provide a high-level data visualization based on their location. Price trends for each room type are depicted by town using multiple line plots of varying colors to identify each room type. The geofacet maps, which plot based on its geographical position, make it easier to compare areas nearby.\nThe geofacet package requireds a grid file that will be used to assign row and column positions to each area. Thus, it is crucial to ensure that the name in the grid file corresponds to the name of our data area.\nThe following packages are required for plotting geofacet.\n\ngeofacet: The geofacet R package provides a way to flexibly visualize data for different geographical regions by providing a ggplot2 faceting function facet_geo() which works just like ggplot2âs built-in faceting, except that the resulting arrangement of panels follows a grid that mimics the original geographic topology as closely as possible.\n\nTo generate a geofacet plot, we first import our data and Singaporeâs grid table. The case of the grid area names is changed to uppercase. In our data, KALLANG is referred to as KALLANG/WHAMPOA, whereas the grid refers to CENTRAL AREA as DOWNTOWN CORE. After correcting these mismatches, we combine the tables to add the column and row fields to our primary data.\n\n\nCode\n# Import data \ngeofacet <- data_2022\n\n# Recode town name to match with area grid\ngeofacet <- geofacet %>% \n  mutate(town = fct_collapse(town, \"KALLANG\" = \"KALLANG/WHAMPOA\"))\n\n# Import the area grid data.\narea_grid <- read_csv(\"data/areagrid.csv\")\n\n# Recode name to match with geofacet data\narea_grid$name <- toupper(area_grid$name)\n\narea_grid <- area_grid %>% \n  mutate(name = fct_collapse(name, \"CENTRAL AREA\" = \"DOWNTOWN CORE\"))\n\ngeofacet <- geofacet %>%\n  group_by(YM, town, flat_type) %>%\n  summarise(avgprice = mean(resale_price, na.rm = TRUE),\n            medprice = median(resale_price, na.rm = TRUE))%>%\n  ungroup()\n\n# merge table with town name\ngeofacet_price <- inner_join(geofacet, area_grid,\n                      by = c(\"town\" = \"name\"))\n\ncommon_grid <- area_grid[area_grid$name %in% unique(geofacet$town),]\n\n\nThis is how the data used for plotting geofacet look likes.\n\n\n\n\n\nYM\ntown\nflat_type\navgprice\nmedprice\nrow\ncol\ncode\n\n\n\n\n2022-01-01\nANG MO KIO\n3 ROOM\n349068.4\n343888\n3\n8\nAM\n\n\n2022-01-01\nANG MO KIO\n4 ROOM\n491894.3\n457500\n3\n8\nAM\n\n\n2022-01-01\nANG MO KIO\n5 ROOM\n741989.8\n695000\n3\n8\nAM\n\n\n2022-01-01\nBEDOK\n3 ROOM\n347235.2\n338000\n4\n11\nBD\n\n\n2022-01-01\nBEDOK\n4 ROOM\n520911.6\n475000\n4\n11\nBD\n\n\n\n\n\nAccording to the plot, the resale price trend in the Central area, particularly room types 4-room and 5-room, is much greater than the other locations with a rising trends in Q4. In the first quarter, the average price of a 5-room type swing increased significantly. We observe a low and consistent pricing trend at the countryâs border, which is distant from the central region.\n\nlibrary(geofacet)\n\nggplot(geofacet_price, aes(x = YM, y = avgprice)) +\n  geom_line(aes(color = as.factor(flat_type))) +\n  scale_x_date(date_labels = \"%b\") +\n  facet_geo(~ town, grid = common_grid) +\n  labs(title = \"Singapore Resale flat price trends\") +\n  scale_y_continuous(breaks = c(250000, 500000, 750000, 1000000, 1250000)) +\n  theme(plot.title = element_text(size=22),\n        axis.text.x = element_text(size = 10, angle = 45),\n        axis.text.y = element_text(size = 10),\n        strip.text = element_text(size = 10),\n        legend.position = \"top\")\n\n\n\n\n\n\nResale flat type by town\nAs we look for a way to display multiple continuous variables concurrently, the bubble chart is our first choice. The primary purpose of a bubble chart is to illustrate the relationships between numerical variables, and it can represent two to four dimensions. The first two dimensions represent coordinates, while the third represents color and the fourth represents size. In our case, we select 3 variables for this visualization i.e.Â average price, average housing age, and average floor area.\nggplot2 package is used to create the bubble chart.\n\nggplot2: A system for âdeclarativelyâ creating graphics, based on âThe Grammar of Graphicsâ.\n\nAccording to the graph below, the average age of resale apartments in MARINE PARADE is above 45 years, while the average price is in the middle of the price range. CENTRAL AREA has the highest average price, an average age of approximately 30 years, and the smallest average floor area. Whereas, the new flats are located in PUNGGOL, SEMBAWANG, and SENGKANG and have a comparatively large floor area.\n\ndata_2022 %>%\n  group_by(town) %>%\n  # Calculate housing age\n  mutate(housing_age = 2022 - lease_commence_date) %>%\n  summarise(average_price = mean(resale_price_kSGD), average_housing_age = mean(housing_age), average_area = mean(floor_area_sqm)) %>%\n  ggplot(mapping = aes(x=average_housing_age, y=average_price, size = average_area)) +\n  geom_count(aes(color = average_housing_age), alpha = 0.6) +\n  # Change size of count points\n\n  # Add lables next to count points\n  geom_text_repel(aes(label = town),size = 2.0) +\n  scale_size(range = c(.1, 24), name=\"Average floor area\")+\n  scale_y_continuous( limits = c(400, 800)) +\n  scale_x_continuous( limits = c(0, 50)) +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_color_viridis_c(option = \"C\")\n\n\n\n\n\n\nPrices per area for each storey range\nA heatmap is a graphical representation of data that uses colors to represent the individual values in a matrix. The price per area of each storey range in each town is shown here.This visualization is useful for providing a quick overview, but it is difficult to translate a hue into a specific number. From the plot, we can see that some storey ranges in certain areas cost much higher prices per square foot than other ranges, such as the 4-6 storey range in BUKIT PANJANG.\n\nlibrary(ggplot2)\nlibrary(hrbrthemes)\n\nheatmap <- data_2022 %>%\n  group_by(flat_type) %>%\n  mutate(price_per_sqm = resale_price/floor_area_sqm)\n\np <-  ggplot(heatmap , aes(town, storey_range, fill= price_per_sqm, text = price_per_sqm)) +\n  scale_fill_distiller(palette = \"RdPu\") +\n  theme_ipsum() + \n  geom_tile() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1.5, hjust=1))+\n  labs(title = \"Price per area for each storey range\", x=\"\", y=\"\") \n\nggplotly(p, tooltip= \"text\")\n\n\n\n\n\n\n\nGroup Box plot : Resale prices in 2022 by town\n\ndata_2022 %>%\n  group_by(flat_type) %>%\n  # Extract quarter and price per sqm\n  mutate(price_per_sqm = resale_price_kSGD/floor_area_sqm) %>%\n  ggplot(mapping = aes(x = town, y = price_per_sqm)) +\n  # Make grouped boxplot\n  geom_boxplot(aes(fill = as.factor(flat_type)), color = \"grey\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_fill_viridis_d(option = \"C\") +\n  # Adjust lables and add title\n  labs(title = \"HDB resale prices in 2022 by town\", y=\"Price per square metre (SGD)\", fill = \"flat_type\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\n\n\n\n5. References\nhttps://xang1234.github.io/pyramidgeofacet/\nhttps://yuzar-blog.netlify.app/posts/2021-12-29-correlationinr/\nhttps://r4ds.had.co.nz/index.html\nhttps://rpubs.com/tskam/Choropleth_Mapping\nhttps://r-graph-gallery.com/267-reorder-a-variable-in-ggplot2.html\nhttps://wangjing.city/wp-content/uploads/2021/05/Looking-into-Singapore-Resale-Flats-Market.html\nhttps://towardsdatascience.com/understanding-and-predicting-resale-hdb-flat-prices-in-singapore-1853ec7069b0\nhttps://rpubs.com/chunwey/LinearR2\nhttps://www.linkedin.com/pulse/data-analytics-understanding-resale-prices-hdb-houses-bannister/?trk=read_related_article-card_title\nhttps://wangjing.city/portfolio/looking-into-singapore-resale-flats-market/\nhttps://stackoverflow.com/questions/1330989/rotating-and-spacing-axis-labels-in-ggplot2\nhttp://www.sthda.com/english/wiki/ggplot2-axis-ticks-a-guide-to-customize-tick-marks-and-labels"
  }
]