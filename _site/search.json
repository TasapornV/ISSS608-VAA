[
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "In this take-home exercise, you are required to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore bi-lateral trade (i.e. Import, Export and Trade Balance) by using appropriate analytical visualisation techniques learned in Lesson 6: It’s About Time. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#data-preparation",
    "title": "Take-home Exercise 4",
    "section": "2.1 Data Preparation",
    "text": "2.1 Data Preparation\nMerchandise Trade provided by Department of Statistics, Singapore (DOS) is used. Pay attention to the fact that the data is in xlsx format with several tabs. As a result, we will manage using functions from the readxl packages.\nStep 1. Checking the number of sheets it contains\nTo list all sheets in an excel spreadsheet, we utilize the readxl package’s function excel sheet.\n\nexcel_sheets(\"data/data.xlsx\")\n\n[1] \"Content\" \"T1\"      \"T2\"     \n\n\nStep 2. Importing data\nThe readxl package’s read_xlsx() function is used in the code chunk below to import the data worksheet of our data workbook into R.\n\nT1 <- read_xlsx(\"data/data.xlsx\", sheet = \"T1\")\nT2 <- read_xlsx(\"data/data.xlsx\", sheet = \"T2\")\n\nStep 3. Transpose the fat table to long table\nGather takes multiple columns and collapses into key-value pairs, duplicating all other columns as needed. You use gather() when you notice that you have columns that are not variables. This function is under tidyr package.\n\nT1 <- gather(T1, \"MonthYear\", \"ImportValue\", -`Data Series`)\nT2 <- gather(T2, \"MonthYear\", \"ExportValue\", -`Data Series`)\n\n\n\n\n\n\n\nData Series\nMonthYear\nImportValue\n\n\n\n\nTotal Merchandise Imports (Thousand Dollars)\n2022 Dec\n49869770\n\n\nAmerica (Million Dollars)\n2022 Dec\n6901.5\n\n\nAsia (Million Dollars)\n2022 Dec\n33611.7\n\n\nEurope (Million Dollars)\n2022 Dec\n7541.8\n\n\nOceania (Million Dollars)\n2022 Dec\n1399.9\n\n\n\n\n\n\n\n\nData Series\nMonthYear\nExportValue\n\n\n\n\nTotal Merchandise Exports (Thousand Dollars)\n2022 Dec\n55000084\n\n\nAmerica (Million Dollars)\n2022 Dec\n6217.5\n\n\nAsia (Million Dollars)\n2022 Dec\n39734.8\n\n\nEurope (Million Dollars)\n2022 Dec\n4924.4\n\n\nOceania (Million Dollars)\n2022 Dec\n3034.8\n\n\n\n\n\n\nStep 4. Convert MonthYear column to date format\nFor our time series analysis, we then convert the date time to the date format using the ym function from the lubridate package.\n\nT1$`MonthYear` <- ym(T1$`MonthYear`)\nT2$`MonthYear` <- ym(T2$`MonthYear`)\n\n# Convert ImportValue column to numeric format\nT1$`ImportValue` <- as.numeric(T1$`ImportValue`)\nT2$`ExportValue` <- as.numeric(T2$`ExportValue`)\n\nStep 5. Separate region and country\nNotice that the country column contains both country and region-level information. To prevent misleading analysis, we have created the field Level to distinguish between the Region and Country levels.\n\n# =================== Import =================== #\nRegion <- T1 %>% \n  filter(grepl('Million', `Data Series`)) %>%\n  rename(\"Region\" = \"ImportValue\")\n\nCountry <- T1 %>% \n  filter(grepl('Thousand', `Data Series`)) %>%\n  rename(\"Country\" = \"ImportValue\")\n\nImport <- full_join(Region, Country, by = join_by(`Data Series`, `MonthYear`))\nImport  <- gather(Import , \"Level\", \"ImportValue\", -`Data Series`, -`MonthYear`)\n\n# =================== Export =================== #\nRegion <- T2 %>% \n  filter(grepl('Million', `Data Series`)) %>%\n  rename(\"Region\" = \"ExportValue\")\n\nCountry <- T2 %>% \n  filter(grepl('Thousand', `Data Series`)) %>%\n  rename(\"Country\" = \"ExportValue\")\n\nExport <- full_join(Region, Country, by = join_by(`Data Series`, `MonthYear`))\nExport  <- gather(Export , \"Level\", \"ExportValue\", -`Data Series`, -`MonthYear`)\n\nStep 6. Filter year from 2016 and rename column\nBecause we are focusing on the impact of the Covid epidemic event, we only filter data from 2016 to 2022.\n\nImport <- Import %>%\n  filter(`MonthYear`> as.Date(\"2015-12-01\")) %>% \n  rename(`Country` = `Data Series`)\n\nExport <- Export %>%\n  filter(`MonthYear`> as.Date(\"2015-12-01\")) %>%\n  rename(`Country` = `Data Series`)\n\nStep 7. Merge Import and Export into one table\n\nwide <- full_join(Import, Export, by = join_by(`Country`, `MonthYear`,`Level`))\nwide <- wide %>% \n  mutate(\"Diff\" = ImportValue-ExportValue) %>%\n  mutate(\"Total\" = ImportValue+ExportValue)\nwide$`Country` <- str_replace(wide$`Country`, \"Mainland China\", \"China\")\n wide$`Country` <- str_replace_all(wide$`Country`, \" \\\\(|Thousand Dollars|\\\\)\", \"\")\n wide$`Country` <- str_replace_all(wide$`Country`, \" \\\\(|Million Dollars|\\\\)\", \"\")\n\nlong  <- gather(wide , \"Type\", \"Value\", -`Country`, -`MonthYear`,-`Level`)\n\nAnd now we have both a wide table and a long table prepared for analysis.\nTable Wide : Merchandise Imports/Export By Region/Market, Monthly\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCountry\nMonthYear\nLevel\nImportValue\nExportValue\nDiff\nTotal\n\n\n\n\nAmerica\n2022-12-01\nRegion\n6901.5\n6217.5\n684.0\n13119.0\n\n\nAsia\n2022-12-01\nRegion\n33611.7\n39734.8\n-6123.1\n73346.5\n\n\nEurope\n2022-12-01\nRegion\n7541.8\n4924.4\n2617.4\n12466.2\n\n\nOceania\n2022-12-01\nRegion\n1399.9\n3034.8\n-1634.9\n4434.7\n\n\nAfrica\n2022-12-01\nRegion\n414.9\n1088.6\n-673.7\n1503.5\n\n\n\n\n\nTable Long : Merchandise Imports/Export By Region/Market, Monthly\n\n\n\n\n\nCountry\nMonthYear\nLevel\nType\nValue\n\n\n\n\nAmerica\n2022-12-01\nRegion\nImportValue\n6901.5\n\n\nAsia\n2022-12-01\nRegion\nImportValue\n33611.7\n\n\nEurope\n2022-12-01\nRegion\nImportValue\n7541.8\n\n\nOceania\n2022-12-01\nRegion\nImportValue\n1399.9\n\n\nAfrica\n2022-12-01\nRegion\nImportValue\n414.9"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#uncover-the-singapore-bi-lateral-trend-over-covid-outbreak",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#uncover-the-singapore-bi-lateral-trend-over-covid-outbreak",
    "title": "Take-home Exercise 4",
    "section": "3.1 Uncover the Singapore Bi-lateral trend over Covid outbreak",
    "text": "3.1 Uncover the Singapore Bi-lateral trend over Covid outbreak\nWe begin with a ribbon plot to illustrate the overall pattern of Singapore international trade over time. The function ggbraid helps distinguish between trade surplus and trade deficit by filling the region between two alternating lines with two different colors.\nStep 1. Prepare data for line plot of Singapore\n\n\nCode\nsingapore <- wide %>% \n  subset((Country == \"Total Merchandise Imports\"|Country == \"Total Merchandise Exports\") \n         & Level == \"Country\") %>% \n  group_by(MonthYear) \n\nsingaporeribbon <- singapore %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  gather(\"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`) %>% \n  drop_na()\n\n\nStep 2. Prepare data for line plot of Singapore\n\n\nCode\nhues <- scales::hue_pal()(2) \np <- ggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = singaporeribbon,\n            show.legend = FALSE)  +\n  \n  labs(title = \"Singapore Bi-lateral Trade Trend\", \n       subtitle = \"2016-2022\",\n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  \n  annotate(\"segment\", \n           x = as.Date(\"2020-01-01\"), \n           xend = as.Date(\"2020-01-01\"), \n           y = 0, \n           yend = 70000000,\n           colour = \"red\") +\n  annotate(\"text\",\n           label = \"Covid outbreak\", \n           x = as.Date(\"2020-12-01\"),\n           y=25000000,\n           color = \"red\") +\n  annotate(\"text\", \n           x = as.Date(\"2018-06-01\"), \n           y = 60000000, size = 4, \n           label = \"Export > Import\", \n           hjust = 0, \n           color = hues[1])\np1 <- p+\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`),\n             show.legend = FALSE,\n             data = singapore, \n             alpha = 0.6, \n             method = 'line')\n\np1\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nAs a result of the COVID-19 epidemic, Singapore’s international commerce dropped in 2020\nSingapore has a positive trade balance, or a trade surplus, according to the bilateral trend from 2016 to 2022. Prior to the start of the COVID-19 pandemic in 2020, Singapore’s international trade growth was robust from 2016 to 2019, but it began to weaken in 2019. Due to the outbreak of the COVID-19 pandemic in May 2020, the rate drops dramatically before quickly returning."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#merchandise-trade-performance-with-major-trading-partners",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#merchandise-trade-performance-with-major-trading-partners",
    "title": "Take-home Exercise 4",
    "section": "3.2 Merchandise trade performance with major trading partners",
    "text": "3.2 Merchandise trade performance with major trading partners\nTo illustrate the trade balance with all of Singapore’s trading partners, the bubble plot between import and export is chosen. The X-axis shows Singapore’s import value, while the Y-axis shows Singapore’s export value. Each bubble is colored differently depending on the country it represents.\nThe size of the bubbles indicates the total value of Singapore’s merchandise trade with the trading partner. If the bubble’s center point rises below the line, Singapore’s imports from the trade partner exceed Singapore’s exports. If the bubble’s center point falls beyond the line, Singapore’s exports to the trading partner exceed Singapore’s imports.\nThe graph is animated to emphasize the fluctuating equilibrium over time. Only major trading partners are depicted on the graph to reflect the effect of the key contributors.\nStep 1. Create scatter plot with plotly\n\n\nCode\n# Plot scatter plot\nscatter <- wide %>% \n  subset(Country == \"China\" | Country == \"Malaysia\" | Country == \"Taiwan\" | Country == \"Hong Kong\" | Country == \"Indonesia\" )\n\nfig <- scatter %>%\n  plot_ly(\n    x = ~`ImportValue`,\n    y = ~`ExportValue`,\n    color = ~`Country`,\n    frame = ~as.character(`MonthYear`, format = \"%Y-%m\"),\n    size = ~`Total`,\n    sizes = c(1,10000),\n    text= ~paste(\"Country:\",`Country`,\n                 \"\\nImport Value:\", `ImportValue`, \" Thousand Dollars\",\n                 \"\\nExport Value:\", `ExportValue`, \" Thousand Dollars\",\n                 \"\\nTotal:\", `Total`,\n                 \"\\nMonth Year:\", `MonthYear`), \n    hoverinfo = \"text\",\n    type = 'scatter',\n    mode = 'markers'\n  )\n\n\nStep 2. Set up layout\n\n\nCode\n# Create the diagonal line\ndline <- function(color = \"steelblue\") {\n  list(\n    type = \"line\",\n    yref = \"paper\",\n    xref = \"paper\",\n    y0 = 0, y1 = 1,\n    x0 = 0, x1 = 1,\n    line = list(color = color, dash=\"dot\")\n  )\n}\n\n# Setup layout\nfig <- fig %>% \n  layout(title = list(text=\"MERCHANDISE TRADE PERFORMANCE WITH MAJOR TRADING PARTNERS\"),\n         subtitle = \"2016-2022\",\n         hoverlabel = list(align = \"left\"),\n         shapes = dline(),\n         legend = list(orientation = \"h\", y = 1, x = 0),\n         showlegend = FALSE,\n         xaxis = list(title=\"Import Value\", range = list(0, 10000000)),\n         yaxis = list(title=\"Export Value\", range = list(0, 10000000)),\n         width=650,\n         height=650\n  )\n\n\nStep 3. Set up animation\n\n\nCode\nfig <- fig %>% \n  animation_opts(\n    500, easing = \"linear\", redraw = FALSE\n  )\n\n# Animation slider\nfig <- fig %>% animation_slider(\n  currentvalue = list(prefix = \"MONTH-YEAR :\", font = list(color=\"red\"))\n)\n\nfig\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nChina’s import and export volume declined sharply in the beginning of 2020\nChina bubble declines along the diagonal from December 2019 until February 2020. This implies a significant decline in both imports and exports from China within the specified time frame. But, it returned shortly thereafter.\nWith a similar trajectory to China, the bubble of Malaysia in December 2019 proceeded diagonally downward. Yet, it continued to decline until mid-2020. \nIn May of 2020, the impact of Indonesia is clearly seen by a 25% decline in overall volume.\nUnlike exports to other partners, Singapore’s exports to Hong Kong do not appear to be as affected. However, a faster increase in exports to Hong Kong is observed in 2021.\n\n\nWe employ the ribbon chart once again to assess the impact of Covid-19 on Singapore’s most major trading partners.\n\n\nCode\nbraid <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"China\")\n\nribbon <- gather(braid , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid2 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Malaysia\")\n\nribbon2 <- gather(braid2 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid3 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Taiwan\")\n\nribbon3 <- gather(braid3 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid4 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Hong Kong\")\n\nribbon4 <- gather(braid4 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nbraid5 <- wide %>% \n  select(`Country`, `MonthYear`, `Level`, `ImportValue`, `ExportValue`) %>% \n  drop_na() %>% \n  subset(Country == \"Indonesia\")\n\nribbon5 <- gather(braid5 , \"Type\", \"Value\", -`Country`, -`MonthYear`, -`Level`)\n\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+   \n  labs(title = \"Singapore trade balance trend with China\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon2,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid2, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Malaysia\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2021-01-01\"), \n           y = 2500000, size = 4, \n           label = \"Import > Export\", \n           hjust = 0, \n           color = hues[2])\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon3,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`<`ExportValue`), \n             data = braid3, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Taiwan\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2019-01-01\"), \n           y = 1000000, size = 4, \n           label = \"Import > Export\", \n           hjust = 0, \n           color = hues[2])\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon4,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid4, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Hong Kong\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2019-01-01\"), \n           y = 9000000, size = 4, \n           label = \"Export > Import\", \n           hjust = 0, \n           color = hues[1])\nggplot() +\n  geom_line(aes(`MonthYear`, `Value`, linetype = `Type`), \n            data = ribbon5,\n            show.legend = FALSE) +\n  geom_braid(aes(`MonthYear`, \n                 ymin = `ImportValue`, \n                 ymax = `ExportValue`, \n                 fill = `ImportValue`>`ExportValue`), \n             data = braid5, \n             alpha = 0.6, \n             method = 'line',\n             show.legend = FALSE)+ \n  labs(title = \"Singapore trade balance trend with Indonesia\", \n       x = 'Month Year', \n       y = 'Trade Value'\n  ) +\n  annotate(\"rect\", \n           xmin = as.Date(\"2020-01-01\"), \n           xmax = as.Date(\"2022-12-01\"), \n           ymin = 0, \n           ymax = 10000000,\n           alpha = .1,\n           fill = \"yellow\")+\n  annotate(\"text\", \n           x = as.Date(\"2019-01-01\"), \n           y = 9000000, size = 4, \n           label = \"Export > Import\", \n           hjust = 0, \n           color = hues[1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nSingapore Bi-lateral trend with major trading partners\nThe ribbon chart conveys the same message as the bubble chart. In February 2020, a significant decline in imports and exports between Singapore and China could be recognized. In terms of import and export rates, trade between Singapore and China has been well balanced. In 2021, Singapore will likely export more to China.\nMalaysia demonstrates an unexpected tendency. Prior to the start of Covid-19, commerce between Singapore and Malaysia was balanced. Since the Covid-19 outbreak, however, Singapore has had a trade deficit with Malaysia.\nCovid-19 appears to have little effect on Singapore imports from Taiwan. Taiwan’s import volume keeps on growing steadily.\nExport from Singapore to Hong Kong has a minimal effect, as there is no discernible change in trend, but the export rate is projected to rise in 2021.\nImports and exports with Indonesia decreased significantly at the beginning of 2020."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observe-trade-dynamic-of-singapores-major-trading-partners-in-relative",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observe-trade-dynamic-of-singapores-major-trading-partners-in-relative",
    "title": "Take-home Exercise 4",
    "section": "3.3 Observe trade dynamic of Singapore’s major trading partners in relative",
    "text": "3.3 Observe trade dynamic of Singapore’s major trading partners in relative\nThe slope graph allows us to see how each country’s import and export dynamics change in relation to the other countries over time.\nStep 1. Prepare data for slope graph\n\n\nCode\n# Import\nslopeimport <- wide %>% \n  subset(Country == \"China\" | Country == \"Malaysia\" | Country == \"Taiwan\" | Country == \"Hong Kong\" | Country == \"Indonesia\" ) %>% \n  mutate(month = month(MonthYear)) %>% \n  mutate(year = year(MonthYear)) %>% \n  drop_na() %>% \n  group_by(Country, year) %>% \n  summarise(sumyear = sum(ImportValue)) %>% \n  mutate(Year = factor(year)) %>% \n  arrange(`sumyear`)\n\n#Export\nslopeexport <- wide %>% \n  subset(Country == \"China\" | Country == \"Malaysia\" | Country == \"Taiwan\" | Country == \"Hong Kong\" | Country == \"Indonesia\" ) %>% \n  mutate(month = month(MonthYear)) %>% \n  mutate(year = year(MonthYear)) %>% \n  drop_na() %>% \n  group_by(Country, year) %>% \n  summarise(sumyear = sum(ExportValue)) %>% \n  mutate(Year = factor(year)) %>% \n  arrange(`sumyear`)\n\n\nStep 2. Create slope plot\n\n\nCode\n# Create slope plot for import\np <- newggslopegraph(dataframe = slopeimport, \n                Times = `Year`, \n                Measurement = `sumyear`, \n                Grouping = `Country`,\n                Title = \"Total Import per Year\",\n                SubTitle = \"2016-2022\",\n                Caption = NULL)\n\np + annotate(\"rect\", \n             xmin = \"2020\", \n             xmax = \"2022\", \n             ymin = -1, \n             ymax = 600000,\n             alpha = .1,\n             fill = \"yellow\")\n# Create slope plot for export\np2 <- newggslopegraph(dataframe = slopeexport, \n                Times = `Year`, \n                Measurement = `sumyear`, \n                Grouping = `Country`,\n                Title = \"Total Export per Year\",\n                SubTitle = \"2016-2022\",\n                Caption = NULL)\n\np2 + annotate(\"rect\", \n             xmin = \"2020\", \n             xmax = \"2022\", \n             ymin = -1, \n             ymax = 600000,\n             alpha = .1,\n             fill = \"yellow\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTrade dynamic of Singapore’s major trading partners in relative\nThere is no change in rank for import. China has consistently ranked #1 in terms of imports. Singapore has expanded its imports from three nations, including China, Malaysia, and Taiwan, beginning in 2020.\nLikewise, there is no change in rank on the export side. China has continuously topped the exporting rankings. Similar to Hong Kong, although China’s export rate slowed in 2019, growth accelerated in 2021. Malaysia and Indonesia’s export volumes dropped drastically in 2020 before rebounding in 2021."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observing-the-dynamic-of-trade-balance-based-on-location",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#observing-the-dynamic-of-trade-balance-based-on-location",
    "title": "Take-home Exercise 4",
    "section": "3.4 Observing the dynamic of trade balance based on location",
    "text": "3.4 Observing the dynamic of trade balance based on location\nStep 1. Prepare data for Choropleth map\n\n\nCode\ndata(\"World\")\nmap <- World %>% \n  select(iso_a3, name, sovereignt, geometry)\n  \n\nmap$name <- as.character(map$name)\nmap$sovereignt <- as.character(map$sovereignt)\n\n\nStep 2. Create animated map\n\n\nCode\ndata_map_area <- map %>% \n  full_join(wide, by = c('sovereignt' = 'Country')) %>% \n  drop_na()\n                          \ntmap_mode(\"view\")\nchoropleth <- tm_shape(data_map_area) +\n  tm_polygons(\"Diff\") +\n  tm_facets(along = \"MonthYear\", free.coords = FALSE)\n\ntmap_animation(choropleth , filename = \"choropleth.gif\", delay = 50)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#monitoring-the-relative-trade-balance-dynamics-of-singapores-major-trading-partners",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#monitoring-the-relative-trade-balance-dynamics-of-singapores-major-trading-partners",
    "title": "Take-home Exercise 4",
    "section": "3.5 Monitoring the relative trade balance dynamics of Singapore’s major trading partners",
    "text": "3.5 Monitoring the relative trade balance dynamics of Singapore’s major trading partners\nHeatmaps allow us to see the group’s auto-correlation and compare it to another group at the same time.\nStep 1. Prepare data by selecting top difference between import and export\n\n\nCode\nheatmap <- wide %>% \n  drop_na() %>% \n  group_by(Country) %>% \n  mutate(totaldiff = sum(Diff)) %>% \n  arrange(totaldiff) %>% \n  subset(Country == \"China\" | Country == \"Malaysia\" | Country == \"Taiwan\" | Country == \"Hong Kong\" | Country == \"Indonesia\" ) \n\n\nStep 2. Plot heatmap\n\n\nCode\np <-  heatmap %>% \n  ggplot(aes(x = MonthYear, y = reorder(Country,totaldiff), fill= Diff)) +\n  geom_tile_interactive(tooltip = c(paste( \"Country:\", heatmap$Country,\n                                           \"\\n Import:\", heatmap$ImportValue,\n                                           \"\\n Export:\", heatmap$ExportValue,\n                                           \"\\n Balance:\" , -heatmap$Diff,\n                                           \"\\n Month:\", heatmap$MonthYear))) +\n  scale_fill_distiller(palette = \"Spectral\") +\n  theme_ipsum() +\n  geom_tile() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=2))+\n  labs(title = \"Relative trade balance dynamics of Singapore's major trading partners\", x=\"\", y=\"\") +\n  \n  annotate(\"segment\", \n           x = as.Date(\"2020-01-01\"), \n           xend = as.Date(\"2020-01-01\"), \n           y = 0, \n           yend = 6,\n           colour = \"red\") +\n  \n  annotate(\"text\",\n           label = \"Covid outbreak\", \n           x = as.Date(\"2020-06-01\"),\n           y=2,\n           color = \"red\") \n  \ngirafe(\n  ggobj = p,\n  width_svg = 15,\n  height_svg = 3\n)\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nInsights from heatmap\nThe difference in color tone between Hong Kong and the other countries stand out as the trading relationship between Singapore and Hong Kong is highly surplus. The darker blue color of Hong Kong, which began in early 2021, reflects the quicker rise of export volume in comparison to import volume.\nContrary to Hong Kong, Taiwan reflects the outstanding deficit balance. The gradual darkening of the red shade over time for Taiwan represents the continuing increase of import volume over export."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#singapore-china-trading-pattern",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#singapore-china-trading-pattern",
    "title": "Take-home Exercise 4",
    "section": "3.6 Singapore-China trading pattern",
    "text": "3.6 Singapore-China trading pattern\nStep 1: Deriving month and year fields\n\n\nCode\ncycle <- wide\n\ncycle$month <- month(cycle$`MonthYear`)\ncycle$year <- year(cycle$`MonthYear`)\n\n\nStep 2: Extracting the target country\n\n\nCode\ncycle <- cycle %>%\n  subset(`Country`== \"China\") %>% \n  drop_na()\n\n\nStep 3: Plotting the cycle plot\n\n\nCode\nggplot() +\n  geom_line(data=cycle, aes(x=year, y=ImportValue, group=month), colour= \"steelblue\") +\n  geom_line(data=cycle, aes(x=year, y=ExportValue, group=month), colour= \"#ec5954\") +\n\n  facet_grid(~month) +\n  labs(title = \"Singapore-China trading pattern\",\n       subtitle = \"2016-2022\") +\n\n  ylab(\"Trading Volume\") +\n  theme(plot.title = element_text(size=15),\n        axis.text.x = element_text(size = 10, angle = 90),\n        axis.text.y = element_text(size = 10),\n        strip.text = element_text(size = 10))\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nSingapore-China trade\nFrom the cycle plot, we note that each month follows a similar pattern, with a dip in 2019-2020 and a rise beginning in 2021."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "title": "In-class Exercise 9",
    "section": "",
    "text": "Don’t put everything on dashboard. We should be selective\nThere are different types of dashboard. Typically categorized into 3 groups\n\nOperation dashboard - operation centric\nStrategic dashboard\nAnalytics dashboard\n\n\nWe can set up the visualize workshop to gather the requirement and show the use case to the user.\nWe are not using the show case from the same industry but instead show other industry so that they don’t limit themselves to the visual existing in that domain.\nThen in the next step we can focus on the use case from the same industry and gather the data they have.\nMake it the iteration that you involve the client in the process.\nWe try to work on the separate plot and get the feedback from the user part by part.\n\n\n\n\n# pacman::p_load(lubridate, ggthemes, reactable,\n# reactablefmtr, gt, gtExtras, tidyverse)\n\n\n# library(RODBC)\n# con <- odbcConnectAccess('data/Coffee Chain.mdb')\n# coffeechain <- sqlFetch(con, 'CoffeeChain Query')\n# write_rds(coffeechain, \"data/CoffeeChain.rds\")\n# odbcClose(con)\n\n\n# coffeechain <- read_rds(\"data/CoffeeChain.rds\")\n\n\n# product <- coffeechain %>%\n#   group_by(`Product`) %>%\n#   summarise(`target` = sum(`Budget Sales`),\n#             `current` = sum(`Sales`)) %>%\n#   ungroup()\n\n\n# ggplot(product, aes(Product, current)) + \n#   geom_col(aes(Product, max(target) * 1.01),\n#            fill=\"grey85\", width=0.85) +\n#   geom_col(aes(Product, target * 0.75),\n#            fill=\"grey60\", width=0.85) +\n#   geom_col(aes(Product, target * 0.5),\n#            fill=\"grey50\", width=0.85) +\n#   geom_col(aes(Product, current), \n#            width=0.35,\n#            fill = \"black\") + \n#   geom_errorbar(aes(y = target,\n#                     x = Product, \n#                     ymin = target,\n#                     ymax= target), \n#                 width = .4,\n#                 colour = \"red\",\n#                 size = 1) +\n#   coord_flip()\n\n\n# sales_report <- coffeechain %>%\n#   filter(Date >= \"2013-01-01\") %>%\n#   mutate(Month = month(Date)) %>%\n#   group_by(Month, Product) %>%\n#   summarise(Sales = sum(Sales)) %>%\n#   ungroup() %>%\n#   select(Month, Product, Sales)\n\n\n# mins <- group_by(sales_report, Product) %>% \n#   slice(which.min(Sales))\n# maxs <- group_by(sales_report, Product) %>% \n#   slice(which.max(Sales))\n# ends <- group_by(sales_report, Product) %>% \n#   filter(Month == max(Month))\n\n\n# quarts <- sales_report %>%\n#   group_by(Product) %>%\n#   summarise(quart1 = quantile(Sales, \n#                               0.25),\n#             quart2 = quantile(Sales, \n#                               0.75)) %>%\n#   right_join(sales_report)\n\n\n# report <- coffeechain %>%\n#   mutate(Year = year(Date)) %>%\n#   filter(Year == \"2013\") %>%\n#   mutate (Month = month(Date, \n#                         label = TRUE, \n#                         abbr = TRUE)) %>%\n#   group_by(Product, Month) %>%\n#   summarise(Sales = sum(Sales)) %>%\n#   ungroup()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html",
    "title": "In-class Exercise 10",
    "section": "",
    "text": "Prof recap the geospatial application on Rshiny with the Choropleth map where the user can change the variable and color.\nShare good practice of drafting the application on Quarto first before putting it on the Shiny app.\nThe interactive application -> we can group it with the data table that we are using for each output.\n\n\n\n\n\nCentrality analysis\nNode-Edge : The most important one is the node. You must start with having nodes then there are ways to create the link either physical or not.\nTypes of network : Directed and Undirected graph\n\nAn ego-centric : example secretary is the key to CEO\nBipartite graph\nTidygraph is the latest package for graph that based on the tidyverse structure. The tidygraph store within tibbler dataframe.\n\n\n\n\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\n\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# … with 1,366 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# … with 51 more rows\n\n\n\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# … with 1,366 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# … with 51 more rows\n\n\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\nRestructure the data here is very important. For network plot, the data structure is critical.\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %>%\n  rename(from = id) %>%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %>%\n  rename(to = id) %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(from, to) %>%\n    summarise(weight = n()) %>%\n  filter(from!=to) %>%\n  filter(weight > 1) %>%\n  ungroup()\n\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/In-class_Ex10.html",
    "href": "In-class_Ex/In-class_Ex10/In-class_Ex10.html",
    "title": "In-class Exercise 10",
    "section": "",
    "text": "load library\n\npacman::p_load(lubridate, tidyquant, ggHoriPlot,\n               timetk, ggthemes, plotly, tidyverse)\n\nload data\nIn total, there are 46 of them. We extract only top 40 based on the market cap. Observe that Top40 has only one column. This one is intentionally to meet the format requirement for horizon plot.\n\ncompany <- read_csv(\"data/companySG.csv\")\nTop40 <- company %>% \n  slice_max(`marketcap`, n=40) %>% \n  select(symbol)\n\n\nStock40_daily <- Top40 %>%\n  tq_get(get = \"stock.prices\", \n         from = \"2020-01-01\", \n         to = \"2022-03-31\") %>%\n  group_by(symbol) %>%\n  tq_transmute(select = NULL, \n               mutate_fun = to.period, \n               period  = \"days\")\n\n\nStock40_daily <- Top40 %>%\n  tq_get(get = \"stock.prices\", \n         from = \"2020-01-01\", \n         to = \"2022-03-31\") %>%\n  group_by(symbol) %>%\n  tq_transmute(select = NULL, \n               mutate_fun = to.period, \n               period  = \"days\")\n\n\nStock40_daily %>% \n  ggplot() +\n  geom_horizon(aes(x = date, y=adjusted), origin = \"midpoint\", horizonscale = 6)+\n  facet_grid(symbol~.)+\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n  scale_x_date(expand=c(0,0), date_breaks = \"1 month\", date_labels = \"%b%y\") +\n  ggtitle('Daily Adjusted Prices (Jan 2020 to Mar 2022)') \n\n\n\n\n\nStock40_daily <- Stock40_daily %>%\n  left_join(company) %>%\n  select(1:8, 11:12)\n\n\nStock40_daily %>% \n  ggplot() +\n  geom_horizon(aes(x = date, y=adjusted), origin = \"midpoint\", horizonscale = 6)+\n  facet_grid(Name~.)+ #<<\n  geom_vline(xintercept = as.Date(\"2020-03-11\"), colour = \"grey15\", linetype = \"dashed\", size = 0.5)+ #<<\n  geom_vline(xintercept = as.Date(\"2020-12-14\"), colour = \"grey15\", linetype = \"dashed\", size = 0.5)+ #<<\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"),\n        strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n  scale_x_date(expand=c(0,0), date_breaks = \"1 month\", date_labels = \"%b%y\") +\n  ggtitle('Daily Adjusted Prices (Jan 2020 to Mar 2022)') \n\n\n\n\n\nStock40_daily %>%\n  filter(symbol == \"DBSDF\") %>%\n  ggplot(aes(x = date, y = close)) +\n    geom_line() +\n    labs(title = \"DBS Group Holdings Ltd (DBSDF) Daily Stock Price\", \n         y = \"Closing Price\", x = \"\") + \n    theme_tq()\n\n\n\n\n\nselected_stocks <-  Stock40_daily %>%\n  filter (`symbol` == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"))\n\n\np <- ggplot(selected_stocks, \n            aes(x = date, y = adjusted)) + \n  scale_y_continuous() +\n  geom_line() +\n  facet_wrap(~Name, scales = \"free_y\",) +\n  theme_tq() +\n  labs(title = \"Daily stock prices of selected weak stocks\", \n       x = \"\", y = \"Adjusted Price\") + \n  theme(axis.text.x = element_text(size = 6), \n        axis.text.y = element_text(size = 6))\n\nggplotly(p)\n\n\n\n\n\n\nend <- as_date(\"2022-03-31\")\n\n\nStock40_daily %>%\n  filter(symbol == \"DBSDF\") %>%\n  ggplot(aes(\n    x = date, y = close)) +\n  geom_candlestick(aes(\n    open = open, high = high, \n    low = low, close = close)) +\n  geom_line(size = 0.5)+\n    coord_x_date(xlim = c(end - weeks(12), \n                          end),\n                 ylim = c(20, 35),\n                 expand = TRUE) +\n  labs(title = \"DBS Group Holdings Ltd (DBSDF) Daily Stock Price\", \n       y = \"Closing Price\", x = \"\") + \n  theme_tq()\n\n\n\n\n\nStock40_daily %>%\n  filter(symbol == \"DBSDF\") %>%\n  ggplot(aes(\n    x = date, y = close)) +\n  geom_candlestick(aes(\n    open = open, high = high, \n    low = low, close = close)) +\n  geom_line(size = 0.5)+\n  geom_ma(color = \"darkgreen\", n = 20) +\n  geom_ma(color = \"lightgreen\", n = 5) + \n    coord_x_date(xlim = c(end - weeks(12), \n                          end),\n                 ylim = c(20, 35),\n                 expand = TRUE) +\n  labs(title = \"DBS Group Holdings Ltd (DBSDF) Daily Stock Price\",\n       subtitle = \"darkgreen = 1-day MA, lightgreen = 5-day MA\",\n       y = \"Closing Price\", x = \"\") + \n  theme_tq()\n\n\n\n\n\nStock40_daily %>%\n  filter(symbol == \"DBSDF\") %>% \n  ggplot(aes(x=date, y=close))+\n  geom_line(size=0.5)+\n  geom_bbands(aes(\n    high = high, low = low, close = close), \n    ma_fun = SMA, sd = 2, n = 20,\n    size = 0.75, color_ma = \"royalblue4\", \n    color_bands = \"red1\")+\n    coord_x_date(xlim = c(\"2020-02-01\", \n                          \"2022-03-31\"), \n                 expand = TRUE)+\n    labs(title = \"DBS Group Holdings Ltd (DBSDF) Daily Stock Price\",\n         subtitle = \"dotted red lines = bollinger bands\",\n         x = \"Date\", y =\"Price\") +\ntheme(legend.position=\"none\")\n\n\n\n\n\ncandleStick_plot<-function(symbol, from, to){\n  tq_get(symbol, from = from, to = to, warnings = FALSE) %>% \n    mutate(greenRed=ifelse(open-close>0, \"Red\", \"Green\")) %>% \n    ggplot()+\n    geom_segment(\n      aes(x = date, xend=date, y =open, yend =close, colour=greenRed), \n      size=3)+\n    theme_tq()+\n    geom_segment(\n      aes(x = date, xend=date, y =high, yend =low, colour=greenRed))+\n    scale_color_manual(values=c(\"ForestGreen\",\"Red\"))+\n    ggtitle(paste0(symbol,\" (\",from,\" - \",to,\")\"))+\n    theme(legend.position =\"none\",\n          axis.title.y = element_blank(),\n          axis.title.x=element_blank(),\n          axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1),\n          plot.title= element_text(hjust=0.5))\n}\n\n\np <- candleStick_plot(\"DBSDF\",\n                      from = '2022-01-01',\n                      to = today())\nggplotly(p)"
  }
]